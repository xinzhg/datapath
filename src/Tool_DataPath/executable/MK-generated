# Makefile template to compile the generated code
# asumes that make is called like this:
# make -f MK-generaged -DOBJECTS="WP1.O ..." 
# The macro OBJECTS must list the objects needed

### Handle library paths

# Find all existing libraries defined in DATAPATH_LIBRARY_PATH
LIBRARY_PATHS := $(foreach path,$(subst :, ,$(DATAPATH_LIBRARY_PATH)),$(realpath $(path)))
# Find existing `libraries` directories in those paths
LIBRARY_SO_PATHS := $(foreach path,$(LIBRARY_PATHS),$(realpath $(path)/libraries))

# Set up the linker flags
LINK_PATH := $(foreach path,$(LIBRARY_SO_PATHS),-L $(path))

# Set up RPATH flags
LINK_RPATH := "-Wl,--enable-new-dtags"
LINK_RPATH += $(foreach path,$(LIBRARY_SO_PATHS),-Wl,-rpath=$(path))

# Set up the include flags
LIB_INC := $(foreach path,$(subst :, ,$(DATAPATH_LIBRARY_PATH)),-I $(path))

### Handle M4 paths
M4_SOURCE_PATHS := $(foreach path,$(subst :, ,$(DATAPATH_M4_PATH)),$(realpath $(path)))
M4INCLUDES := $(foreach path,$(M4_SOURCE_PATHS),-I $(path))

M4INCLUDES += $(LIB_INC)

# COMPILER SELECTION
CC := g++
#CC=/opt/intel/Compiler/11.1/056/bin/intel64/icc

CCFLAGS := -fPIC -g -D_FILE_OFFSET_BITS=64 -DDEBUG

#CCFLAGS += -DSLOW_MAP_DSTRING

# use C++11 standard
CCFLAGS += -std=gnu++11
#CCFLAGS += -std=gnu++0x

# profiling information per query
# Note: has a negative impact on performance
#CCFLAGS += -DPER_QUERY_PROFILE

M4 := m4

# COMPILER OPTIMIZATION
ifdef DEBUG_DATAPATH
OPT= -Wall # no optimization, more warnings
else # full optimization
OPT= -O3 -march=native -ffast-math
endif


ifdef DP_GLAs
GLA_INC += -I $(DP_GLAs)
M4INCLUDES += -I $(DP_GLAs)
FUNC_INC += -I $(DP_FUNCTIONS)
endif

CINCLUDES := -I $(DATAPATH_HEADER_PATH) ${GLA_INC} $(FUNC_INC) ${LIB_INC}

LIB_EXTRACT := $(DATAPATH_EXEC_PATH)/extract_libs.awk
LIB_PROCESS := $(DATAPATH_EXEC_PATH)/process_libs.sh
LIB_CFLAGS := $(DATAPATH_EXEC_PATH)/process_cflags.sh

CC_FILES := ${OBJECTS:.o=.cc}
CFLAGS_FILES := ${OBJECTS:.o=.cflags}
LIB_FILES := ${OBJECTS:.o=.lib}

# to preserve the generated cc files we need this
.PRECIOUS: %.cc

DataTypes.m4:
	ln -s ../DataTypes.m4

$(CC_FILES) : %.cc: %.m4 DataTypes.m4
	$(M4) $(M4INCLUDES) $< > $@

$(LIB_FILES) : %.lib : %.cc
	${LIB_EXTRACT} $^ > $@

$(CFLAGS_FILES) : %.cflags : %.lib
	$(LIB_CFLAGS) $< > $@

$(OBJECTS) : %.o : %.cc %.cflags
	$(CC) $(CINCLUDES) $(CCFLAGS) $(OPT) -c -o $@ $< $(shell cat $(<:.cc=.cflags))

libfile: $(LIB_FILES)
	sort -u $^ > libfile.temp
	${LIB_PROCESS} libfile.temp > libfile
	rm libfile.temp

Generated.so: ${OBJECTS} libfile
	${CC} ${OPT} -rdynamic -shared  -o Generated.so $(LINK_RPATH) $(LINK_PATH) ${OBJECTS} ${LIBS} ${STAT_LIBS} $(shell cat libfile)
