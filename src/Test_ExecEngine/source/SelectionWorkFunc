
#include "WorkDescription.h"
#include "ExecEngineData.h"
#include "Column.h"
#include "ColumnIterator.cc"
#include "MMappedStorage.h"
#include "BString.h"
#include "BStringIterator.h"

// Note: in this test, there are seven columns in each chunk.  The first
// four have the values that are going to be aggregated (the first is agged
// by query 0, the second by query 1, and so on).  The next (fifth) is hashed by 
// query 0 and query 1.  The sixth is hashed (RHS) by query 2 and query 3; it is
// also used by query 1.  The seventh is hashed (LHS) by all queries.

int SelectionFunc (WorkDescription &workDescription, ExecEngineData &result) {
	
	// go to the work description and get the input chunk
	SelectionWorkDescription myWork;
	myWork.swap (workDescription);
	Chunk &input = myWork.get_chunkToProcess ();

	// get the input bitmap out of the input chunk
	BStringIterator myInBStringIter;
	input.SwapBitmap (myInBStringIter);

	// get all of the queries that are active here
	QueryExitContainer &whichExits = myWork.get_whichQueryExits ();
	Bitstring whichQueries;
	whichQueries.Empty ();
	for (whichExits.MoveToStart (); whichExits.RightLength (); whichExits.Advance ()) {
		whichQueries.Union (whichExits.Current ().query); 
	}

	// and create the output bitmap
	MMappedStorage myStore;
	Column bitmapOut (myStore);
	BStringIterator myOutBStringIter (bitmapOut, whichQueries);

	// extract the relevant columns and build iterators for them
	Column col0, col1, col2, col3, col6;
	input.SwapColumn (col0, 0);
	ColumnIterator <int> col0Iter (col0);
	input.SwapColumn (col1, 1);
	ColumnIterator <int> col1Iter (col1);
	input.SwapColumn (col2, 2);
	ColumnIterator <int> col2Iter (col2);
	input.SwapColumn (col3, 3);
	ColumnIterator <int> col3Iter (col3);

	// now actually run the selection
	while (!myInBStringIter.AtUnwrittenByte ()) {
		
		// see which queries match up
		Bitstring curBits = myInBStringIter.GetCurrent ();
		curBits.Intersect (whichQueries);

		// do the actual selection
		if (curBits.IsMember (0)) 
			if (col0Iter.GetCurrent () > 50)
				curBits.DeleteMember (0);
		if (curBits.IsMember (1)) 
			if (col1Iter.GetCurrent () > 150)
				curBits.DeleteMember (1);
		if (curBits.IsMember (2)) 
			if (col2Iter.GetCurrent () > 150)
				curBits.DeleteMember (2);
		if (curBits.IsMember (3)) 
			if (col3Iter.GetCurrent () > 250)
				curBits.DeleteMember (3);
		
		// and advance everyone
		if (whichQueries.IsMember (0))
			col0Iter.Advance ();
		if (whichQueries.IsMember (1))
			col1Iter.Advance ();
		if (whichQueries.IsMember (2))
			col2Iter.Advance ();
		if (whichQueries.IsMember (3))
			col3Iter.Advance ();

		// add the new bitstring in
		myOutBStringIter.Insert (curBits);
		myOutBStringIter.Advance ();

		// last, advance the bitmap
		myInBStringIter.Advance ();	
	}

	// put the data in the ouput
	col0Iter.Done (col0);
	input.SwapColumn (col0, 0);
	col1Iter.Done (col1);
	input.SwapColumn (col1, 1);
	col2Iter.Done (col2);
	input.SwapColumn (col2, 2);
	col3Iter.Done (col3);
	input.SwapColumn (col3, 3);

	// and put the bitmap in the output
	myOutBStringIter.Done ();
	input.SwapBitmap (myOutBStringIter);	

	ChunkContainer tempResult (input);
	tempResult.swap (result);

	return 1;
}

