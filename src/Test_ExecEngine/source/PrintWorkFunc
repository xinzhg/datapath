
#include "WorkDescription.h"
#include "ExecEngineData.h"
#include "Column.h"
#include "ColumnIterator.cc"
#include "MMappedStorage.h"
#include "BString.h"
#include "BStringIterator.h"


// Note: in this test, there are seven columns in each chunk.  The first
// four have the values that are going to be aggregated (the first is agged
// by query 0, the second by query 1, and so on).  The next (fifth) is hashed by
// query 0 and query 1.  The sixth is hashed (RHS) by query 2 and query 3; it is
// also used by query 1.  The seventh is hashed (LHS) by all queries

int PrintChunk (WorkDescription &workDescription, ExecEngineData &result) {

	// get the work description
	PrintWorkDescription myWork;
	myWork.swap (workDescription);

	// get the bitmap out of the input chunk
	Chunk &input = myWork.get_chunkToPrint ();
	BStringIterator myBStringIterator;
	input.SwapBitmap (myBStringIterator);

	// get all of the queries that are active here
	QueryExitContainer &whichExits = myWork.get_whichQueryExits ();
	Bitstring whichQueries;
	whichQueries.Empty ();
	for (whichExits.MoveToStart (); whichExits.RightLength (); whichExits.Advance ()) {
		whichQueries.Union (whichExits.Current ().query); 
	}

	// extract the relevant columns and build iterators for them
	Column col0, col1, col2, col3;
	input.SwapColumn (col0, 0);
	ColumnIterator <int> col0Iter (col0);
	input.SwapColumn (col1, 1);
	ColumnIterator <int> col1Iter (col1);
	input.SwapColumn (col2, 2);
	ColumnIterator <int> col2Iter (col2);
	input.SwapColumn (col3, 3);
	ColumnIterator <int> col3Iter (col3);

	// now do the print
	Bitstring curBits = myBStringIterator.GetCurrent ();
	curBits.Intersect (whichQueries);
	cout << "In Print!\n";
	if (curBits.IsMember (0)) 
		cout << "Result for col 0 is " << col0Iter.GetCurrent () << "\n";
	if (curBits.IsMember (1)) 
		cout << "Result for col 1 is " << col1Iter.GetCurrent () << "\n";
	if (curBits.IsMember (2)) 
		cout << "Result for col 2 is " << col2Iter.GetCurrent () << "\n";
	if (curBits.IsMember (3)) 
		cout << "Result for col 3 is " << col3Iter.GetCurrent () << "\n";

	return 0;
}

