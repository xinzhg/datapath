//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : DPtree.g
 *     -                            On : 2012-06-14 15:15:17
 *     -           for the tree parser : DPtreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser DPtree has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pDPtree, which is returned from a call to DPtreeNew().
 *
 * The methods in pDPtree are  as follows:
 *
 *  - void      pDPtree->parse(pDPtree)
 *  - void      pDPtree->complexStatement(pDPtree)
 *  - void      pDPtree->runStmt(pDPtree)
 *  - void      pDPtree->relationCR(pDPtree)
 *  - vector<string>      pDPtree->lstArgsFc(pDPtree)
 *  - vector<string>      pDPtree->lstArgsGLA(pDPtree)
 *  - string      pDPtree->dType(pDPtree)
 *  - void      pDPtree->statement(pDPtree)
 *  - void      pDPtree->writer(pDPtree)
 *  - void      pDPtree->scanner(pDPtree)
 *  - void      pDPtree->waypoint(pDPtree)
 *  - void      pDPtree->query(pDPtree)
 *  - void      pDPtree->qBodyStatement(pDPtree)
 *  - void      pDPtree->wpbodyStatement(pDPtree)
 *  - void      pDPtree->bodyStatement(pDPtree)
 *  - void      pDPtree->rules(pDPtree)
 *  - void      pDPtree->filterRule(pDPtree)
 *  - void      pDPtree->synthRule(pDPtree)
 *  - void      pDPtree->aggregateRule(pDPtree)
 *  - void      pDPtree->printRule(pDPtree)
 *  - void      pDPtree->printAtts(pDPtree)
 *  - void      pDPtree->ctAttList(pDPtree)
 *  - string      pDPtree->ctAtt(pDPtree)
 *  - void      pDPtree->printFile(pDPtree)
 *  - DPtree_glaDef_return      pDPtree->glaDef(pDPtree)
 *  - void      pDPtree->glaTemplate(pDPtree)
 *  - void      pDPtree->glaTemplArg(pDPtree)
 *  - void      pDPtree->attWT(pDPtree)
 *  - void      pDPtree->attC(pDPtree)
 *  - void      pDPtree->glaRule(pDPtree)
 *  - void      pDPtree->attLWT(pDPtree)
 *  - void      pDPtree->bypassRule(pDPtree)
 *  - void      pDPtree->joinRule(pDPtree)
 *  - SlotID      pDPtree->attribute(pDPtree)
 *  - void      pDPtree->selectWP(pDPtree)
 *  - void      pDPtree->joinWP(pDPtree)
 *  - void      pDPtree->attributeList(pDPtree)
 *  - void      pDPtree->aggregateWP(pDPtree)
 *  - void      pDPtree->glaWP(pDPtree)
 *  - void      pDPtree->printWP(pDPtree)
 *  - void      pDPtree->connList(pDPtree)
 *  - void      pDPtree->wayPointCN(pDPtree)
 *  - void      pDPtree->textloaderWP(pDPtree)
 *  - void      pDPtree->wpDefinition(pDPtree)
 *  - string      pDPtree->expr(pDPtree)
 *  - DPtree_expression_return      pDPtree->expression(pDPtree)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_DPtree_H
#define _DPtree_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct DPtree_Ctx_struct DPtree, * pDPtree;



 #include "SymbolicWaypointConfig.h"
 #include "LemonTranslator.h"
 #include "AttributeManager.h"
 #include "QueryManager.h"
 #include "DataTypeManager.h"
 #include "ExprListInfo.h"
 #include "Catalog.h"
 #include <iostream>
 #include <map>
 #include <vector>

/* Debugging */
#undef PREPORTERROR
#define PREPORTERROR assert(1=2)

// uncomment this to enforce types
#define ENFORCE_TYPES
//#define ENFORCE_GLA_TYPES

#ifndef TXT
#define TXT(x) ((const char*)(x->getText(x))->chars)
#endif
#ifndef TXTN
#define TXTN(x) ((NormalizeQuotes((const char*)(x->getText(x))->chars)).c_str())
#endif
#ifndef TXTS
#define TXTS(x) ((StripQuotes((const char*)(x->getText(x))->chars)).c_str())
#endif
#ifndef STR
#define STR(X) ( string(TXT(X)) )
#endif
#ifndef STRN
#define STRN(X) ( string(TXTN(X)) )
#endif
#ifndef STRS
#define STRS(X) ( string(TXTS(X)) )
#endif


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct DPtree_glaDef_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
    string name;
    string defs;
}
    DPtree_glaDef_return;

typedef struct DPtree_expression_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
    string sExpr;
    string type;
    bool isCT;
}
    DPtree_expression_return;



/** Context tracking structure for DPtree
 */
struct DPtree_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;


     void (*parse)	(struct DPtree_Ctx_struct * ctx, LemonTranslator* trans);
     void (*complexStatement)	(struct DPtree_Ctx_struct * ctx);
     void (*runStmt)	(struct DPtree_Ctx_struct * ctx);
     void (*relationCR)	(struct DPtree_Ctx_struct * ctx);
     vector<string> (*lstArgsFc)	(struct DPtree_Ctx_struct * ctx);
     vector<string> (*lstArgsGLA)	(struct DPtree_Ctx_struct * ctx);
     string (*dType)	(struct DPtree_Ctx_struct * ctx);
     void (*statement)	(struct DPtree_Ctx_struct * ctx, bool isNew);
     void (*writer)	(struct DPtree_Ctx_struct * ctx);
     void (*scanner)	(struct DPtree_Ctx_struct * ctx);
     void (*waypoint)	(struct DPtree_Ctx_struct * ctx, bool isNew);
     void (*query)	(struct DPtree_Ctx_struct * ctx);
     void (*qBodyStatement)	(struct DPtree_Ctx_struct * ctx);
     void (*wpbodyStatement)	(struct DPtree_Ctx_struct * ctx);
     void (*bodyStatement)	(struct DPtree_Ctx_struct * ctx);
     void (*rules)	(struct DPtree_Ctx_struct * ctx);
     void (*filterRule)	(struct DPtree_Ctx_struct * ctx);
     void (*synthRule)	(struct DPtree_Ctx_struct * ctx);
     void (*aggregateRule)	(struct DPtree_Ctx_struct * ctx);
     void (*printRule)	(struct DPtree_Ctx_struct * ctx);
     void (*printAtts)	(struct DPtree_Ctx_struct * ctx, string& names, string& types);
     void (*ctAttList)	(struct DPtree_Ctx_struct * ctx, string& ctArgs);
     string (*ctAtt)	(struct DPtree_Ctx_struct * ctx);
     void (*printFile)	(struct DPtree_Ctx_struct * ctx, string& s);
     DPtree_glaDef_return (*glaDef)	(struct DPtree_Ctx_struct * ctx);
     void (*glaTemplate)	(struct DPtree_Ctx_struct * ctx, string& name, string& defs);
     void (*glaTemplArg)	(struct DPtree_Ctx_struct * ctx, string& args, string& defs);
     void (*attWT)	(struct DPtree_Ctx_struct * ctx, string& args);
     void (*attC)	(struct DPtree_Ctx_struct * ctx, string& args);
     void (*glaRule)	(struct DPtree_Ctx_struct * ctx);
     void (*attLWT)	(struct DPtree_Ctx_struct * ctx, SlotContainer& outAtts, vector<string> &outTypes);
     void (*bypassRule)	(struct DPtree_Ctx_struct * ctx);
     void (*joinRule)	(struct DPtree_Ctx_struct * ctx);
     SlotID (*attribute)	(struct DPtree_Ctx_struct * ctx);
     void (*selectWP)	(struct DPtree_Ctx_struct * ctx);
     void (*joinWP)	(struct DPtree_Ctx_struct * ctx);
     void (*attributeList)	(struct DPtree_Ctx_struct * ctx, SlotContainer& atts);
     void (*aggregateWP)	(struct DPtree_Ctx_struct * ctx);
     void (*glaWP)	(struct DPtree_Ctx_struct * ctx);
     void (*printWP)	(struct DPtree_Ctx_struct * ctx);
     void (*connList)	(struct DPtree_Ctx_struct * ctx);
     void (*wayPointCN)	(struct DPtree_Ctx_struct * ctx);
     void (*textloaderWP)	(struct DPtree_Ctx_struct * ctx);
     void (*wpDefinition)	(struct DPtree_Ctx_struct * ctx);
     string (*expr)	(struct DPtree_Ctx_struct * ctx, SlotContainer& atts, string& cstStr);
     DPtree_expression_return (*expression)	(struct DPtree_Ctx_struct * ctx, SlotContainer& atts, string& cstStr);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct DPtree_Ctx_struct * ctx);
    void	    (*free)   (struct DPtree_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pDPtree DPtreeNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pDPtree DPtreeNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define FILTER      4
#define JOIN      5
#define GLA      6
#define PRINT      7
#define AGGREGATE      8
#define EQUAL      9
#define SEPARATOR      10
#define ATTRIBUTES      11
#define TEXTLOADER      12
#define FILE      13
#define MATCH_DP      14
#define CASE_DP      15
#define BOOL_T      16
#define ID      17
#define INT      18
#define EXPONENT      19
#define FLOAT      20
#define COMMENT      21
#define WS      22
#define ESC_SEQ      23
#define STRING      24
#define SEMICOLON      25
#define COMMA      26
#define COLON      27
#define DOT      28
#define LPAREN      29
#define RPAREN      30
#define LSQ      31
#define RSQ      32
#define QMARK      33
#define LAND      34
#define LOR      35
#define BAND      36
#define BOR      37
#define XOR      38
#define LNOT      39
#define ISEQUAL      40
#define NEQUAL      41
#define LS      42
#define GT      43
#define LE      44
#define GE      45
#define NOT      46
#define SLEFT      47
#define SRIGHT      48
#define PLUS      49
#define MINUS      50
#define TIMES      51
#define DIVIDE      52
#define MOD      53
#define HEX_DIGIT      54
#define UNICODE_ESC      55
#define OCTAL_ESC      56
#define OP      57
#define NEWSTATEMENT      58
#define OLDSTATEMENT      59
#define ATTS      60
#define ATT      61
#define FUNCTION      62
#define OPDEF      63
#define OPERATOR      64
#define UOPERATOR      65
#define DELWAYPOINT      66
#define DELQUERY      67
#define CRDATATYPE      68
#define CRSYNONIM      69
#define FCT      70
#define TPATT      71
#define ATTFROM      72
#define ATTWT      73
#define ATTSWT      74
#define RUN__      75
#define QUERRY__      76
#define WAYPOINT__      77
#define SELECT__      78
#define TERMCONN      79
#define SCANNER__      80
#define WRITER__      81
#define GLATEMPLATE      82
#define LIST      83
#define CRGLA      84
#define CRRELATION      85
#define FLUSHTOKEN      86
#define QUITTOKEN      87
#define FILE__      88
#define TEXTLOADER__      89
#define ATTC      90
#define LOAD      91
#define READ      92
#define USING      93
#define FROM      94
#define BY      95
#define STORE      96
#define AS      97
#define TO      98
#define INTO      99
#define Tokens      100
#define T__103      103
#define SYNTHESIZE      101
#define BYPASS      102
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for DPtree
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
