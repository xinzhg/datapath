//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : BaseParser.g
 *     -                            On : 2012-06-14 15:15:12
 *     -                for the parser : DataPath_BaseParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser DataPath_BaseParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pDataPath_BaseParser, which is returned from a call to DataPath_BaseParserNew().
 *
 * The methods in pDataPath_BaseParser are  as follows:
 *
 *  - DataPath_BaseParser_ctAttList_return      pDataPath_BaseParser->ctAttList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_ctAtt_return      pDataPath_BaseParser->ctAtt(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attListWTypes_return      pDataPath_BaseParser->attListWTypes(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attWType_return      pDataPath_BaseParser->attWType(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attCList_return      pDataPath_BaseParser->attCList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attC_return      pDataPath_BaseParser->attC(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attCElem_return      pDataPath_BaseParser->attCElem(pDataPath_BaseParser)
 *  - DataPath_BaseParser_idList_return      pDataPath_BaseParser->idList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attributeList_return      pDataPath_BaseParser->attributeList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attributeEList_return      pDataPath_BaseParser->attributeEList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_attribute_return      pDataPath_BaseParser->attribute(pDataPath_BaseParser)
 *  - DataPath_BaseParser_synthAttribute_return      pDataPath_BaseParser->synthAttribute(pDataPath_BaseParser)
 *  - DataPath_BaseParser_conditional_expression_return      pDataPath_BaseParser->conditional_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_logical_or_expression_return      pDataPath_BaseParser->logical_or_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_logical_and_expression_return      pDataPath_BaseParser->logical_and_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_inclusive_or_expression_return      pDataPath_BaseParser->inclusive_or_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_exclusive_or_expression_return      pDataPath_BaseParser->exclusive_or_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_and_expression_return      pDataPath_BaseParser->and_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_basic_bool_expression_return      pDataPath_BaseParser->basic_bool_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_match_expression_return      pDataPath_BaseParser->match_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_case_expression_return      pDataPath_BaseParser->case_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_equality_expression_return      pDataPath_BaseParser->equality_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_relational_expression_return      pDataPath_BaseParser->relational_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_shift_expression_return      pDataPath_BaseParser->shift_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_additive_expression_return      pDataPath_BaseParser->additive_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_multiplicative_expression_return      pDataPath_BaseParser->multiplicative_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_unary_expression_return      pDataPath_BaseParser->unary_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_primary_expression_return      pDataPath_BaseParser->primary_expression(pDataPath_BaseParser)
 *  - DataPath_BaseParser_function_return      pDataPath_BaseParser->function(pDataPath_BaseParser)
 *  - DataPath_BaseParser_expressionList_return      pDataPath_BaseParser->expressionList(pDataPath_BaseParser)
 *  - DataPath_BaseParser_constant_return      pDataPath_BaseParser->constant(pDataPath_BaseParser)
 *  - DataPath_BaseParser_expression_return      pDataPath_BaseParser->expression(pDataPath_BaseParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_DataPath_BaseParser_H
#define _DataPath_BaseParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct DataPath_BaseParser_Ctx_struct DataPath_BaseParser, * pDataPath_BaseParser;



#ifndef BASE_GRAMMAR_INCLUDE
#define BASE_GRAMMAR_INCLUDE
extern "C++" {
 #include "SymbolicWaypointConfig.h"
 #include "LemonTranslator.h"
 #include "AttributeManager.h"
 #include "QueryManager.h"
 #include <iostream>

 #define P_ERR_IF(cond,msg...) {\
   if (cond) {\
         fprintf(stderr, "WARNING : ");\
     fprintf(stderr, msg);\
         fprintf(stderr, "\n");\
     haveErrors=true;\
   }\
    }

#define DP_CheckQuery(IsNew,query) {\
    QueryManager& qm = QueryManager::GetQueryManager();\
    if (!IsNew) {\
        string qName;\
        P_ERR_IF(qm.GetQueryName(qm.GetQueryID(query),qName), "Query Not registered");\
    } else {\
      QueryID bogus;\
      qm.AddNewQuery(query, bogus);\
    }\
}

extern string qry;
extern int tempCounter; // id for temporary variables}
extern bool haveErrors;
string StripQuotes(string str);
string NormalizeQuotes(string str);
string GenerateTemp(const char* pattern);

}
#endif //BASE_GRAMMAR_INCLUDE


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct DataPath_BaseParser_ctAttList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_ctAttList_return;

typedef struct DataPath_BaseParser_ctAtt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_ctAtt_return;

typedef struct DataPath_BaseParser_attListWTypes_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attListWTypes_return;

typedef struct DataPath_BaseParser_attWType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attWType_return;

typedef struct DataPath_BaseParser_attCList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attCList_return;

typedef struct DataPath_BaseParser_attC_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attC_return;

typedef struct DataPath_BaseParser_attCElem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attCElem_return;

typedef struct DataPath_BaseParser_idList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_idList_return;

typedef struct DataPath_BaseParser_attributeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attributeList_return;

typedef struct DataPath_BaseParser_attributeEList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attributeEList_return;

typedef struct DataPath_BaseParser_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_attribute_return;

typedef struct DataPath_BaseParser_synthAttribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_synthAttribute_return;

typedef struct DataPath_BaseParser_conditional_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_conditional_expression_return;

typedef struct DataPath_BaseParser_logical_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_logical_or_expression_return;

typedef struct DataPath_BaseParser_logical_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_logical_and_expression_return;

typedef struct DataPath_BaseParser_inclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_inclusive_or_expression_return;

typedef struct DataPath_BaseParser_exclusive_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_exclusive_or_expression_return;

typedef struct DataPath_BaseParser_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_and_expression_return;

typedef struct DataPath_BaseParser_basic_bool_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_basic_bool_expression_return;

typedef struct DataPath_BaseParser_match_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_match_expression_return;

typedef struct DataPath_BaseParser_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_case_expression_return;

typedef struct DataPath_BaseParser_equality_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_equality_expression_return;

typedef struct DataPath_BaseParser_relational_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_relational_expression_return;

typedef struct DataPath_BaseParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_shift_expression_return;

typedef struct DataPath_BaseParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_additive_expression_return;

typedef struct DataPath_BaseParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_multiplicative_expression_return;

typedef struct DataPath_BaseParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_unary_expression_return;

typedef struct DataPath_BaseParser_primary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_primary_expression_return;

typedef struct DataPath_BaseParser_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_function_return;

typedef struct DataPath_BaseParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_expressionList_return;

typedef struct DataPath_BaseParser_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_constant_return;

typedef struct DataPath_BaseParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPath_BaseParser_expression_return;



// Include delegator definition header files
//
#include	<DataPathParser.h>
         
/** Context tracking structure for DataPath_BaseParser
 */
struct DataPath_BaseParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
	pDataPathParser	gDataPath;

     DataPath_BaseParser_ctAttList_return (*ctAttList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_ctAtt_return (*ctAtt)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attListWTypes_return (*attListWTypes)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attWType_return (*attWType)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attCList_return (*attCList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attC_return (*attC)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attCElem_return (*attCElem)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_idList_return (*idList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attributeList_return (*attributeList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attributeEList_return (*attributeEList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_attribute_return (*attribute)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_synthAttribute_return (*synthAttribute)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_conditional_expression_return (*conditional_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_logical_or_expression_return (*logical_or_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_logical_and_expression_return (*logical_and_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_inclusive_or_expression_return (*inclusive_or_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_exclusive_or_expression_return (*exclusive_or_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_and_expression_return (*and_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_basic_bool_expression_return (*basic_bool_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_match_expression_return (*match_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_case_expression_return (*case_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_equality_expression_return (*equality_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_relational_expression_return (*relational_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_shift_expression_return (*shift_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_additive_expression_return (*additive_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_multiplicative_expression_return (*multiplicative_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_unary_expression_return (*unary_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_primary_expression_return (*primary_expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_function_return (*function)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_expressionList_return (*expressionList)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_constant_return (*constant)	(struct DataPath_BaseParser_Ctx_struct * ctx);
     DataPath_BaseParser_expression_return (*expression)	(struct DataPath_BaseParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct DataPath_BaseParser_Ctx_struct * ctx);
    void	    (*free)   (struct DataPath_BaseParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pDataPath_BaseParser DataPath_BaseParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream, pDataPathParser gDataPath);
ANTLR3_API pDataPath_BaseParser DataPath_BaseParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state, pDataPathParser gDataPath);
extern pANTLR3_UINT8   DataPathParserTokenNames[];

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__110      110
#define T__111      111
#define T__112      112
#define FILTER      4
#define JOIN      5
#define GLA      6
#define PRINT      7
#define AGGREGATE      8
#define EQUAL      9
#define SEPARATOR      10
#define ATTRIBUTES      11
#define TEXTLOADER      12
#define FILE      13
#define MATCH_DP      14
#define CASE_DP      15
#define BOOL_T      16
#define ID      17
#define INT      18
#define EXPONENT      19
#define FLOAT      20
#define COMMENT      21
#define WS      22
#define ESC_SEQ      23
#define STRING      24
#define SEMICOLON      25
#define COMMA      26
#define COLON      27
#define DOT      28
#define LPAREN      29
#define RPAREN      30
#define LSQ      31
#define RSQ      32
#define QMARK      33
#define LAND      34
#define LOR      35
#define BAND      36
#define BOR      37
#define XOR      38
#define LNOT      39
#define ISEQUAL      40
#define NEQUAL      41
#define LS      42
#define GT      43
#define LE      44
#define GE      45
#define NOT      46
#define SLEFT      47
#define SRIGHT      48
#define PLUS      49
#define MINUS      50
#define TIMES      51
#define DIVIDE      52
#define MOD      53
#define HEX_DIGIT      54
#define UNICODE_ESC      55
#define OCTAL_ESC      56
#define OP      57
#define NEWSTATEMENT      58
#define OLDSTATEMENT      59
#define ATTS      60
#define ATT      61
#define FUNCTION      62
#define OPDEF      63
#define OPERATOR      64
#define UOPERATOR      65
#define DELWAYPOINT      66
#define DELQUERY      67
#define CRDATATYPE      68
#define CRSYNONIM      69
#define FCT      70
#define TPATT      71
#define ATTFROM      72
#define ATTWT      73
#define ATTSWT      74
#define RUN__      75
#define QUERRY__      76
#define WAYPOINT__      77
#define SELECT__      78
#define TERMCONN      79
#define SCANNER__      80
#define WRITER__      81
#define GLATEMPLATE      82
#define LIST      83
#define CRGLA      84
#define CRRELATION      85
#define FLUSHTOKEN      86
#define QUITTOKEN      87
#define FILE__      88
#define TEXTLOADER__      89
#define ATTC      90
#define QUERRY      91
#define BYPASS      92
#define SYNTHESIZE      93
#define NEW      94
#define DELETE      95
#define CREATE      96
#define DROP      97
#define RUN      98
#define DATATYPE      99
#define FROM      100
#define RELATION      101
#define FLUSH      102
#define QUIT      103
#define OPKEYWORD      104
#define WAYPOINT      105
#define SCANNER      106
#define SELECT      107
#define CONNECTIONS      108
#define WRITER      109
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for DataPath_BaseParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
