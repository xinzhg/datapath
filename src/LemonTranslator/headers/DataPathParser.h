//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : DataPath.g
 *     -                            On : 2012-06-14 15:15:11
 *     -                for the parser : DataPathParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser DataPathParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pDataPathParser, which is returned from a call to DataPathParserNew().
 *
 * The methods in pDataPathParser are  as follows:
 *
 *  - DataPathParser_parse_return      pDataPathParser->parse(pDataPathParser)
 *  - DataPathParser_complexStatement_return      pDataPathParser->complexStatement(pDataPathParser)
 *  - DataPathParser_statement_return      pDataPathParser->statement(pDataPathParser)
 *  - DataPathParser_delStmt_return      pDataPathParser->delStmt(pDataPathParser)
 *  - DataPathParser_crStmt_return      pDataPathParser->crStmt(pDataPathParser)
 *  - DataPathParser_fctName_return      pDataPathParser->fctName(pDataPathParser)
 *  - DataPathParser_lstArgsFc_return      pDataPathParser->lstArgsFc(pDataPathParser)
 *  - DataPathParser_lstRetFc_return      pDataPathParser->lstRetFc(pDataPathParser)
 *  - DataPathParser_tpAttList_return      pDataPathParser->tpAttList(pDataPathParser)
 *  - DataPathParser_tpAtt_return      pDataPathParser->tpAtt(pDataPathParser)
 *  - DataPathParser_dType_return      pDataPathParser->dType(pDataPathParser)
 *  - DataPathParser_lstSyn_return      pDataPathParser->lstSyn(pDataPathParser)
 *  - DataPathParser_drStmt_return      pDataPathParser->drStmt(pDataPathParser)
 *  - DataPathParser_writer_return      pDataPathParser->writer(pDataPathParser)
 *  - DataPathParser_scanner_return      pDataPathParser->scanner(pDataPathParser)
 *  - DataPathParser_scannerBody_return      pDataPathParser->scannerBody(pDataPathParser)
 *  - DataPathParser_waypoint_return      pDataPathParser->waypoint(pDataPathParser)
 *  - DataPathParser_query_return      pDataPathParser->query(pDataPathParser)
 *  - DataPathParser_wpBody_return      pDataPathParser->wpBody(pDataPathParser)
 *  - DataPathParser_queryBody_return      pDataPathParser->queryBody(pDataPathParser)
 *  - DataPathParser_wpbodyStatement_return      pDataPathParser->wpbodyStatement(pDataPathParser)
 *  - DataPathParser_qBodyStatement_return      pDataPathParser->qBodyStatement(pDataPathParser)
 *  - DataPathParser_bodyStatement_return      pDataPathParser->bodyStatement(pDataPathParser)
 *  - DataPathParser_selectBody_return      pDataPathParser->selectBody(pDataPathParser)
 *  - DataPathParser_selectRules_return      pDataPathParser->selectRules(pDataPathParser)
 *  - DataPathParser_aggregateBody_return      pDataPathParser->aggregateBody(pDataPathParser)
 *  - DataPathParser_aggregateRules_return      pDataPathParser->aggregateRules(pDataPathParser)
 *  - DataPathParser_printBody_return      pDataPathParser->printBody(pDataPathParser)
 *  - DataPathParser_printRules_return      pDataPathParser->printRules(pDataPathParser)
 *  - DataPathParser_joinBody_return      pDataPathParser->joinBody(pDataPathParser)
 *  - DataPathParser_joinRules_return      pDataPathParser->joinRules(pDataPathParser)
 *  - DataPathParser_glaBody_return      pDataPathParser->glaBody(pDataPathParser)
 *  - DataPathParser_glaRules_return      pDataPathParser->glaRules(pDataPathParser)
 *  - DataPathParser_bypass_return      pDataPathParser->bypass(pDataPathParser)
 *  - DataPathParser_queryList_return      pDataPathParser->queryList(pDataPathParser)
 *  - DataPathParser_wpDefinition_return      pDataPathParser->wpDefinition(pDataPathParser)
 *  - DataPathParser_selectWP_return      pDataPathParser->selectWP(pDataPathParser)
 *  - DataPathParser_joinWP_return      pDataPathParser->joinWP(pDataPathParser)
 *  - DataPathParser_aggregateWP_return      pDataPathParser->aggregateWP(pDataPathParser)
 *  - DataPathParser_printWP_return      pDataPathParser->printWP(pDataPathParser)
 *  - DataPathParser_glaWP_return      pDataPathParser->glaWP(pDataPathParser)
 *  - DataPathParser_connList_return      pDataPathParser->connList(pDataPathParser)
 *  - DataPathParser_textloaderWP_return      pDataPathParser->textloaderWP(pDataPathParser)
 *  - DataPathParser_textloaderBody_return      pDataPathParser->textloaderBody(pDataPathParser)
 *  - DataPathParser_wayPointCN_return      pDataPathParser->wayPointCN(pDataPathParser)
 *  - DataPathParser_termConnOpt_return      pDataPathParser->termConnOpt(pDataPathParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_DataPathParser_H
#define _DataPathParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct DataPathParser_Ctx_struct DataPathParser, * pDataPathParser;

// Include delegate definition header files
//
#include	<DataPath_BaseParser.h>
         


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct DataPathParser_parse_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_parse_return;

typedef struct DataPathParser_complexStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_complexStatement_return;

typedef struct DataPathParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_statement_return;

typedef struct DataPathParser_delStmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_delStmt_return;

typedef struct DataPathParser_crStmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_crStmt_return;

typedef struct DataPathParser_fctName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_fctName_return;

typedef struct DataPathParser_lstArgsFc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_lstArgsFc_return;

typedef struct DataPathParser_lstRetFc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_lstRetFc_return;

typedef struct DataPathParser_tpAttList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_tpAttList_return;

typedef struct DataPathParser_tpAtt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_tpAtt_return;

typedef struct DataPathParser_dType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_dType_return;

typedef struct DataPathParser_lstSyn_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_lstSyn_return;

typedef struct DataPathParser_drStmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_drStmt_return;

typedef struct DataPathParser_writer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_writer_return;

typedef struct DataPathParser_scanner_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_scanner_return;

typedef struct DataPathParser_scannerBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_scannerBody_return;

typedef struct DataPathParser_waypoint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_waypoint_return;

typedef struct DataPathParser_query_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_query_return;

typedef struct DataPathParser_wpBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_wpBody_return;

typedef struct DataPathParser_queryBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_queryBody_return;

typedef struct DataPathParser_wpbodyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_wpbodyStatement_return;

typedef struct DataPathParser_qBodyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_qBodyStatement_return;

typedef struct DataPathParser_bodyStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_bodyStatement_return;

typedef struct DataPathParser_selectBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_selectBody_return;

typedef struct DataPathParser_selectRules_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_selectRules_return;

typedef struct DataPathParser_aggregateBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_aggregateBody_return;

typedef struct DataPathParser_aggregateRules_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_aggregateRules_return;

typedef struct DataPathParser_printBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_printBody_return;

typedef struct DataPathParser_printRules_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_printRules_return;

typedef struct DataPathParser_joinBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_joinBody_return;

typedef struct DataPathParser_joinRules_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_joinRules_return;

typedef struct DataPathParser_glaBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_glaBody_return;

typedef struct DataPathParser_glaRules_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_glaRules_return;

typedef struct DataPathParser_bypass_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_bypass_return;

typedef struct DataPathParser_queryList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_queryList_return;

typedef struct DataPathParser_wpDefinition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_wpDefinition_return;

typedef struct DataPathParser_selectWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_selectWP_return;

typedef struct DataPathParser_joinWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_joinWP_return;

typedef struct DataPathParser_aggregateWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_aggregateWP_return;

typedef struct DataPathParser_printWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_printWP_return;

typedef struct DataPathParser_glaWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_glaWP_return;

typedef struct DataPathParser_connList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_connList_return;

typedef struct DataPathParser_textloaderWP_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_textloaderWP_return;

typedef struct DataPathParser_textloaderBody_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_textloaderBody_return;

typedef struct DataPathParser_wayPointCN_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_wayPointCN_return;

typedef struct DataPathParser_termConnOpt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    DataPathParser_termConnOpt_return;



/** Context tracking structure for DataPathParser
 */
struct DataPathParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;
	pDataPath_BaseParser	gBaseParser;

     DataPathParser_parse_return (*parse)	(struct DataPathParser_Ctx_struct * ctx, LemonTranslator* trans);
     DataPathParser_complexStatement_return (*complexStatement)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_statement_return (*statement)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_delStmt_return (*delStmt)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_crStmt_return (*crStmt)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_fctName_return (*fctName)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_lstArgsFc_return (*lstArgsFc)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_lstRetFc_return (*lstRetFc)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_tpAttList_return (*tpAttList)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_tpAtt_return (*tpAtt)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_dType_return (*dType)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_lstSyn_return (*lstSyn)	(struct DataPathParser_Ctx_struct * ctx, char* tp);
     DataPathParser_drStmt_return (*drStmt)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_writer_return (*writer)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_scanner_return (*scanner)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_scannerBody_return (*scannerBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_waypoint_return (*waypoint)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_query_return (*query)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_wpBody_return (*wpBody)	(struct DataPathParser_Ctx_struct * ctx, WaypointType which);
     DataPathParser_queryBody_return (*queryBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_wpbodyStatement_return (*wpbodyStatement)	(struct DataPathParser_Ctx_struct * ctx, WaypointType  which);
     DataPathParser_qBodyStatement_return (*qBodyStatement)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_bodyStatement_return (*bodyStatement)	(struct DataPathParser_Ctx_struct * ctx, WaypointType which);
     DataPathParser_selectBody_return (*selectBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_selectRules_return (*selectRules)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_aggregateBody_return (*aggregateBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_aggregateRules_return (*aggregateRules)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_printBody_return (*printBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_printRules_return (*printRules)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_joinBody_return (*joinBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_joinRules_return (*joinRules)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_glaBody_return (*glaBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_glaRules_return (*glaRules)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_bypass_return (*bypass)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_queryList_return (*queryList)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_wpDefinition_return (*wpDefinition)	(struct DataPathParser_Ctx_struct * ctx, bool isNew);
     DataPathParser_selectWP_return (*selectWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_joinWP_return (*joinWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_aggregateWP_return (*aggregateWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_printWP_return (*printWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_glaWP_return (*glaWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_connList_return (*connList)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_textloaderWP_return (*textloaderWP)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_textloaderBody_return (*textloaderBody)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_wayPointCN_return (*wayPointCN)	(struct DataPathParser_Ctx_struct * ctx);
     DataPathParser_termConnOpt_return (*termConnOpt)	(struct DataPathParser_Ctx_struct * ctx);
    // Delegated rules
     DataPath_BaseParser_case_expression_return (*case_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attribute_return (*attribute)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_constant_return (*constant)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_and_expression_return (*and_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attCList_return (*attCList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attributeEList_return (*attributeEList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_multiplicative_expression_return (*multiplicative_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_ctAttList_return (*ctAttList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_logical_or_expression_return (*logical_or_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attC_return (*attC)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_exclusive_or_expression_return (*exclusive_or_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_additive_expression_return (*additive_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attributeList_return (*attributeList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attCElem_return (*attCElem)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_shift_expression_return (*shift_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_relational_expression_return (*relational_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_synthAttribute_return (*synthAttribute)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_ctAtt_return (*ctAtt)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_expression_return (*expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_match_expression_return (*match_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_primary_expression_return (*primary_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_function_return (*function)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_idList_return (*idList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_equality_expression_return (*equality_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_inclusive_or_expression_return (*inclusive_or_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_unary_expression_return (*unary_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_expressionList_return (*expressionList)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_logical_and_expression_return (*logical_and_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attWType_return (*attWType)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_attListWTypes_return (*attListWTypes)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_conditional_expression_return (*conditional_expression)(struct DataPathParser_Ctx_struct * ctx);
     DataPath_BaseParser_basic_bool_expression_return (*basic_bool_expression)(struct DataPathParser_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct DataPathParser_Ctx_struct * ctx);
    void	    (*free)   (struct DataPathParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pDataPathParser DataPathParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pDataPathParser DataPathParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__110      110
#define T__111      111
#define T__112      112
#define FILTER      4
#define JOIN      5
#define GLA      6
#define PRINT      7
#define AGGREGATE      8
#define EQUAL      9
#define SEPARATOR      10
#define ATTRIBUTES      11
#define TEXTLOADER      12
#define FILE      13
#define MATCH_DP      14
#define CASE_DP      15
#define BOOL_T      16
#define ID      17
#define INT      18
#define EXPONENT      19
#define FLOAT      20
#define COMMENT      21
#define WS      22
#define ESC_SEQ      23
#define STRING      24
#define SEMICOLON      25
#define COMMA      26
#define COLON      27
#define DOT      28
#define LPAREN      29
#define RPAREN      30
#define LSQ      31
#define RSQ      32
#define QMARK      33
#define LAND      34
#define LOR      35
#define BAND      36
#define BOR      37
#define XOR      38
#define LNOT      39
#define ISEQUAL      40
#define NEQUAL      41
#define LS      42
#define GT      43
#define LE      44
#define GE      45
#define NOT      46
#define SLEFT      47
#define SRIGHT      48
#define PLUS      49
#define MINUS      50
#define TIMES      51
#define DIVIDE      52
#define MOD      53
#define HEX_DIGIT      54
#define UNICODE_ESC      55
#define OCTAL_ESC      56
#define OP      57
#define NEWSTATEMENT      58
#define OLDSTATEMENT      59
#define ATTS      60
#define ATT      61
#define FUNCTION      62
#define OPDEF      63
#define OPERATOR      64
#define UOPERATOR      65
#define DELWAYPOINT      66
#define DELQUERY      67
#define CRDATATYPE      68
#define CRSYNONIM      69
#define FCT      70
#define TPATT      71
#define ATTFROM      72
#define ATTWT      73
#define ATTSWT      74
#define RUN__      75
#define QUERRY__      76
#define WAYPOINT__      77
#define SELECT__      78
#define TERMCONN      79
#define SCANNER__      80
#define WRITER__      81
#define GLATEMPLATE      82
#define LIST      83
#define CRGLA      84
#define CRRELATION      85
#define FLUSHTOKEN      86
#define QUITTOKEN      87
#define FILE__      88
#define TEXTLOADER__      89
#define ATTC      90
#define QUERRY      91
#define BYPASS      92
#define SYNTHESIZE      93
#define NEW      94
#define DELETE      95
#define CREATE      96
#define DROP      97
#define RUN      98
#define DATATYPE      99
#define FROM      100
#define RELATION      101
#define FLUSH      102
#define QUIT      103
#define OPKEYWORD      104
#define WAYPOINT      105
#define SCANNER      106
#define SELECT      107
#define CONNECTIONS      108
#define WRITER      109
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for DataPathParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
