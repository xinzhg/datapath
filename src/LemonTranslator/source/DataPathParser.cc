//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : DataPath.g
 *     -                            On : 2012-06-14 15:15:11
 *     -                for the parser : DataPathParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DataPathParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDataPathParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDataPathParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDataPathParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDataPathParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER				ctx->pParser  
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */



/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
pANTLR3_UINT8   DataPathParserTokenNames[109+4]
     = {
        (pANTLR3_UINT8) "<invalid>",       /* String to print to indicate an invalid token */
        (pANTLR3_UINT8) "<EOR>",
        (pANTLR3_UINT8) "<DOWN>", 
        (pANTLR3_UINT8) "<UP>", 
        (pANTLR3_UINT8) "FILTER",
        (pANTLR3_UINT8) "JOIN",
        (pANTLR3_UINT8) "GLA",
        (pANTLR3_UINT8) "PRINT",
        (pANTLR3_UINT8) "AGGREGATE",
        (pANTLR3_UINT8) "EQUAL",
        (pANTLR3_UINT8) "SEPARATOR",
        (pANTLR3_UINT8) "ATTRIBUTES",
        (pANTLR3_UINT8) "TEXTLOADER",
        (pANTLR3_UINT8) "FILE",
        (pANTLR3_UINT8) "MATCH_DP",
        (pANTLR3_UINT8) "CASE_DP",
        (pANTLR3_UINT8) "BOOL_T",
        (pANTLR3_UINT8) "ID",
        (pANTLR3_UINT8) "INT",
        (pANTLR3_UINT8) "EXPONENT",
        (pANTLR3_UINT8) "FLOAT",
        (pANTLR3_UINT8) "COMMENT",
        (pANTLR3_UINT8) "WS",
        (pANTLR3_UINT8) "ESC_SEQ",
        (pANTLR3_UINT8) "STRING",
        (pANTLR3_UINT8) "SEMICOLON",
        (pANTLR3_UINT8) "COMMA",
        (pANTLR3_UINT8) "COLON",
        (pANTLR3_UINT8) "DOT",
        (pANTLR3_UINT8) "LPAREN",
        (pANTLR3_UINT8) "RPAREN",
        (pANTLR3_UINT8) "LSQ",
        (pANTLR3_UINT8) "RSQ",
        (pANTLR3_UINT8) "QMARK",
        (pANTLR3_UINT8) "LAND",
        (pANTLR3_UINT8) "LOR",
        (pANTLR3_UINT8) "BAND",
        (pANTLR3_UINT8) "BOR",
        (pANTLR3_UINT8) "XOR",
        (pANTLR3_UINT8) "LNOT",
        (pANTLR3_UINT8) "ISEQUAL",
        (pANTLR3_UINT8) "NEQUAL",
        (pANTLR3_UINT8) "LS",
        (pANTLR3_UINT8) "GT",
        (pANTLR3_UINT8) "LE",
        (pANTLR3_UINT8) "GE",
        (pANTLR3_UINT8) "NOT",
        (pANTLR3_UINT8) "SLEFT",
        (pANTLR3_UINT8) "SRIGHT",
        (pANTLR3_UINT8) "PLUS",
        (pANTLR3_UINT8) "MINUS",
        (pANTLR3_UINT8) "TIMES",
        (pANTLR3_UINT8) "DIVIDE",
        (pANTLR3_UINT8) "MOD",
        (pANTLR3_UINT8) "HEX_DIGIT",
        (pANTLR3_UINT8) "UNICODE_ESC",
        (pANTLR3_UINT8) "OCTAL_ESC",
        (pANTLR3_UINT8) "OP",
        (pANTLR3_UINT8) "NEWSTATEMENT",
        (pANTLR3_UINT8) "OLDSTATEMENT",
        (pANTLR3_UINT8) "ATTS",
        (pANTLR3_UINT8) "ATT",
        (pANTLR3_UINT8) "FUNCTION",
        (pANTLR3_UINT8) "OPDEF",
        (pANTLR3_UINT8) "OPERATOR",
        (pANTLR3_UINT8) "UOPERATOR",
        (pANTLR3_UINT8) "DELWAYPOINT",
        (pANTLR3_UINT8) "DELQUERY",
        (pANTLR3_UINT8) "CRDATATYPE",
        (pANTLR3_UINT8) "CRSYNONIM",
        (pANTLR3_UINT8) "FCT",
        (pANTLR3_UINT8) "TPATT",
        (pANTLR3_UINT8) "ATTFROM",
        (pANTLR3_UINT8) "ATTWT",
        (pANTLR3_UINT8) "ATTSWT",
        (pANTLR3_UINT8) "RUN__",
        (pANTLR3_UINT8) "QUERRY__",
        (pANTLR3_UINT8) "WAYPOINT__",
        (pANTLR3_UINT8) "SELECT__",
        (pANTLR3_UINT8) "TERMCONN",
        (pANTLR3_UINT8) "SCANNER__",
        (pANTLR3_UINT8) "WRITER__",
        (pANTLR3_UINT8) "GLATEMPLATE",
        (pANTLR3_UINT8) "LIST",
        (pANTLR3_UINT8) "CRGLA",
        (pANTLR3_UINT8) "CRRELATION",
        (pANTLR3_UINT8) "FLUSHTOKEN",
        (pANTLR3_UINT8) "QUITTOKEN",
        (pANTLR3_UINT8) "FILE__",
        (pANTLR3_UINT8) "TEXTLOADER__",
        (pANTLR3_UINT8) "ATTC",
        (pANTLR3_UINT8) "QUERRY",
        (pANTLR3_UINT8) "BYPASS",
        (pANTLR3_UINT8) "SYNTHESIZE",
        (pANTLR3_UINT8) "NEW",
        (pANTLR3_UINT8) "DELETE",
        (pANTLR3_UINT8) "CREATE",
        (pANTLR3_UINT8) "DROP",
        (pANTLR3_UINT8) "RUN",
        (pANTLR3_UINT8) "DATATYPE",
        (pANTLR3_UINT8) "FROM",
        (pANTLR3_UINT8) "RELATION",
        (pANTLR3_UINT8) "FLUSH",
        (pANTLR3_UINT8) "QUIT",
        (pANTLR3_UINT8) "OPKEYWORD",
        (pANTLR3_UINT8) "WAYPOINT",
        (pANTLR3_UINT8) "SCANNER",
        (pANTLR3_UINT8) "SELECT",
        (pANTLR3_UINT8) "CONNECTIONS",
        (pANTLR3_UINT8) "WRITER",
        (pANTLR3_UINT8) "'->'",
        (pANTLR3_UINT8) "'{'",
        (pANTLR3_UINT8) "'}'"
       };

        

// Forward declare the locally static matching functions we have generated.
//
static DataPathParser_parse_return	parse    (pDataPathParser ctx, LemonTranslator* trans);
static DataPathParser_complexStatement_return	complexStatement    (pDataPathParser ctx);
static DataPathParser_statement_return	statement    (pDataPathParser ctx, bool isNew);
static DataPathParser_delStmt_return	delStmt    (pDataPathParser ctx);
static DataPathParser_crStmt_return	crStmt    (pDataPathParser ctx);
static DataPathParser_fctName_return	fctName    (pDataPathParser ctx);
static DataPathParser_lstArgsFc_return	lstArgsFc    (pDataPathParser ctx);
static DataPathParser_lstRetFc_return	lstRetFc    (pDataPathParser ctx);
static DataPathParser_tpAttList_return	tpAttList    (pDataPathParser ctx);
static DataPathParser_tpAtt_return	tpAtt    (pDataPathParser ctx);
static DataPathParser_dType_return	dType    (pDataPathParser ctx);
static DataPathParser_lstSyn_return	lstSyn    (pDataPathParser ctx, char* tp);
static DataPathParser_drStmt_return	drStmt    (pDataPathParser ctx);
static DataPathParser_writer_return	writer    (pDataPathParser ctx, bool isNew);
static DataPathParser_scanner_return	scanner    (pDataPathParser ctx, bool isNew);
static DataPathParser_scannerBody_return	scannerBody    (pDataPathParser ctx);
static DataPathParser_waypoint_return	waypoint    (pDataPathParser ctx, bool isNew);
static DataPathParser_query_return	query    (pDataPathParser ctx, bool isNew);
static DataPathParser_wpBody_return	wpBody    (pDataPathParser ctx, WaypointType which);
static DataPathParser_queryBody_return	queryBody    (pDataPathParser ctx);
static DataPathParser_wpbodyStatement_return	wpbodyStatement    (pDataPathParser ctx, WaypointType  which);
static DataPathParser_qBodyStatement_return	qBodyStatement    (pDataPathParser ctx);
static DataPathParser_bodyStatement_return	bodyStatement    (pDataPathParser ctx, WaypointType which);
static DataPathParser_selectBody_return	selectBody    (pDataPathParser ctx);
static DataPathParser_selectRules_return	selectRules    (pDataPathParser ctx);
static DataPathParser_aggregateBody_return	aggregateBody    (pDataPathParser ctx);
static DataPathParser_aggregateRules_return	aggregateRules    (pDataPathParser ctx);
static DataPathParser_printBody_return	printBody    (pDataPathParser ctx);
static DataPathParser_printRules_return	printRules    (pDataPathParser ctx);
static DataPathParser_joinBody_return	joinBody    (pDataPathParser ctx);
static DataPathParser_joinRules_return	joinRules    (pDataPathParser ctx);
static DataPathParser_glaBody_return	glaBody    (pDataPathParser ctx);
static DataPathParser_glaRules_return	glaRules    (pDataPathParser ctx);
static DataPathParser_bypass_return	bypass    (pDataPathParser ctx);
static DataPathParser_queryList_return	queryList    (pDataPathParser ctx);
static DataPathParser_wpDefinition_return	wpDefinition    (pDataPathParser ctx, bool isNew);
static DataPathParser_selectWP_return	selectWP    (pDataPathParser ctx);
static DataPathParser_joinWP_return	joinWP    (pDataPathParser ctx);
static DataPathParser_aggregateWP_return	aggregateWP    (pDataPathParser ctx);
static DataPathParser_printWP_return	printWP    (pDataPathParser ctx);
static DataPathParser_glaWP_return	glaWP    (pDataPathParser ctx);
static DataPathParser_connList_return	connList    (pDataPathParser ctx);
static DataPathParser_textloaderWP_return	textloaderWP    (pDataPathParser ctx);
static DataPathParser_textloaderBody_return	textloaderBody    (pDataPathParser ctx);
static DataPathParser_wayPointCN_return	wayPointCN    (pDataPathParser ctx);
static DataPathParser_termConnOpt_return	termConnOpt    (pDataPathParser ctx);
static void	DataPathParserFree(pDataPathParser ctx);
static void     DataPathParserReset (pDataPathParser ctx);

// Delegated rules
//
static DataPath_BaseParser_case_expression_return case_expression(pDataPathParser ctx);
static DataPath_BaseParser_attribute_return attribute(pDataPathParser ctx);
static DataPath_BaseParser_constant_return constant(pDataPathParser ctx);
static DataPath_BaseParser_and_expression_return and_expression(pDataPathParser ctx);
static DataPath_BaseParser_attCList_return attCList(pDataPathParser ctx);
static DataPath_BaseParser_attributeEList_return attributeEList(pDataPathParser ctx);
static DataPath_BaseParser_multiplicative_expression_return multiplicative_expression(pDataPathParser ctx);
static DataPath_BaseParser_ctAttList_return ctAttList(pDataPathParser ctx);
static DataPath_BaseParser_logical_or_expression_return logical_or_expression(pDataPathParser ctx);
static DataPath_BaseParser_attC_return attC(pDataPathParser ctx);
static DataPath_BaseParser_exclusive_or_expression_return exclusive_or_expression(pDataPathParser ctx);
static DataPath_BaseParser_additive_expression_return additive_expression(pDataPathParser ctx);
static DataPath_BaseParser_attributeList_return attributeList(pDataPathParser ctx);
static DataPath_BaseParser_attCElem_return attCElem(pDataPathParser ctx);
static DataPath_BaseParser_shift_expression_return shift_expression(pDataPathParser ctx);
static DataPath_BaseParser_relational_expression_return relational_expression(pDataPathParser ctx);
static DataPath_BaseParser_synthAttribute_return synthAttribute(pDataPathParser ctx);
static DataPath_BaseParser_ctAtt_return ctAtt(pDataPathParser ctx);
static DataPath_BaseParser_expression_return expression(pDataPathParser ctx);
static DataPath_BaseParser_match_expression_return match_expression(pDataPathParser ctx);
static DataPath_BaseParser_primary_expression_return primary_expression(pDataPathParser ctx);
static DataPath_BaseParser_function_return function(pDataPathParser ctx);
static DataPath_BaseParser_idList_return idList(pDataPathParser ctx);
static DataPath_BaseParser_equality_expression_return equality_expression(pDataPathParser ctx);
static DataPath_BaseParser_inclusive_or_expression_return inclusive_or_expression(pDataPathParser ctx);
static DataPath_BaseParser_unary_expression_return unary_expression(pDataPathParser ctx);
static DataPath_BaseParser_expressionList_return expressionList(pDataPathParser ctx);
static DataPath_BaseParser_logical_and_expression_return logical_and_expression(pDataPathParser ctx);
static DataPath_BaseParser_attWType_return attWType(pDataPathParser ctx);
static DataPath_BaseParser_attListWTypes_return attListWTypes(pDataPathParser ctx);
static DataPath_BaseParser_conditional_expression_return conditional_expression(pDataPathParser ctx);
static DataPath_BaseParser_basic_bool_expression_return basic_bool_expression(pDataPathParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "DataPath.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new DataPathParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDataPathParser
DataPathParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream)
{
	// See if we can create a new parser with the standard constructor
	//
	return DataPathParserNewSSD(instream, NULL);
}

/** \brief Create a new DataPathParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pDataPathParser
DataPathParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pDataPathParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pDataPathParser) ANTLR3_CALLOC(1, sizeof(DataPathParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in DataPathParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our DataPathParser interface
     */
    ctx->parse	= parse;
    ctx->complexStatement	= complexStatement;
    ctx->statement	= statement;
    ctx->delStmt	= delStmt;
    ctx->crStmt	= crStmt;
    ctx->fctName	= fctName;
    ctx->lstArgsFc	= lstArgsFc;
    ctx->lstRetFc	= lstRetFc;
    ctx->tpAttList	= tpAttList;
    ctx->tpAtt	= tpAtt;
    ctx->dType	= dType;
    ctx->lstSyn	= lstSyn;
    ctx->drStmt	= drStmt;
    ctx->writer	= writer;
    ctx->scanner	= scanner;
    ctx->scannerBody	= scannerBody;
    ctx->waypoint	= waypoint;
    ctx->query	= query;
    ctx->wpBody	= wpBody;
    ctx->queryBody	= queryBody;
    ctx->wpbodyStatement	= wpbodyStatement;
    ctx->qBodyStatement	= qBodyStatement;
    ctx->bodyStatement	= bodyStatement;
    ctx->selectBody	= selectBody;
    ctx->selectRules	= selectRules;
    ctx->aggregateBody	= aggregateBody;
    ctx->aggregateRules	= aggregateRules;
    ctx->printBody	= printBody;
    ctx->printRules	= printRules;
    ctx->joinBody	= joinBody;
    ctx->joinRules	= joinRules;
    ctx->glaBody	= glaBody;
    ctx->glaRules	= glaRules;
    ctx->bypass	= bypass;
    ctx->queryList	= queryList;
    ctx->wpDefinition	= wpDefinition;
    ctx->selectWP	= selectWP;
    ctx->joinWP	= joinWP;
    ctx->aggregateWP	= aggregateWP;
    ctx->printWP	= printWP;
    ctx->glaWP	= glaWP;
    ctx->connList	= connList;
    ctx->textloaderWP	= textloaderWP;
    ctx->textloaderBody	= textloaderBody;
    ctx->wayPointCN	= wayPointCN;
    ctx->termConnOpt	= termConnOpt;
	// Install the delegated methods so that they appear to be a part of this 
	// parser
	//
    ctx->case_expression	= case_expression;
    ctx->attribute	= attribute;
    ctx->constant	= constant;
    ctx->and_expression	= and_expression;
    ctx->attCList	= attCList;
    ctx->attributeEList	= attributeEList;
    ctx->multiplicative_expression	= multiplicative_expression;
    ctx->ctAttList	= ctAttList;
    ctx->logical_or_expression	= logical_or_expression;
    ctx->attC	= attC;
    ctx->exclusive_or_expression	= exclusive_or_expression;
    ctx->additive_expression	= additive_expression;
    ctx->attributeList	= attributeList;
    ctx->attCElem	= attCElem;
    ctx->shift_expression	= shift_expression;
    ctx->relational_expression	= relational_expression;
    ctx->synthAttribute	= synthAttribute;
    ctx->ctAtt	= ctAtt;
    ctx->expression	= expression;
    ctx->match_expression	= match_expression;
    ctx->primary_expression	= primary_expression;
    ctx->function	= function;
    ctx->idList	= idList;
    ctx->equality_expression	= equality_expression;
    ctx->inclusive_or_expression	= inclusive_or_expression;
    ctx->unary_expression	= unary_expression;
    ctx->expressionList	= expressionList;
    ctx->logical_and_expression	= logical_and_expression;
    ctx->attWType	= attWType;
    ctx->attListWTypes	= attListWTypes;
    ctx->conditional_expression	= conditional_expression;
    ctx->basic_bool_expression	= basic_bool_expression;
    ctx->free			= DataPathParserFree;
    ctx->reset			= DataPathParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
	// Initialize the parsers that we are going to delegate some
	// functions to.
	//
	ctx->gBaseParser = DataPath_BaseParserNewSSD(instream, PSRSTATE, ctx);    

	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = DataPathParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
DataPathParserReset (pDataPathParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 DataPathParserFree(pDataPathParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free the parsers that we delegated to
	// functions to.NULL the state so we only free it once.
	//
	ctx->gBaseParser->pParser->rec->state = NULL;
	         ctx->gBaseParser->free(ctx->gBaseParser);	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return DataPathParserTokenNames; 
}



    bool haveErrors = false;

    static string wp; // this is the currect waypoint. If null, illegal to have a waypoint
     // related statement
    static WaypointType wpType = InvalidWaypoint; //type of above waypoint

    /* shared with all the other grammars */
    string qry; // current query. Empty means illegal ...

    static std::map<WayPointID, WaypointType> typeMap; // map of waypoints to types

    static bool isNew = false; // is this a new anything.

    int tempCounter=1; // id for temporary variables


    /* These functions are needed in most parser files.
       Declared everywhere, defined here */
    // Argument to this is STRING token, it must have quotes
    string StripQuotes(string str) {
      string rez;
      rez = str.substr(1, str.size() - 2);
      return rez;
    }
    string NormalizeQuotes(string str) {
      string temp;
      temp = str.substr(1, str.size() - 2);
      string rez;
      rez += "\"";
      rez += temp;
      rez += "\"";
      return rez;
    }

    string GenerateTemp(const char* pattern){
      char buffer[100];
      sprintf(buffer, pattern, tempCounter++);
      string rez = buffer;
      return rez;
    }



    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_complexStatement_in_parse466  */
static	ANTLR3_BITWORD FOLLOW_complexStatement_in_parse466_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000200002), ANTLR3_UINT64_LIT(0x000026C7C8000000) };
static  ANTLR3_BITSET_LIST FOLLOW_complexStatement_in_parse466	= { FOLLOW_complexStatement_in_parse466_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEW_in_complexStatement478  */
static	ANTLR3_BITWORD FOLLOW_NEW_in_complexStatement478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000260008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_NEW_in_complexStatement478	= { FOLLOW_NEW_in_complexStatement478_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_complexStatement480  */
static	ANTLR3_BITWORD FOLLOW_statement_in_complexStatement480_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_complexStatement480	= { FOLLOW_statement_in_complexStatement480_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_statement_in_complexStatement495  */
static	ANTLR3_BITWORD FOLLOW_statement_in_complexStatement495_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_statement_in_complexStatement495	= { FOLLOW_statement_in_complexStatement495_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DELETE_in_complexStatement510  */
static	ANTLR3_BITWORD FOLLOW_DELETE_in_complexStatement510_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000020008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DELETE_in_complexStatement510	= { FOLLOW_DELETE_in_complexStatement510_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_delStmt_in_complexStatement512  */
static	ANTLR3_BITWORD FOLLOW_delStmt_in_complexStatement512_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_delStmt_in_complexStatement512	= { FOLLOW_delStmt_in_complexStatement512_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement514  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement514_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement514	= { FOLLOW_SEMICOLON_in_complexStatement514_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CREATE_in_complexStatement524  */
static	ANTLR3_BITWORD FOLLOW_CREATE_in_complexStatement524_bits[]	= { ANTLR3_UINT64_LIT(0x4000000000000040), ANTLR3_UINT64_LIT(0x0000012800000000) };
static  ANTLR3_BITSET_LIST FOLLOW_CREATE_in_complexStatement524	= { FOLLOW_CREATE_in_complexStatement524_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_crStmt_in_complexStatement526  */
static	ANTLR3_BITWORD FOLLOW_crStmt_in_complexStatement526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_crStmt_in_complexStatement526	= { FOLLOW_crStmt_in_complexStatement526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement528  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement528_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement528	= { FOLLOW_SEMICOLON_in_complexStatement528_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DROP_in_complexStatement538  */
static	ANTLR3_BITWORD FOLLOW_DROP_in_complexStatement538_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_DROP_in_complexStatement538	= { FOLLOW_DROP_in_complexStatement538_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_drStmt_in_complexStatement540  */
static	ANTLR3_BITWORD FOLLOW_drStmt_in_complexStatement540_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_drStmt_in_complexStatement540	= { FOLLOW_drStmt_in_complexStatement540_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement543  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement543_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement543	= { FOLLOW_SEMICOLON_in_complexStatement543_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FLUSH_in_complexStatement553  */
static	ANTLR3_BITWORD FOLLOW_FLUSH_in_complexStatement553_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FLUSH_in_complexStatement553	= { FOLLOW_FLUSH_in_complexStatement553_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement555  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement555_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement555	= { FOLLOW_SEMICOLON_in_complexStatement555_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUIT_in_complexStatement565  */
static	ANTLR3_BITWORD FOLLOW_QUIT_in_complexStatement565_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUIT_in_complexStatement565	= { FOLLOW_QUIT_in_complexStatement565_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement567  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement567_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement567	= { FOLLOW_SEMICOLON_in_complexStatement567_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RUN_in_complexStatement579  */
static	ANTLR3_BITWORD FOLLOW_RUN_in_complexStatement579_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RUN_in_complexStatement579	= { FOLLOW_RUN_in_complexStatement579_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUERRY_in_complexStatement581  */
static	ANTLR3_BITWORD FOLLOW_QUERRY_in_complexStatement581_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUERRY_in_complexStatement581	= { FOLLOW_QUERRY_in_complexStatement581_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_complexStatement585  */
static	ANTLR3_BITWORD FOLLOW_ID_in_complexStatement585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_complexStatement585	= { FOLLOW_ID_in_complexStatement585_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_complexStatement588  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_complexStatement588_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_complexStatement588	= { FOLLOW_COMMA_in_complexStatement588_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_complexStatement592  */
static	ANTLR3_BITWORD FOLLOW_ID_in_complexStatement592_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_complexStatement592	= { FOLLOW_ID_in_complexStatement592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_complexStatement596  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_complexStatement596_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_complexStatement596	= { FOLLOW_SEMICOLON_in_complexStatement596_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMENT_in_complexStatement612  */
static	ANTLR3_BITWORD FOLLOW_COMMENT_in_complexStatement612_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMENT_in_complexStatement612	= { FOLLOW_COMMENT_in_complexStatement612_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scanner_in_statement632  */
static	ANTLR3_BITWORD FOLLOW_scanner_in_statement632_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_scanner_in_statement632	= { FOLLOW_scanner_in_statement632_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_waypoint_in_statement641  */
static	ANTLR3_BITWORD FOLLOW_waypoint_in_statement641_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_waypoint_in_statement641	= { FOLLOW_waypoint_in_statement641_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_query_in_statement650  */
static	ANTLR3_BITWORD FOLLOW_query_in_statement650_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_query_in_statement650	= { FOLLOW_query_in_statement650_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_writer_in_statement659  */
static	ANTLR3_BITWORD FOLLOW_writer_in_statement659_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_writer_in_statement659	= { FOLLOW_writer_in_statement659_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WAYPOINT_in_delStmt675  */
static	ANTLR3_BITWORD FOLLOW_WAYPOINT_in_delStmt675_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_WAYPOINT_in_delStmt675	= { FOLLOW_WAYPOINT_in_delStmt675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_delStmt678  */
static	ANTLR3_BITWORD FOLLOW_ID_in_delStmt678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_delStmt678	= { FOLLOW_ID_in_delStmt678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_delStmt685  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_delStmt685_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_delStmt685	= { FOLLOW_COMMA_in_delStmt685_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_delStmt687  */
static	ANTLR3_BITWORD FOLLOW_ID_in_delStmt687_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_delStmt687	= { FOLLOW_ID_in_delStmt687_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUERRY_in_delStmt706  */
static	ANTLR3_BITWORD FOLLOW_QUERRY_in_delStmt706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUERRY_in_delStmt706	= { FOLLOW_QUERRY_in_delStmt706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_delStmt709  */
static	ANTLR3_BITWORD FOLLOW_ID_in_delStmt709_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_delStmt709	= { FOLLOW_ID_in_delStmt709_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_delStmt716  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_delStmt716_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_delStmt716	= { FOLLOW_COMMA_in_delStmt716_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_delStmt718  */
static	ANTLR3_BITWORD FOLLOW_ID_in_delStmt718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_delStmt718	= { FOLLOW_ID_in_delStmt718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DATATYPE_in_crStmt744  */
static	ANTLR3_BITWORD FOLLOW_DATATYPE_in_crStmt744_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DATATYPE_in_crStmt744	= { FOLLOW_DATATYPE_in_crStmt744_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_crStmt746  */
static	ANTLR3_BITWORD FOLLOW_ID_in_crStmt746_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_crStmt746	= { FOLLOW_ID_in_crStmt746_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_crStmt749  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_crStmt749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_crStmt749	= { FOLLOW_FROM_in_crStmt749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_crStmt753  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_crStmt753_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_crStmt753	= { FOLLOW_STRING_in_crStmt753_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lstSyn_in_crStmt758  */
static	ANTLR3_BITWORD FOLLOW_lstSyn_in_crStmt758_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_lstSyn_in_crStmt758	= { FOLLOW_lstSyn_in_crStmt758_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FUNCTION_in_crStmt778  */
static	ANTLR3_BITWORD FOLLOW_FUNCTION_in_crStmt778_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_FUNCTION_in_crStmt778	= { FOLLOW_FUNCTION_in_crStmt778_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_crStmt780  */
static	ANTLR3_BITWORD FOLLOW_ID_in_crStmt780_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_crStmt780	= { FOLLOW_ID_in_crStmt780_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_crStmt782  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_crStmt782_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_crStmt782	= { FOLLOW_LPAREN_in_crStmt782_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lstArgsFc_in_crStmt784  */
static	ANTLR3_BITWORD FOLLOW_lstArgsFc_in_crStmt784_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_lstArgsFc_in_crStmt784	= { FOLLOW_lstArgsFc_in_crStmt784_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_crStmt786  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_crStmt786_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_crStmt786	= { FOLLOW_RPAREN_in_crStmt786_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_110_in_crStmt788  */
static	ANTLR3_BITWORD FOLLOW_110_in_crStmt788_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_110_in_crStmt788	= { FOLLOW_110_in_crStmt788_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_crStmt790  */
static	ANTLR3_BITWORD FOLLOW_dType_in_crStmt790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_crStmt790	= { FOLLOW_dType_in_crStmt790_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_crStmt793  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_crStmt793_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_crStmt793	= { FOLLOW_FROM_in_crStmt793_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_crStmt797  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_crStmt797_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_crStmt797	= { FOLLOW_STRING_in_crStmt797_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_OPKEYWORD_in_crStmt820  */
static	ANTLR3_BITWORD FOLLOW_OPKEYWORD_in_crStmt820_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_OPKEYWORD_in_crStmt820	= { FOLLOW_OPKEYWORD_in_crStmt820_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_crStmt822  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_crStmt822_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_crStmt822	= { FOLLOW_STRING_in_crStmt822_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_crStmt824  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_crStmt824_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_crStmt824	= { FOLLOW_LPAREN_in_crStmt824_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lstArgsFc_in_crStmt826  */
static	ANTLR3_BITWORD FOLLOW_lstArgsFc_in_crStmt826_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_lstArgsFc_in_crStmt826	= { FOLLOW_lstArgsFc_in_crStmt826_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_crStmt828  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_crStmt828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_crStmt828	= { FOLLOW_RPAREN_in_crStmt828_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_110_in_crStmt830  */
static	ANTLR3_BITWORD FOLLOW_110_in_crStmt830_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_110_in_crStmt830	= { FOLLOW_110_in_crStmt830_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_crStmt832  */
static	ANTLR3_BITWORD FOLLOW_dType_in_crStmt832_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_crStmt832	= { FOLLOW_dType_in_crStmt832_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_crStmt835  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_crStmt835_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_crStmt835	= { FOLLOW_FROM_in_crStmt835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_crStmt839  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_crStmt839_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_crStmt839	= { FOLLOW_STRING_in_crStmt839_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RELATION_in_crStmt862  */
static	ANTLR3_BITWORD FOLLOW_RELATION_in_crStmt862_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_RELATION_in_crStmt862	= { FOLLOW_RELATION_in_crStmt862_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_crStmt864  */
static	ANTLR3_BITWORD FOLLOW_ID_in_crStmt864_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_crStmt864	= { FOLLOW_ID_in_crStmt864_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_crStmt866  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_crStmt866_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_crStmt866	= { FOLLOW_LPAREN_in_crStmt866_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tpAttList_in_crStmt868  */
static	ANTLR3_BITWORD FOLLOW_tpAttList_in_crStmt868_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_tpAttList_in_crStmt868	= { FOLLOW_tpAttList_in_crStmt868_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_crStmt870  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_crStmt870_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_crStmt870	= { FOLLOW_RPAREN_in_crStmt870_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GLA_in_crStmt886  */
static	ANTLR3_BITWORD FOLLOW_GLA_in_crStmt886_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_GLA_in_crStmt886	= { FOLLOW_GLA_in_crStmt886_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_crStmt888  */
static	ANTLR3_BITWORD FOLLOW_ID_in_crStmt888_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_crStmt888	= { FOLLOW_ID_in_crStmt888_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_crStmt891  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_crStmt891_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_crStmt891	= { FOLLOW_FROM_in_crStmt891_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_crStmt895  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_crStmt895_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_crStmt895	= { FOLLOW_STRING_in_crStmt895_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_crStmt899  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_crStmt899_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_crStmt899	= { FOLLOW_LPAREN_in_crStmt899_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lstArgsFc_in_crStmt901  */
static	ANTLR3_BITWORD FOLLOW_lstArgsFc_in_crStmt901_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_lstArgsFc_in_crStmt901	= { FOLLOW_lstArgsFc_in_crStmt901_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_crStmt903  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_crStmt903_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000400000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_crStmt903	= { FOLLOW_RPAREN_in_crStmt903_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_110_in_crStmt905  */
static	ANTLR3_BITWORD FOLLOW_110_in_crStmt905_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_110_in_crStmt905	= { FOLLOW_110_in_crStmt905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_crStmt907  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_crStmt907_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_crStmt907	= { FOLLOW_LPAREN_in_crStmt907_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_lstRetFc_in_crStmt909  */
static	ANTLR3_BITWORD FOLLOW_lstRetFc_in_crStmt909_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_lstRetFc_in_crStmt909	= { FOLLOW_lstRetFc_in_crStmt909_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_crStmt911  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_crStmt911_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_crStmt911	= { FOLLOW_RPAREN_in_crStmt911_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_fctName948  */
static	ANTLR3_BITWORD FOLLOW_ID_in_fctName948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_fctName948	= { FOLLOW_ID_in_fctName948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_fctName959  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_fctName959_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_fctName959	= { FOLLOW_STRING_in_fctName959_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_lstArgsFc983  */
static	ANTLR3_BITWORD FOLLOW_dType_in_lstArgsFc983_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_lstArgsFc983	= { FOLLOW_dType_in_lstArgsFc983_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_lstArgsFc991  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_lstArgsFc991_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_lstArgsFc991	= { FOLLOW_COMMA_in_lstArgsFc991_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_lstArgsFc995  */
static	ANTLR3_BITWORD FOLLOW_dType_in_lstArgsFc995_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_lstArgsFc995	= { FOLLOW_dType_in_lstArgsFc995_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_lstRetFc1010  */
static	ANTLR3_BITWORD FOLLOW_dType_in_lstRetFc1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_lstRetFc1010	= { FOLLOW_dType_in_lstRetFc1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_lstRetFc1014  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_lstRetFc1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_lstRetFc1014	= { FOLLOW_COMMA_in_lstRetFc1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_lstRetFc1018  */
static	ANTLR3_BITWORD FOLLOW_dType_in_lstRetFc1018_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_lstRetFc1018	= { FOLLOW_dType_in_lstRetFc1018_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tpAtt_in_tpAttList1033  */
static	ANTLR3_BITWORD FOLLOW_tpAtt_in_tpAttList1033_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tpAtt_in_tpAttList1033	= { FOLLOW_tpAtt_in_tpAttList1033_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_tpAttList1040  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_tpAttList1040_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_tpAttList1040	= { FOLLOW_COMMA_in_tpAttList1040_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_tpAtt_in_tpAttList1044  */
static	ANTLR3_BITWORD FOLLOW_tpAtt_in_tpAttList1044_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_tpAtt_in_tpAttList1044	= { FOLLOW_tpAtt_in_tpAttList1044_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_tpAtt1059  */
static	ANTLR3_BITWORD FOLLOW_ID_in_tpAtt1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_tpAtt1059	= { FOLLOW_ID_in_tpAtt1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_dType_in_tpAtt1061  */
static	ANTLR3_BITWORD FOLLOW_dType_in_tpAtt1061_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_dType_in_tpAtt1061	= { FOLLOW_dType_in_tpAtt1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_dType1085  */
static	ANTLR3_BITWORD FOLLOW_ID_in_dType1085_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_dType1085	= { FOLLOW_ID_in_dType1085_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUAL_in_lstSyn1102  */
static	ANTLR3_BITWORD FOLLOW_EQUAL_in_lstSyn1102_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUAL_in_lstSyn1102	= { FOLLOW_EQUAL_in_lstSyn1102_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_lstSyn1104  */
static	ANTLR3_BITWORD FOLLOW_ID_in_lstSyn1104_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_lstSyn1104	= { FOLLOW_ID_in_lstSyn1104_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_lstSyn1111  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_lstSyn1111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_lstSyn1111	= { FOLLOW_COMMA_in_lstSyn1111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_lstSyn1113  */
static	ANTLR3_BITWORD FOLLOW_ID_in_lstSyn1113_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_lstSyn1113	= { FOLLOW_ID_in_lstSyn1113_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WRITER_in_writer1149  */
static	ANTLR3_BITWORD FOLLOW_WRITER_in_writer1149_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_WRITER_in_writer1149	= { FOLLOW_WRITER_in_writer1149_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_writer1153  */
static	ANTLR3_BITWORD FOLLOW_ID_in_writer1153_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_writer1153	= { FOLLOW_ID_in_writer1153_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_writer1155  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_writer1155_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_writer1155	= { FOLLOW_LPAREN_in_writer1155_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_writer1159  */
static	ANTLR3_BITWORD FOLLOW_ID_in_writer1159_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_writer1159	= { FOLLOW_ID_in_writer1159_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_writer1161  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_writer1161_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_writer1161	= { FOLLOW_RPAREN_in_writer1161_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_writer1163  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_writer1163_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_writer1163	= { FOLLOW_CONNECTIONS_in_writer1163_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_writer1165  */
static	ANTLR3_BITWORD FOLLOW_connList_in_writer1165_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_writer1165	= { FOLLOW_connList_in_writer1165_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_writer1167  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_writer1167_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_writer1167	= { FOLLOW_SEMICOLON_in_writer1167_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SCANNER_in_scanner1197  */
static	ANTLR3_BITWORD FOLLOW_SCANNER_in_scanner1197_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_SCANNER_in_scanner1197	= { FOLLOW_SCANNER_in_scanner1197_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_scanner1199  */
static	ANTLR3_BITWORD FOLLOW_ID_in_scanner1199_bits[]	= { ANTLR3_UINT64_LIT(0x0000000022000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_scanner1199	= { FOLLOW_ID_in_scanner1199_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_scannerBody_in_scanner1201  */
static	ANTLR3_BITWORD FOLLOW_scannerBody_in_scanner1201_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_scannerBody_in_scanner1201	= { FOLLOW_scannerBody_in_scanner1201_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_scanner1203  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_scanner1203_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_scanner1203	= { FOLLOW_SEMICOLON_in_scanner1203_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_scannerBody1241  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_scannerBody1241_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_scannerBody1241	= { FOLLOW_LPAREN_in_scannerBody1241_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_scannerBody1243  */
static	ANTLR3_BITWORD FOLLOW_ID_in_scannerBody1243_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_scannerBody1243	= { FOLLOW_ID_in_scannerBody1243_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_scannerBody1245  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_scannerBody1245_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_scannerBody1245	= { FOLLOW_RPAREN_in_scannerBody1245_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WAYPOINT_in_waypoint1270  */
static	ANTLR3_BITWORD FOLLOW_WAYPOINT_in_waypoint1270_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_WAYPOINT_in_waypoint1270	= { FOLLOW_WAYPOINT_in_waypoint1270_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_waypoint1272  */
static	ANTLR3_BITWORD FOLLOW_ID_in_waypoint1272_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000200), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_waypoint1272	= { FOLLOW_ID_in_waypoint1272_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_wpDefinition_in_waypoint1276  */
static	ANTLR3_BITWORD FOLLOW_wpDefinition_in_waypoint1276_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000200), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_wpDefinition_in_waypoint1276	= { FOLLOW_wpDefinition_in_waypoint1276_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_wpBody_in_waypoint1281  */
static	ANTLR3_BITWORD FOLLOW_wpBody_in_waypoint1281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_wpBody_in_waypoint1281	= { FOLLOW_wpBody_in_waypoint1281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUERRY_in_query1313  */
static	ANTLR3_BITWORD FOLLOW_QUERRY_in_query1313_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUERRY_in_query1313	= { FOLLOW_QUERRY_in_query1313_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_query1320  */
static	ANTLR3_BITWORD FOLLOW_ID_in_query1320_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_query1320	= { FOLLOW_ID_in_query1320_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_query1329  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_query1329_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_query1329	= { FOLLOW_COMMA_in_query1329_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_query1333  */
static	ANTLR3_BITWORD FOLLOW_ID_in_query1333_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_query1333	= { FOLLOW_ID_in_query1333_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_query1342  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_query1342_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_query1342	= { FOLLOW_SEMICOLON_in_query1342_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUERRY_in_query1361  */
static	ANTLR3_BITWORD FOLLOW_QUERRY_in_query1361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUERRY_in_query1361	= { FOLLOW_QUERRY_in_query1361_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_query1365  */
static	ANTLR3_BITWORD FOLLOW_ID_in_query1365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_query1365	= { FOLLOW_ID_in_query1365_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_queryBody_in_query1369  */
static	ANTLR3_BITWORD FOLLOW_queryBody_in_query1369_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_queryBody_in_query1369	= { FOLLOW_queryBody_in_query1369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_wpBody1406  */
static	ANTLR3_BITWORD FOLLOW_111_in_wpBody1406_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000018000000) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_wpBody1406	= { FOLLOW_111_in_wpBody1406_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bypass_in_wpBody1409  */
static	ANTLR3_BITWORD FOLLOW_bypass_in_wpBody1409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bypass_in_wpBody1409	= { FOLLOW_bypass_in_wpBody1409_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_wpbodyStatement_in_wpBody1412  */
static	ANTLR3_BITWORD FOLLOW_wpbodyStatement_in_wpBody1412_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_wpbodyStatement_in_wpBody1412	= { FOLLOW_wpbodyStatement_in_wpBody1412_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_wpBody1416  */
static	ANTLR3_BITWORD FOLLOW_112_in_wpBody1416_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_wpBody1416	= { FOLLOW_112_in_wpBody1416_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_wpBody1428  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_wpBody1428_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_wpBody1428	= { FOLLOW_SEMICOLON_in_wpBody1428_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_queryBody1449  */
static	ANTLR3_BITWORD FOLLOW_111_in_queryBody1449_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_queryBody1449	= { FOLLOW_111_in_queryBody1449_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_qBodyStatement_in_queryBody1452  */
static	ANTLR3_BITWORD FOLLOW_qBodyStatement_in_queryBody1452_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001020000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_qBodyStatement_in_queryBody1452	= { FOLLOW_qBodyStatement_in_queryBody1452_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_queryBody1455  */
static	ANTLR3_BITWORD FOLLOW_112_in_queryBody1455_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_queryBody1455	= { FOLLOW_112_in_queryBody1455_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QUERRY_in_wpbodyStatement1477  */
static	ANTLR3_BITWORD FOLLOW_QUERRY_in_wpbodyStatement1477_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_QUERRY_in_wpbodyStatement1477	= { FOLLOW_QUERRY_in_wpbodyStatement1477_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_wpbodyStatement1479  */
static	ANTLR3_BITWORD FOLLOW_ID_in_wpbodyStatement1479_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_wpbodyStatement1479	= { FOLLOW_ID_in_wpbodyStatement1479_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_wpbodyStatement1483  */
static	ANTLR3_BITWORD FOLLOW_111_in_wpbodyStatement1483_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000001F0), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_wpbodyStatement1483	= { FOLLOW_111_in_wpbodyStatement1483_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bodyStatement_in_wpbodyStatement1485  */
static	ANTLR3_BITWORD FOLLOW_bodyStatement_in_wpbodyStatement1485_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bodyStatement_in_wpbodyStatement1485	= { FOLLOW_bodyStatement_in_wpbodyStatement1485_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_wpbodyStatement1488  */
static	ANTLR3_BITWORD FOLLOW_112_in_wpbodyStatement1488_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_wpbodyStatement1488	= { FOLLOW_112_in_wpbodyStatement1488_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_WAYPOINT_in_qBodyStatement1521  */
static	ANTLR3_BITWORD FOLLOW_WAYPOINT_in_qBodyStatement1521_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_WAYPOINT_in_qBodyStatement1521	= { FOLLOW_WAYPOINT_in_qBodyStatement1521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_qBodyStatement1523  */
static	ANTLR3_BITWORD FOLLOW_ID_in_qBodyStatement1523_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_qBodyStatement1523	= { FOLLOW_ID_in_qBodyStatement1523_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_qBodyStatement1527  */
static	ANTLR3_BITWORD FOLLOW_111_in_qBodyStatement1527_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000001F0), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_qBodyStatement1527	= { FOLLOW_111_in_qBodyStatement1527_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_bodyStatement_in_qBodyStatement1529  */
static	ANTLR3_BITWORD FOLLOW_bodyStatement_in_qBodyStatement1529_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_bodyStatement_in_qBodyStatement1529	= { FOLLOW_bodyStatement_in_qBodyStatement1529_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_qBodyStatement1532  */
static	ANTLR3_BITWORD FOLLOW_112_in_qBodyStatement1532_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_qBodyStatement1532	= { FOLLOW_112_in_qBodyStatement1532_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selectBody_in_bodyStatement1571  */
static	ANTLR3_BITWORD FOLLOW_selectBody_in_bodyStatement1571_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selectBody_in_bodyStatement1571	= { FOLLOW_selectBody_in_bodyStatement1571_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_aggregateBody_in_bodyStatement1585  */
static	ANTLR3_BITWORD FOLLOW_aggregateBody_in_bodyStatement1585_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_aggregateBody_in_bodyStatement1585	= { FOLLOW_aggregateBody_in_bodyStatement1585_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_printBody_in_bodyStatement1598  */
static	ANTLR3_BITWORD FOLLOW_printBody_in_bodyStatement1598_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_printBody_in_bodyStatement1598	= { FOLLOW_printBody_in_bodyStatement1598_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_joinBody_in_bodyStatement1611  */
static	ANTLR3_BITWORD FOLLOW_joinBody_in_bodyStatement1611_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_joinBody_in_bodyStatement1611	= { FOLLOW_joinBody_in_bodyStatement1611_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_glaBody_in_bodyStatement1624  */
static	ANTLR3_BITWORD FOLLOW_glaBody_in_bodyStatement1624_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_glaBody_in_bodyStatement1624	= { FOLLOW_glaBody_in_bodyStatement1624_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selectRules_in_selectBody1653  */
static	ANTLR3_BITWORD FOLLOW_selectRules_in_selectBody1653_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000012), ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_selectRules_in_selectBody1653	= { FOLLOW_selectRules_in_selectBody1653_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FILTER_in_selectRules1674  */
static	ANTLR3_BITWORD FOLLOW_FILTER_in_selectRules1674_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_FILTER_in_selectRules1674	= { FOLLOW_FILTER_in_selectRules1674_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expression_in_selectRules1677  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expression_in_selectRules1677_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expression_in_selectRules1677	= { FOLLOW_logical_or_expression_in_selectRules1677_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_selectRules1679  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_selectRules1679_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_selectRules1679	= { FOLLOW_SEMICOLON_in_selectRules1679_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SYNTHESIZE_in_selectRules1691  */
static	ANTLR3_BITWORD FOLLOW_SYNTHESIZE_in_selectRules1691_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_SYNTHESIZE_in_selectRules1691	= { FOLLOW_SYNTHESIZE_in_selectRules1691_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selectRules1694  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selectRules1694_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selectRules1694	= { FOLLOW_ID_in_selectRules1694_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_selectRules1696  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_selectRules1696_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_selectRules1696	= { FOLLOW_COLON_in_selectRules1696_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_selectRules1699  */
static	ANTLR3_BITWORD FOLLOW_ID_in_selectRules1699_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_selectRules1699	= { FOLLOW_ID_in_selectRules1699_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUAL_in_selectRules1701  */
static	ANTLR3_BITWORD FOLLOW_EQUAL_in_selectRules1701_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUAL_in_selectRules1701	= { FOLLOW_EQUAL_in_selectRules1701_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_selectRules1704  */
static	ANTLR3_BITWORD FOLLOW_expression_in_selectRules1704_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_selectRules1704	= { FOLLOW_expression_in_selectRules1704_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_selectRules1706  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_selectRules1706_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_selectRules1706	= { FOLLOW_SEMICOLON_in_selectRules1706_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_aggregateRules_in_aggregateBody1728  */
static	ANTLR3_BITWORD FOLLOW_aggregateRules_in_aggregateBody1728_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000102) };
static  ANTLR3_BITSET_LIST FOLLOW_aggregateRules_in_aggregateBody1728	= { FOLLOW_aggregateRules_in_aggregateBody1728_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AGGREGATE_in_aggregateRules1749  */
static	ANTLR3_BITWORD FOLLOW_AGGREGATE_in_aggregateRules1749_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_AGGREGATE_in_aggregateRules1749	= { FOLLOW_AGGREGATE_in_aggregateRules1749_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_aggregateRules1752  */
static	ANTLR3_BITWORD FOLLOW_ID_in_aggregateRules1752_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_aggregateRules1752	= { FOLLOW_ID_in_aggregateRules1752_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUAL_in_aggregateRules1754  */
static	ANTLR3_BITWORD FOLLOW_EQUAL_in_aggregateRules1754_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUAL_in_aggregateRules1754	= { FOLLOW_EQUAL_in_aggregateRules1754_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_aggregateRules1757  */
static	ANTLR3_BITWORD FOLLOW_ID_in_aggregateRules1757_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_aggregateRules1757	= { FOLLOW_ID_in_aggregateRules1757_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_aggregateRules1759  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_aggregateRules1759_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_aggregateRules1759	= { FOLLOW_LPAREN_in_aggregateRules1759_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_aggregateRules1762  */
static	ANTLR3_BITWORD FOLLOW_expression_in_aggregateRules1762_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_aggregateRules1762	= { FOLLOW_expression_in_aggregateRules1762_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_aggregateRules1764  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_aggregateRules1764_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_aggregateRules1764	= { FOLLOW_RPAREN_in_aggregateRules1764_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_aggregateRules1767  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_aggregateRules1767_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_aggregateRules1767	= { FOLLOW_SEMICOLON_in_aggregateRules1767_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_printRules_in_printBody1790  */
static	ANTLR3_BITWORD FOLLOW_printRules_in_printBody1790_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000082) };
static  ANTLR3_BITSET_LIST FOLLOW_printRules_in_printBody1790	= { FOLLOW_printRules_in_printBody1790_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PRINT_in_printRules1811  */
static	ANTLR3_BITWORD FOLLOW_PRINT_in_printRules1811_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_PRINT_in_printRules1811	= { FOLLOW_PRINT_in_printRules1811_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_printRules1813  */
static	ANTLR3_BITWORD FOLLOW_expression_in_printRules1813_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_printRules1813	= { FOLLOW_expression_in_printRules1813_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_printRules1821  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_printRules1821_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_printRules1821	= { FOLLOW_COMMA_in_printRules1821_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_printRules1823  */
static	ANTLR3_BITWORD FOLLOW_expression_in_printRules1823_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_printRules1823	= { FOLLOW_expression_in_printRules1823_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_printRules1828  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_printRules1828_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_printRules1828	= { FOLLOW_SEMICOLON_in_printRules1828_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_joinRules_in_joinBody1857  */
static	ANTLR3_BITWORD FOLLOW_joinRules_in_joinBody1857_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000022) };
static  ANTLR3_BITSET_LIST FOLLOW_joinRules_in_joinBody1857	= { FOLLOW_joinRules_in_joinBody1857_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_JOIN_in_joinRules1878  */
static	ANTLR3_BITWORD FOLLOW_JOIN_in_joinRules1878_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_JOIN_in_joinRules1878	= { FOLLOW_JOIN_in_joinRules1878_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attributeEList_in_joinRules1880  */
static	ANTLR3_BITWORD FOLLOW_attributeEList_in_joinRules1880_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attributeEList_in_joinRules1880	= { FOLLOW_attributeEList_in_joinRules1880_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_joinRules1882  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_joinRules1882_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_joinRules1882	= { FOLLOW_SEMICOLON_in_joinRules1882_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_glaRules_in_glaBody1914  */
static	ANTLR3_BITWORD FOLLOW_glaRules_in_glaBody1914_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000042) };
static  ANTLR3_BITSET_LIST FOLLOW_glaRules_in_glaBody1914	= { FOLLOW_glaRules_in_glaBody1914_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GLA_in_glaRules1935  */
static	ANTLR3_BITWORD FOLLOW_GLA_in_glaRules1935_bits[]	= { ANTLR3_UINT64_LIT(0x0002000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_GLA_in_glaRules1935	= { FOLLOW_GLA_in_glaRules1935_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_glaRules1938  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_glaRules1938_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_glaRules1938	= { FOLLOW_PLUS_in_glaRules1938_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_glaRules1942  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_glaRules1942_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_glaRules1942	= { FOLLOW_LPAREN_in_glaRules1942_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attListWTypes_in_glaRules1944  */
static	ANTLR3_BITWORD FOLLOW_attListWTypes_in_glaRules1944_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attListWTypes_in_glaRules1944	= { FOLLOW_attListWTypes_in_glaRules1944_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_glaRules1946  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_glaRules1946_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000200) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_glaRules1946	= { FOLLOW_RPAREN_in_glaRules1946_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUAL_in_glaRules1948  */
static	ANTLR3_BITWORD FOLLOW_EQUAL_in_glaRules1948_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUAL_in_glaRules1948	= { FOLLOW_EQUAL_in_glaRules1948_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_glaRules1950  */
static	ANTLR3_BITWORD FOLLOW_ID_in_glaRules1950_bits[]	= { ANTLR3_UINT64_LIT(0x00000000A0000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_glaRules1950	= { FOLLOW_ID_in_glaRules1950_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LSQ_in_glaRules1953  */
static	ANTLR3_BITWORD FOLLOW_LSQ_in_glaRules1953_bits[]	= { ANTLR3_UINT64_LIT(0x0000000101140000) };
static  ANTLR3_BITSET_LIST FOLLOW_LSQ_in_glaRules1953	= { FOLLOW_LSQ_in_glaRules1953_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctAttList_in_glaRules1955  */
static	ANTLR3_BITWORD FOLLOW_ctAttList_in_glaRules1955_bits[]	= { ANTLR3_UINT64_LIT(0x0000000100000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ctAttList_in_glaRules1955	= { FOLLOW_ctAttList_in_glaRules1955_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RSQ_in_glaRules1957  */
static	ANTLR3_BITWORD FOLLOW_RSQ_in_glaRules1957_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RSQ_in_glaRules1957	= { FOLLOW_RSQ_in_glaRules1957_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_glaRules1961  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_glaRules1961_bits[]	= { ANTLR3_UINT64_LIT(0x000640806117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_glaRules1961	= { FOLLOW_LPAREN_in_glaRules1961_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionList_in_glaRules1963  */
static	ANTLR3_BITWORD FOLLOW_expressionList_in_glaRules1963_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionList_in_glaRules1963	= { FOLLOW_expressionList_in_glaRules1963_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_glaRules1966  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_glaRules1966_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_glaRules1966	= { FOLLOW_RPAREN_in_glaRules1966_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_glaRules1969  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_glaRules1969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_glaRules1969	= { FOLLOW_SEMICOLON_in_glaRules1969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BYPASS_in_bypass2010  */
static	ANTLR3_BITWORD FOLLOW_BYPASS_in_bypass2010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_BYPASS_in_bypass2010	= { FOLLOW_BYPASS_in_bypass2010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_bypass2012  */
static	ANTLR3_BITWORD FOLLOW_ID_in_bypass2012_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_bypass2012	= { FOLLOW_ID_in_bypass2012_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_bypass2020  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_bypass2020_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_bypass2020	= { FOLLOW_COMMA_in_bypass2020_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_bypass2022  */
static	ANTLR3_BITWORD FOLLOW_ID_in_bypass2022_bits[]	= { ANTLR3_UINT64_LIT(0x0000000006000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_bypass2022	= { FOLLOW_ID_in_bypass2022_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_bypass2028  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_bypass2028_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_bypass2028	= { FOLLOW_SEMICOLON_in_bypass2028_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_idList_in_queryList2057  */
static	ANTLR3_BITWORD FOLLOW_idList_in_queryList2057_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_idList_in_queryList2057	= { FOLLOW_idList_in_queryList2057_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_EQUAL_in_wpDefinition2098  */
static	ANTLR3_BITWORD FOLLOW_EQUAL_in_wpDefinition2098_bits[]	= { ANTLR3_UINT64_LIT(0x00000000000011E0), ANTLR3_UINT64_LIT(0x0000080000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_EQUAL_in_wpDefinition2098	= { FOLLOW_EQUAL_in_wpDefinition2098_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_selectWP_in_wpDefinition2103  */
static	ANTLR3_BITWORD FOLLOW_selectWP_in_wpDefinition2103_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_selectWP_in_wpDefinition2103	= { FOLLOW_selectWP_in_wpDefinition2103_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_joinWP_in_wpDefinition2107  */
static	ANTLR3_BITWORD FOLLOW_joinWP_in_wpDefinition2107_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_joinWP_in_wpDefinition2107	= { FOLLOW_joinWP_in_wpDefinition2107_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_aggregateWP_in_wpDefinition2111  */
static	ANTLR3_BITWORD FOLLOW_aggregateWP_in_wpDefinition2111_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_aggregateWP_in_wpDefinition2111	= { FOLLOW_aggregateWP_in_wpDefinition2111_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_printWP_in_wpDefinition2115  */
static	ANTLR3_BITWORD FOLLOW_printWP_in_wpDefinition2115_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_printWP_in_wpDefinition2115	= { FOLLOW_printWP_in_wpDefinition2115_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_textloaderWP_in_wpDefinition2119  */
static	ANTLR3_BITWORD FOLLOW_textloaderWP_in_wpDefinition2119_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_textloaderWP_in_wpDefinition2119	= { FOLLOW_textloaderWP_in_wpDefinition2119_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_glaWP_in_wpDefinition2123  */
static	ANTLR3_BITWORD FOLLOW_glaWP_in_wpDefinition2123_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_glaWP_in_wpDefinition2123	= { FOLLOW_glaWP_in_wpDefinition2123_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SELECT_in_selectWP2146  */
static	ANTLR3_BITWORD FOLLOW_SELECT_in_selectWP2146_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SELECT_in_selectWP2146	= { FOLLOW_SELECT_in_selectWP2146_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_selectWP2150  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_selectWP2150_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_selectWP2150	= { FOLLOW_CONNECTIONS_in_selectWP2150_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_selectWP2152  */
static	ANTLR3_BITWORD FOLLOW_connList_in_selectWP2152_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_selectWP2152	= { FOLLOW_connList_in_selectWP2152_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_JOIN_in_joinWP2178  */
static	ANTLR3_BITWORD FOLLOW_JOIN_in_joinWP2178_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_JOIN_in_joinWP2178	= { FOLLOW_JOIN_in_joinWP2178_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_joinWP2181  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_joinWP2181_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_joinWP2181	= { FOLLOW_LPAREN_in_joinWP2181_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attributeList_in_joinWP2183  */
static	ANTLR3_BITWORD FOLLOW_attributeList_in_joinWP2183_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_attributeList_in_joinWP2183	= { FOLLOW_attributeList_in_joinWP2183_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_joinWP2185  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_joinWP2185_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_joinWP2185	= { FOLLOW_RPAREN_in_joinWP2185_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_joinWP2187  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_joinWP2187_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_joinWP2187	= { FOLLOW_CONNECTIONS_in_joinWP2187_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_joinWP2189  */
static	ANTLR3_BITWORD FOLLOW_connList_in_joinWP2189_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_joinWP2189	= { FOLLOW_connList_in_joinWP2189_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_AGGREGATE_in_aggregateWP2223  */
static	ANTLR3_BITWORD FOLLOW_AGGREGATE_in_aggregateWP2223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_AGGREGATE_in_aggregateWP2223	= { FOLLOW_AGGREGATE_in_aggregateWP2223_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_aggregateWP2228  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_aggregateWP2228_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_aggregateWP2228	= { FOLLOW_CONNECTIONS_in_aggregateWP2228_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_aggregateWP2231  */
static	ANTLR3_BITWORD FOLLOW_connList_in_aggregateWP2231_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_aggregateWP2231	= { FOLLOW_connList_in_aggregateWP2231_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PRINT_in_printWP2248  */
static	ANTLR3_BITWORD FOLLOW_PRINT_in_printWP2248_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PRINT_in_printWP2248	= { FOLLOW_PRINT_in_printWP2248_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_printWP2252  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_printWP2252_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_printWP2252	= { FOLLOW_CONNECTIONS_in_printWP2252_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_printWP2255  */
static	ANTLR3_BITWORD FOLLOW_connList_in_printWP2255_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_printWP2255	= { FOLLOW_connList_in_printWP2255_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GLA_in_glaWP2272  */
static	ANTLR3_BITWORD FOLLOW_GLA_in_glaWP2272_bits[]	= { ANTLR3_UINT64_LIT(0x0002000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_GLA_in_glaWP2272	= { FOLLOW_GLA_in_glaWP2272_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_glaWP2277  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_glaWP2277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000100000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_glaWP2277	= { FOLLOW_PLUS_in_glaWP2277_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CONNECTIONS_in_glaWP2280  */
static	ANTLR3_BITWORD FOLLOW_CONNECTIONS_in_glaWP2280_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_CONNECTIONS_in_glaWP2280	= { FOLLOW_CONNECTIONS_in_glaWP2280_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_connList_in_glaWP2283  */
static	ANTLR3_BITWORD FOLLOW_connList_in_glaWP2283_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_connList_in_glaWP2283	= { FOLLOW_connList_in_glaWP2283_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_wayPointCN_in_connList2301  */
static	ANTLR3_BITWORD FOLLOW_wayPointCN_in_connList2301_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_wayPointCN_in_connList2301	= { FOLLOW_wayPointCN_in_connList2301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_connList2309  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_connList2309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_connList2309	= { FOLLOW_COMMA_in_connList2309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_wayPointCN_in_connList2312  */
static	ANTLR3_BITWORD FOLLOW_wayPointCN_in_connList2312_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_wayPointCN_in_connList2312	= { FOLLOW_wayPointCN_in_connList2312_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TEXTLOADER_in_textloaderWP2332  */
static	ANTLR3_BITWORD FOLLOW_TEXTLOADER_in_textloaderWP2332_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000800000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_TEXTLOADER_in_textloaderWP2332	= { FOLLOW_TEXTLOADER_in_textloaderWP2332_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_111_in_textloaderWP2337  */
static	ANTLR3_BITWORD FOLLOW_111_in_textloaderWP2337_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002C00) };
static  ANTLR3_BITSET_LIST FOLLOW_111_in_textloaderWP2337	= { FOLLOW_111_in_textloaderWP2337_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_textloaderBody_in_textloaderWP2340  */
static	ANTLR3_BITWORD FOLLOW_textloaderBody_in_textloaderWP2340_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000002C00), ANTLR3_UINT64_LIT(0x0001000000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_textloaderBody_in_textloaderWP2340	= { FOLLOW_textloaderBody_in_textloaderWP2340_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_112_in_textloaderWP2343  */
static	ANTLR3_BITWORD FOLLOW_112_in_textloaderWP2343_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_112_in_textloaderWP2343	= { FOLLOW_112_in_textloaderWP2343_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ATTRIBUTES_in_textloaderBody2361  */
static	ANTLR3_BITWORD FOLLOW_ATTRIBUTES_in_textloaderBody2361_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000000), ANTLR3_UINT64_LIT(0x0000001000000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ATTRIBUTES_in_textloaderBody2361	= { FOLLOW_ATTRIBUTES_in_textloaderBody2361_bits, 2	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FROM_in_textloaderBody2363  */
static	ANTLR3_BITWORD FOLLOW_FROM_in_textloaderBody2363_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_FROM_in_textloaderBody2363	= { FOLLOW_FROM_in_textloaderBody2363_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_textloaderBody2365  */
static	ANTLR3_BITWORD FOLLOW_ID_in_textloaderBody2365_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_textloaderBody2365	= { FOLLOW_ID_in_textloaderBody2365_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_textloaderBody2367  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_textloaderBody2367_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_textloaderBody2367	= { FOLLOW_SEMICOLON_in_textloaderBody2367_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEPARATOR_in_textloaderBody2383  */
static	ANTLR3_BITWORD FOLLOW_SEPARATOR_in_textloaderBody2383_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_SEPARATOR_in_textloaderBody2383	= { FOLLOW_SEPARATOR_in_textloaderBody2383_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_textloaderBody2385  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_textloaderBody2385_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_textloaderBody2385	= { FOLLOW_STRING_in_textloaderBody2385_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_textloaderBody2387  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_textloaderBody2387_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_textloaderBody2387	= { FOLLOW_SEMICOLON_in_textloaderBody2387_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_FILE_in_textloaderBody2403  */
static	ANTLR3_BITWORD FOLLOW_FILE_in_textloaderBody2403_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_FILE_in_textloaderBody2403	= { FOLLOW_FILE_in_textloaderBody2403_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_textloaderBody2405  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_textloaderBody2405_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000040000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_textloaderBody2405	= { FOLLOW_STRING_in_textloaderBody2405_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_INT_in_textloaderBody2407  */
static	ANTLR3_BITWORD FOLLOW_INT_in_textloaderBody2407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000002000000) };
static  ANTLR3_BITSET_LIST FOLLOW_INT_in_textloaderBody2407	= { FOLLOW_INT_in_textloaderBody2407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SEMICOLON_in_textloaderBody2409  */
static	ANTLR3_BITWORD FOLLOW_SEMICOLON_in_textloaderBody2409_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_SEMICOLON_in_textloaderBody2409	= { FOLLOW_SEMICOLON_in_textloaderBody2409_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_termConnOpt_in_wayPointCN2441  */
static	ANTLR3_BITWORD FOLLOW_termConnOpt_in_wayPointCN2441_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_termConnOpt_in_wayPointCN2441	= { FOLLOW_termConnOpt_in_wayPointCN2441_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_wayPointCN2443  */
static	ANTLR3_BITWORD FOLLOW_ID_in_wayPointCN2443_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_wayPointCN2443	= { FOLLOW_ID_in_wayPointCN2443_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QMARK_in_termConnOpt2478  */
static	ANTLR3_BITWORD FOLLOW_QMARK_in_termConnOpt2478_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_QMARK_in_termConnOpt2478	= { FOLLOW_QMARK_in_termConnOpt2478_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start parse
 * DataPath.g:100:1: parse[LemonTranslator* trans] : ( complexStatement )+ ;
 */
static DataPathParser_parse_return
parse(pDataPathParser ctx, LemonTranslator* trans)
{   
    DataPathParser_parse_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_complexStatement_return complexStatement1;
    #undef	RETURN_TYPE_complexStatement1
    #define	RETURN_TYPE_complexStatement1 DataPathParser_complexStatement_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    complexStatement1.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:100:31: ( ( complexStatement )+ )
        // DataPath.g:100:33: ( complexStatement )+
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            {

                      trans->FillTypeMap(typeMap);
                    
            }
            // DataPath.g:102:7: ( complexStatement )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=2;
            	switch ( LA(1) ) 
            	{
            	case COMMENT:
            	case QUERRY:
            	case NEW:
            	case DELETE:
            	case CREATE:
            	case DROP:
            	case RUN:
            	case FLUSH:
            	case QUIT:
            	case WAYPOINT:
            	case SCANNER:
            	case WRITER:
            		{
            			alt1=1;
            		}
            	    break;

            	}

            	switch (alt1) 
            	{
            	    case 1:
            	        // DataPath.g:102:7: complexStatement
            	        {
            	            FOLLOWPUSH(FOLLOW_complexStatement_in_parse466);
            	            complexStatement1=complexStatement(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruleparseEx;
            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_0, complexStatement1.tree);

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruleparseEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleparseEx; /* Prevent compiler warnings */
    ruleparseEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end parse */

/** 
 * $ANTLR start complexStatement
 * DataPath.g:104:1: complexStatement : ( NEW statement[true] -> ^( NEWSTATEMENT statement ) | statement[false] -> ^( OLDSTATEMENT statement ) | DELETE delStmt SEMICOLON -> delStmt | CREATE crStmt SEMICOLON -> crStmt | DROP drStmt SEMICOLON -> drStmt | FLUSH SEMICOLON -> FLUSHTOKEN | QUIT SEMICOLON -> QUITTOKEN | r= RUN QUERRY i+= ID ( COMMA i+= ID )* SEMICOLON -> ^( RUN__[$r] $i) | COMMENT ->);
 */
static DataPathParser_complexStatement_return
complexStatement(pDataPathParser ctx)
{   
    DataPathParser_complexStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    r;
    pANTLR3_COMMON_TOKEN    NEW2;
    pANTLR3_COMMON_TOKEN    DELETE5;
    pANTLR3_COMMON_TOKEN    SEMICOLON7;
    pANTLR3_COMMON_TOKEN    CREATE8;
    pANTLR3_COMMON_TOKEN    SEMICOLON10;
    pANTLR3_COMMON_TOKEN    DROP11;
    pANTLR3_COMMON_TOKEN    SEMICOLON13;
    pANTLR3_COMMON_TOKEN    FLUSH14;
    pANTLR3_COMMON_TOKEN    SEMICOLON15;
    pANTLR3_COMMON_TOKEN    QUIT16;
    pANTLR3_COMMON_TOKEN    SEMICOLON17;
    pANTLR3_COMMON_TOKEN    QUERRY18;
    pANTLR3_COMMON_TOKEN    COMMA19;
    pANTLR3_COMMON_TOKEN    SEMICOLON20;
    pANTLR3_COMMON_TOKEN    COMMENT21;
    pANTLR3_COMMON_TOKEN    i;
    pANTLR3_VECTOR    list_i;
    DataPathParser_statement_return statement3;
    #undef	RETURN_TYPE_statement3
    #define	RETURN_TYPE_statement3 DataPathParser_statement_return

    DataPathParser_statement_return statement4;
    #undef	RETURN_TYPE_statement4
    #define	RETURN_TYPE_statement4 DataPathParser_statement_return

    DataPathParser_delStmt_return delStmt6;
    #undef	RETURN_TYPE_delStmt6
    #define	RETURN_TYPE_delStmt6 DataPathParser_delStmt_return

    DataPathParser_crStmt_return crStmt9;
    #undef	RETURN_TYPE_crStmt9
    #define	RETURN_TYPE_crStmt9 DataPathParser_crStmt_return

    DataPathParser_drStmt_return drStmt12;
    #undef	RETURN_TYPE_drStmt12
    #define	RETURN_TYPE_drStmt12 DataPathParser_drStmt_return

    pANTLR3_BASE_TREE r_tree;
    pANTLR3_BASE_TREE NEW2_tree;
    pANTLR3_BASE_TREE DELETE5_tree;
    pANTLR3_BASE_TREE SEMICOLON7_tree;
    pANTLR3_BASE_TREE CREATE8_tree;
    pANTLR3_BASE_TREE SEMICOLON10_tree;
    pANTLR3_BASE_TREE DROP11_tree;
    pANTLR3_BASE_TREE SEMICOLON13_tree;
    pANTLR3_BASE_TREE FLUSH14_tree;
    pANTLR3_BASE_TREE SEMICOLON15_tree;
    pANTLR3_BASE_TREE QUIT16_tree;
    pANTLR3_BASE_TREE SEMICOLON17_tree;
    pANTLR3_BASE_TREE QUERRY18_tree;
    pANTLR3_BASE_TREE COMMA19_tree;
    pANTLR3_BASE_TREE SEMICOLON20_tree;
    pANTLR3_BASE_TREE COMMENT21_tree;
    pANTLR3_BASE_TREE i_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NEW;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RUN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CREATE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUERRY;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DELETE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FLUSH;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMENT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DROP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUIT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_statement;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_crStmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_drStmt;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_delStmt;
    /* Initialize rule variables
     */


    root_0 = NULL;

    r       = NULL;
    NEW2       = NULL;
    DELETE5       = NULL;
    SEMICOLON7       = NULL;
    CREATE8       = NULL;
    SEMICOLON10       = NULL;
    DROP11       = NULL;
    SEMICOLON13       = NULL;
    FLUSH14       = NULL;
    SEMICOLON15       = NULL;
    QUIT16       = NULL;
    SEMICOLON17       = NULL;
    QUERRY18       = NULL;
    COMMA19       = NULL;
    SEMICOLON20       = NULL;
    COMMENT21       = NULL;
    i       = NULL;
    list_i     = NULL;
    statement3.tree = NULL;
    statement4.tree = NULL;
    delStmt6.tree = NULL;
    crStmt9.tree = NULL;
    drStmt12.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    r_tree   = NULL;
    NEW2_tree   = NULL;
    DELETE5_tree   = NULL;
    SEMICOLON7_tree   = NULL;
    CREATE8_tree   = NULL;
    SEMICOLON10_tree   = NULL;
    DROP11_tree   = NULL;
    SEMICOLON13_tree   = NULL;
    FLUSH14_tree   = NULL;
    SEMICOLON15_tree   = NULL;
    QUIT16_tree   = NULL;
    SEMICOLON17_tree   = NULL;
    QUERRY18_tree   = NULL;
    COMMA19_tree   = NULL;
    SEMICOLON20_tree   = NULL;
    COMMENT21_tree   = NULL;
    i_tree   = NULL;

    stream_NEW   = NULL;
    #define CREATE_stream_NEW  if (stream_NEW == NULL) {stream_NEW = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NEW"); } 
    stream_RUN   = NULL;
    #define CREATE_stream_RUN  if (stream_RUN == NULL) {stream_RUN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RUN"); } 
    stream_CREATE   = NULL;
    #define CREATE_stream_CREATE  if (stream_CREATE == NULL) {stream_CREATE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CREATE"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_QUERRY   = NULL;
    #define CREATE_stream_QUERRY  if (stream_QUERRY == NULL) {stream_QUERRY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUERRY"); } 
    stream_DELETE   = NULL;
    #define CREATE_stream_DELETE  if (stream_DELETE == NULL) {stream_DELETE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DELETE"); } 
    stream_FLUSH   = NULL;
    #define CREATE_stream_FLUSH  if (stream_FLUSH == NULL) {stream_FLUSH = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FLUSH"); } 
    stream_COMMENT   = NULL;
    #define CREATE_stream_COMMENT  if (stream_COMMENT == NULL) {stream_COMMENT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMENT"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_DROP   = NULL;
    #define CREATE_stream_DROP  if (stream_DROP == NULL) {stream_DROP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DROP"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_QUIT   = NULL;
    #define CREATE_stream_QUIT  if (stream_QUIT == NULL) {stream_QUIT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUIT"); } 
    stream_statement   = NULL;
    #define CREATE_stream_statement  if (stream_statement == NULL) {stream_statement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule statement"); }
    stream_crStmt   = NULL;
    #define CREATE_stream_crStmt  if (stream_crStmt == NULL) {stream_crStmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule crStmt"); }
    stream_drStmt   = NULL;
    #define CREATE_stream_drStmt  if (stream_drStmt == NULL) {stream_drStmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule drStmt"); }
    stream_delStmt   = NULL;
    #define CREATE_stream_delStmt  if (stream_delStmt == NULL) {stream_delStmt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule delStmt"); }

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:105:3: ( NEW statement[true] -> ^( NEWSTATEMENT statement ) | statement[false] -> ^( OLDSTATEMENT statement ) | DELETE delStmt SEMICOLON -> delStmt | CREATE crStmt SEMICOLON -> crStmt | DROP drStmt SEMICOLON -> drStmt | FLUSH SEMICOLON -> FLUSHTOKEN | QUIT SEMICOLON -> QUITTOKEN | r= RUN QUERRY i+= ID ( COMMA i+= ID )* SEMICOLON -> ^( RUN__[$r] $i) | COMMENT ->)
            
            ANTLR3_UINT32 alt3;

            alt3=9;

            switch ( LA(1) ) 
            {
            case NEW:
            	{
            		alt3=1;
            	}
                break;
            case QUERRY:
            case WAYPOINT:
            case SCANNER:
            case WRITER:
            	{
            		alt3=2;
            	}
                break;
            case DELETE:
            	{
            		alt3=3;
            	}
                break;
            case CREATE:
            	{
            		alt3=4;
            	}
                break;
            case DROP:
            	{
            		alt3=5;
            	}
                break;
            case FLUSH:
            	{
            		alt3=6;
            	}
                break;
            case QUIT:
            	{
            		alt3=7;
            	}
                break;
            case RUN:
            	{
            		alt3=8;
            	}
                break;
            case COMMENT:
            	{
            		alt3=9;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 3;
                EXCEPTION->state        = 0;


                goto rulecomplexStatementEx;
            }

            switch (alt3) 
            {
        	case 1:
        	    // DataPath.g:105:5: NEW statement[true]
        	    {
        	        NEW2 = (pANTLR3_COMMON_TOKEN) MATCHT(NEW, &FOLLOW_NEW_in_complexStatement478); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_NEW; stream_NEW->add(stream_NEW, NEW2, NULL);

        	        FOLLOWPUSH(FOLLOW_statement_in_complexStatement480);
        	        statement3=statement(ctx, true);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }

        	        CREATE_stream_statement; stream_statement->add(stream_statement, statement3.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 105:25: -> ^( NEWSTATEMENT statement )
        	        	{
        	        	    // DataPath.g:105:28: ^( NEWSTATEMENT statement )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, NEWSTATEMENT, (pANTLR3_UINT8)"NEWSTATEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:106:5: statement[false]
        	    {
        	        FOLLOWPUSH(FOLLOW_statement_in_complexStatement495);
        	        statement4=statement(ctx, false);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }

        	        CREATE_stream_statement; stream_statement->add(stream_statement, statement4.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : statement
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 106:22: -> ^( OLDSTATEMENT statement )
        	        	{
        	        	    // DataPath.g:106:25: ^( OLDSTATEMENT statement )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OLDSTATEMENT, (pANTLR3_UINT8)"OLDSTATEMENT"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_statement == NULL ? NULL : stream_statement->nextTree(stream_statement));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // DataPath.g:107:5: DELETE delStmt SEMICOLON
        	    {
        	        DELETE5 = (pANTLR3_COMMON_TOKEN) MATCHT(DELETE, &FOLLOW_DELETE_in_complexStatement510); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_DELETE; stream_DELETE->add(stream_DELETE, DELETE5, NULL);

        	        FOLLOWPUSH(FOLLOW_delStmt_in_complexStatement512);
        	        delStmt6=delStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }

        	        CREATE_stream_delStmt; stream_delStmt->add(stream_delStmt, delStmt6.tree, NULL);
        	        SEMICOLON7 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement514); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON7, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : delStmt
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 107:30: -> delStmt
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_delStmt == NULL ? NULL : stream_delStmt->nextTree(stream_delStmt));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // DataPath.g:108:5: CREATE crStmt SEMICOLON
        	    {
        	        CREATE8 = (pANTLR3_COMMON_TOKEN) MATCHT(CREATE, &FOLLOW_CREATE_in_complexStatement524); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_CREATE; stream_CREATE->add(stream_CREATE, CREATE8, NULL);

        	        FOLLOWPUSH(FOLLOW_crStmt_in_complexStatement526);
        	        crStmt9=crStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }

        	        CREATE_stream_crStmt; stream_crStmt->add(stream_crStmt, crStmt9.tree, NULL);
        	        SEMICOLON10 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement528); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON10, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : crStmt
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 108:29: -> crStmt
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_crStmt == NULL ? NULL : stream_crStmt->nextTree(stream_crStmt));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // DataPath.g:109:5: DROP drStmt SEMICOLON
        	    {
        	        DROP11 = (pANTLR3_COMMON_TOKEN) MATCHT(DROP, &FOLLOW_DROP_in_complexStatement538); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_DROP; stream_DROP->add(stream_DROP, DROP11, NULL);

        	        FOLLOWPUSH(FOLLOW_drStmt_in_complexStatement540);
        	        drStmt12=drStmt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }

        	        CREATE_stream_drStmt; stream_drStmt->add(stream_drStmt, drStmt12.tree, NULL);
        	        SEMICOLON13 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement543); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON13, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : drStmt
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 109:28: -> drStmt
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_drStmt == NULL ? NULL : stream_drStmt->nextTree(stream_drStmt));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 6:
        	    // DataPath.g:110:5: FLUSH SEMICOLON
        	    {
        	        FLUSH14 = (pANTLR3_COMMON_TOKEN) MATCHT(FLUSH, &FOLLOW_FLUSH_in_complexStatement553); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_FLUSH; stream_FLUSH->add(stream_FLUSH, FLUSH14, NULL);

        	        SEMICOLON15 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement555); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON15, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 110:21: -> FLUSHTOKEN
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FLUSHTOKEN, (pANTLR3_UINT8)"FLUSHTOKEN"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 7:
        	    // DataPath.g:111:5: QUIT SEMICOLON
        	    {
        	        QUIT16 = (pANTLR3_COMMON_TOKEN) MATCHT(QUIT, &FOLLOW_QUIT_in_complexStatement565); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_QUIT; stream_QUIT->add(stream_QUIT, QUIT16, NULL);

        	        SEMICOLON17 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement567); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON17, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 111:20: -> QUITTOKEN
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUITTOKEN, (pANTLR3_UINT8)"QUITTOKEN"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 8:
        	    // DataPath.g:112:5: r= RUN QUERRY i+= ID ( COMMA i+= ID )* SEMICOLON
        	    {
        	        r = (pANTLR3_COMMON_TOKEN) MATCHT(RUN, &FOLLOW_RUN_in_complexStatement579); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_RUN; stream_RUN->add(stream_RUN, r, NULL);

        	        QUERRY18 = (pANTLR3_COMMON_TOKEN) MATCHT(QUERRY, &FOLLOW_QUERRY_in_complexStatement581); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_QUERRY; stream_QUERRY->add(stream_QUERRY, QUERRY18, NULL);

        	        i = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_complexStatement585); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, i, NULL);

        	        if (list_i == NULL)
        	        {
        	            list_i=ctx->vectors->newVector(ctx->vectors);
        	        }
        	        list_i->add(list_i, i, NULL);

        	        // DataPath.g:112:24: ( COMMA i+= ID )*

        	        for (;;)
        	        {
        	            int alt2=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt2=1;
        	            	}
        	                break;

        	            }

        	            switch (alt2) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:112:25: COMMA i+= ID
        	        	    {
        	        	        COMMA19 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_complexStatement588); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecomplexStatementEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA19, NULL);

        	        	        i = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_complexStatement592); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecomplexStatementEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_ID; stream_ID->add(stream_ID, i, NULL);

        	        	        if (list_i == NULL)
        	        	        {
        	        	            list_i=ctx->vectors->newVector(ctx->vectors);
        	        	        }
        	        	        list_i->add(list_i, i, NULL);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop2;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop2: ; /* Jump out to here if this rule does not match */

        	        SEMICOLON20 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_complexStatement596); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON20, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : i
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : i
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_i;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_i=antlr3RewriteRuleTOKENStreamNewAEV(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token i", list_i); 
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 112:49: -> ^( RUN__[$r] $i)
        	        	{
        	        	    // DataPath.g:112:52: ^( RUN__[$r] $i)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, RUN__, TOKTEXT(r))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, RUN__, (pANTLR3_UINT8)r)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_i == NULL ? NULL : stream_i->nextNode(stream_i));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_i != NULL) stream_i->free(stream_i);
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 9:
        	    // DataPath.g:113:5: COMMENT
        	    {
        	        COMMENT21 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMENT, &FOLLOW_COMMENT_in_complexStatement612); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecomplexStatementEx;
        	        }
        	         
        	        CREATE_stream_COMMENT; stream_COMMENT->add(stream_COMMENT, COMMENT21, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 113:13: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecomplexStatementEx; /* Prevent compiler warnings */
    rulecomplexStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NEW != NULL) stream_NEW->free(stream_NEW);
        if (stream_RUN != NULL) stream_RUN->free(stream_RUN);
        if (stream_CREATE != NULL) stream_CREATE->free(stream_CREATE);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_QUERRY != NULL) stream_QUERRY->free(stream_QUERRY);
        if (stream_DELETE != NULL) stream_DELETE->free(stream_DELETE);
        if (stream_FLUSH != NULL) stream_FLUSH->free(stream_FLUSH);
        if (stream_COMMENT != NULL) stream_COMMENT->free(stream_COMMENT);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_DROP != NULL) stream_DROP->free(stream_DROP);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_QUIT != NULL) stream_QUIT->free(stream_QUIT);
        if (stream_statement != NULL) stream_statement->free(stream_statement);
        if (stream_crStmt != NULL) stream_crStmt->free(stream_crStmt);
        if (stream_drStmt != NULL) stream_drStmt->free(stream_drStmt);
        if (stream_delStmt != NULL) stream_delStmt->free(stream_delStmt);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end complexStatement */

/** 
 * $ANTLR start statement
 * DataPath.g:116:1: statement[bool isNew] : ( scanner[isNew] | waypoint[isNew] | query[isNew] | writer[isNew] );
 */
static DataPathParser_statement_return
statement(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_statement_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_scanner_return scanner22;
    #undef	RETURN_TYPE_scanner22
    #define	RETURN_TYPE_scanner22 DataPathParser_scanner_return

    DataPathParser_waypoint_return waypoint23;
    #undef	RETURN_TYPE_waypoint23
    #define	RETURN_TYPE_waypoint23 DataPathParser_waypoint_return

    DataPathParser_query_return query24;
    #undef	RETURN_TYPE_query24
    #define	RETURN_TYPE_query24 DataPathParser_query_return

    DataPathParser_writer_return writer25;
    #undef	RETURN_TYPE_writer25
    #define	RETURN_TYPE_writer25 DataPathParser_writer_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    scanner22.tree = NULL;
    waypoint23.tree = NULL;
    query24.tree = NULL;
    writer25.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  DataPath.g:117:5: ( scanner[isNew] | waypoint[isNew] | query[isNew] | writer[isNew] )
            
            ANTLR3_UINT32 alt4;

            alt4=4;

            switch ( LA(1) ) 
            {
            case SCANNER:
            	{
            		alt4=1;
            	}
                break;
            case WAYPOINT:
            	{
            		alt4=2;
            	}
                break;
            case QUERRY:
            	{
            		alt4=3;
            	}
                break;
            case WRITER:
            	{
            		alt4=4;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto rulestatementEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // DataPath.g:117:7: scanner[isNew]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_scanner_in_statement632);
        	        scanner22=scanner(ctx, isNew);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, scanner22.tree);

        	    }
        	    break;
        	case 2:
        	    // DataPath.g:118:7: waypoint[isNew]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_waypoint_in_statement641);
        	        waypoint23=waypoint(ctx, isNew);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, waypoint23.tree);

        	    }
        	    break;
        	case 3:
        	    // DataPath.g:119:7: query[isNew]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_query_in_statement650);
        	        query24=query(ctx, isNew);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, query24.tree);

        	    }
        	    break;
        	case 4:
        	    // DataPath.g:120:7: writer[isNew]
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_writer_in_statement659);
        	        writer25=writer(ctx, isNew);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulestatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, writer25.tree);

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulestatementEx; /* Prevent compiler warnings */
    rulestatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end statement */

/** 
 * $ANTLR start delStmt
 * DataPath.g:123:1: delStmt : ( WAYPOINT ID ( COMMA ID )* -> ( ^( DELWAYPOINT ID ) )+ | QUERRY ID ( COMMA ID )* -> ( ^( DELQUERY ID ) )+ );
 */
static DataPathParser_delStmt_return
delStmt(pDataPathParser ctx)
{   
    DataPathParser_delStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    WAYPOINT26;
    pANTLR3_COMMON_TOKEN    ID27;
    pANTLR3_COMMON_TOKEN    COMMA28;
    pANTLR3_COMMON_TOKEN    ID29;
    pANTLR3_COMMON_TOKEN    QUERRY30;
    pANTLR3_COMMON_TOKEN    ID31;
    pANTLR3_COMMON_TOKEN    COMMA32;
    pANTLR3_COMMON_TOKEN    ID33;

    pANTLR3_BASE_TREE WAYPOINT26_tree;
    pANTLR3_BASE_TREE ID27_tree;
    pANTLR3_BASE_TREE COMMA28_tree;
    pANTLR3_BASE_TREE ID29_tree;
    pANTLR3_BASE_TREE QUERRY30_tree;
    pANTLR3_BASE_TREE ID31_tree;
    pANTLR3_BASE_TREE COMMA32_tree;
    pANTLR3_BASE_TREE ID33_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_WAYPOINT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUERRY;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;

    /* Initialize rule variables
     */


    root_0 = NULL;

    WAYPOINT26       = NULL;
    ID27       = NULL;
    COMMA28       = NULL;
    ID29       = NULL;
    QUERRY30       = NULL;
    ID31       = NULL;
    COMMA32       = NULL;
    ID33       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    WAYPOINT26_tree   = NULL;
    ID27_tree   = NULL;
    COMMA28_tree   = NULL;
    ID29_tree   = NULL;
    QUERRY30_tree   = NULL;
    ID31_tree   = NULL;
    COMMA32_tree   = NULL;
    ID33_tree   = NULL;

    stream_WAYPOINT   = NULL;
    #define CREATE_stream_WAYPOINT  if (stream_WAYPOINT == NULL) {stream_WAYPOINT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token WAYPOINT"); } 
    stream_QUERRY   = NULL;
    #define CREATE_stream_QUERRY  if (stream_QUERRY == NULL) {stream_QUERRY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUERRY"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:124:3: ( WAYPOINT ID ( COMMA ID )* -> ( ^( DELWAYPOINT ID ) )+ | QUERRY ID ( COMMA ID )* -> ( ^( DELQUERY ID ) )+ )
            
            ANTLR3_UINT32 alt7;

            alt7=2;

            switch ( LA(1) ) 
            {
            case WAYPOINT:
            	{
            		alt7=1;
            	}
                break;
            case QUERRY:
            	{
            		alt7=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 7;
                EXCEPTION->state        = 0;


                goto ruledelStmtEx;
            }

            switch (alt7) 
            {
        	case 1:
        	    // DataPath.g:124:5: WAYPOINT ID ( COMMA ID )*
        	    {
        	        WAYPOINT26 = (pANTLR3_COMMON_TOKEN) MATCHT(WAYPOINT, &FOLLOW_WAYPOINT_in_delStmt675); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledelStmtEx;
        	        }
        	         
        	        CREATE_stream_WAYPOINT; stream_WAYPOINT->add(stream_WAYPOINT, WAYPOINT26, NULL);

        	        ID27 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_delStmt678); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledelStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID27, NULL);


        	        // DataPath.g:124:18: ( COMMA ID )*

        	        for (;;)
        	        {
        	            int alt5=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt5=1;
        	            	}
        	                break;

        	            }

        	            switch (alt5) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:124:23: COMMA ID
        	        	    {
        	        	        COMMA28 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_delStmt685); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledelStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA28, NULL);

        	        	        ID29 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_delStmt687); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledelStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID29, NULL);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop5;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop5: ; /* Jump out to here if this rule does not match */


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 124:36: -> ( ^( DELWAYPOINT ID ) )+
        	        	{
        	        	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
        	        	    {
        	        	        CONSTRUCTEX();
        	        	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	    }
        	        	    else
        	        	    {
        	        	    	while ( (stream_ID->hasNext(stream_ID))  ) {
        	        	    		// DataPath.g:124:39: ^( DELWAYPOINT ID )
        	        	    		{
        	        	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELWAYPOINT, (pANTLR3_UINT8)"DELWAYPOINT"), root_1));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    		}

        	        	    	}
        	        	    	stream_ID->reset(stream_ID);

        	        	    }
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:125:5: QUERRY ID ( COMMA ID )*
        	    {
        	        QUERRY30 = (pANTLR3_COMMON_TOKEN) MATCHT(QUERRY, &FOLLOW_QUERRY_in_delStmt706); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledelStmtEx;
        	        }
        	         
        	        CREATE_stream_QUERRY; stream_QUERRY->add(stream_QUERRY, QUERRY30, NULL);

        	        ID31 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_delStmt709); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruledelStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID31, NULL);


        	        // DataPath.g:125:16: ( COMMA ID )*

        	        for (;;)
        	        {
        	            int alt6=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt6=1;
        	            	}
        	                break;

        	            }

        	            switch (alt6) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:125:21: COMMA ID
        	        	    {
        	        	        COMMA32 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_delStmt716); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledelStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA32, NULL);

        	        	        ID33 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_delStmt718); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruledelStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID33, NULL);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop6;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop6: ; /* Jump out to here if this rule does not match */


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 125:34: -> ( ^( DELQUERY ID ) )+
        	        	{
        	        	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
        	        	    {
        	        	        CONSTRUCTEX();
        	        	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	    }
        	        	    else
        	        	    {
        	        	    	while ( (stream_ID->hasNext(stream_ID))  ) {
        	        	    		// DataPath.g:125:37: ^( DELQUERY ID )
        	        	    		{
        	        	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, DELQUERY, (pANTLR3_UINT8)"DELQUERY"), root_1));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    		}

        	        	    	}
        	        	    	stream_ID->reset(stream_ID);

        	        	    }
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruledelStmtEx; /* Prevent compiler warnings */
    ruledelStmtEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_WAYPOINT != NULL) stream_WAYPOINT->free(stream_WAYPOINT);
        if (stream_QUERRY != NULL) stream_QUERRY->free(stream_QUERRY);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end delStmt */

/** 
 * $ANTLR start crStmt
 * DataPath.g:128:1: crStmt : ( DATATYPE ID ( FROM s= STRING )? lstSyn[(char*)$ID.text->chars] -> ^( CRDATATYPE ID $s) lstSyn | FUNCTION ID LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )? -> ^( FUNCTION ID $s dType lstArgsFc ) | OPKEYWORD STRING LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )? -> ^( OPDEF STRING $s dType lstArgsFc ) | RELATION ID LPAREN tpAttList RPAREN -> ^( CRRELATION ID tpAttList ) | GLA ID ( FROM s= STRING )? LPAREN lstArgsFc RPAREN '->' LPAREN lstRetFc RPAREN -> ^( CRGLA ID $s ^( TPATT lstRetFc ) ^( TPATT lstArgsFc ) ) );
 */
static DataPathParser_crStmt_return
crStmt(pDataPathParser ctx)
{   
    DataPathParser_crStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    DATATYPE34;
    pANTLR3_COMMON_TOKEN    ID35;
    pANTLR3_COMMON_TOKEN    FROM36;
    pANTLR3_COMMON_TOKEN    FUNCTION38;
    pANTLR3_COMMON_TOKEN    ID39;
    pANTLR3_COMMON_TOKEN    LPAREN40;
    pANTLR3_COMMON_TOKEN    RPAREN42;
    pANTLR3_COMMON_TOKEN    string_literal43;
    pANTLR3_COMMON_TOKEN    FROM45;
    pANTLR3_COMMON_TOKEN    OPKEYWORD46;
    pANTLR3_COMMON_TOKEN    STRING47;
    pANTLR3_COMMON_TOKEN    LPAREN48;
    pANTLR3_COMMON_TOKEN    RPAREN50;
    pANTLR3_COMMON_TOKEN    string_literal51;
    pANTLR3_COMMON_TOKEN    FROM53;
    pANTLR3_COMMON_TOKEN    RELATION54;
    pANTLR3_COMMON_TOKEN    ID55;
    pANTLR3_COMMON_TOKEN    LPAREN56;
    pANTLR3_COMMON_TOKEN    RPAREN58;
    pANTLR3_COMMON_TOKEN    GLA59;
    pANTLR3_COMMON_TOKEN    ID60;
    pANTLR3_COMMON_TOKEN    FROM61;
    pANTLR3_COMMON_TOKEN    LPAREN62;
    pANTLR3_COMMON_TOKEN    RPAREN64;
    pANTLR3_COMMON_TOKEN    string_literal65;
    pANTLR3_COMMON_TOKEN    LPAREN66;
    pANTLR3_COMMON_TOKEN    RPAREN68;
    DataPathParser_lstSyn_return lstSyn37;
    #undef	RETURN_TYPE_lstSyn37
    #define	RETURN_TYPE_lstSyn37 DataPathParser_lstSyn_return

    DataPathParser_lstArgsFc_return lstArgsFc41;
    #undef	RETURN_TYPE_lstArgsFc41
    #define	RETURN_TYPE_lstArgsFc41 DataPathParser_lstArgsFc_return

    DataPathParser_dType_return dType44;
    #undef	RETURN_TYPE_dType44
    #define	RETURN_TYPE_dType44 DataPathParser_dType_return

    DataPathParser_lstArgsFc_return lstArgsFc49;
    #undef	RETURN_TYPE_lstArgsFc49
    #define	RETURN_TYPE_lstArgsFc49 DataPathParser_lstArgsFc_return

    DataPathParser_dType_return dType52;
    #undef	RETURN_TYPE_dType52
    #define	RETURN_TYPE_dType52 DataPathParser_dType_return

    DataPathParser_tpAttList_return tpAttList57;
    #undef	RETURN_TYPE_tpAttList57
    #define	RETURN_TYPE_tpAttList57 DataPathParser_tpAttList_return

    DataPathParser_lstArgsFc_return lstArgsFc63;
    #undef	RETURN_TYPE_lstArgsFc63
    #define	RETURN_TYPE_lstArgsFc63 DataPathParser_lstArgsFc_return

    DataPathParser_lstRetFc_return lstRetFc67;
    #undef	RETURN_TYPE_lstRetFc67
    #define	RETURN_TYPE_lstRetFc67 DataPathParser_lstRetFc_return

    pANTLR3_BASE_TREE s_tree;
    pANTLR3_BASE_TREE DATATYPE34_tree;
    pANTLR3_BASE_TREE ID35_tree;
    pANTLR3_BASE_TREE FROM36_tree;
    pANTLR3_BASE_TREE FUNCTION38_tree;
    pANTLR3_BASE_TREE ID39_tree;
    pANTLR3_BASE_TREE LPAREN40_tree;
    pANTLR3_BASE_TREE RPAREN42_tree;
    pANTLR3_BASE_TREE string_literal43_tree;
    pANTLR3_BASE_TREE FROM45_tree;
    pANTLR3_BASE_TREE OPKEYWORD46_tree;
    pANTLR3_BASE_TREE STRING47_tree;
    pANTLR3_BASE_TREE LPAREN48_tree;
    pANTLR3_BASE_TREE RPAREN50_tree;
    pANTLR3_BASE_TREE string_literal51_tree;
    pANTLR3_BASE_TREE FROM53_tree;
    pANTLR3_BASE_TREE RELATION54_tree;
    pANTLR3_BASE_TREE ID55_tree;
    pANTLR3_BASE_TREE LPAREN56_tree;
    pANTLR3_BASE_TREE RPAREN58_tree;
    pANTLR3_BASE_TREE GLA59_tree;
    pANTLR3_BASE_TREE ID60_tree;
    pANTLR3_BASE_TREE FROM61_tree;
    pANTLR3_BASE_TREE LPAREN62_tree;
    pANTLR3_BASE_TREE RPAREN64_tree;
    pANTLR3_BASE_TREE string_literal65_tree;
    pANTLR3_BASE_TREE LPAREN66_tree;
    pANTLR3_BASE_TREE RPAREN68_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FUNCTION;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RELATION;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DATATYPE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_GLA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_110;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FROM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_OPKEYWORD;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_lstSyn;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_lstRetFc;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_tpAttList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_dType;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_lstArgsFc;
    /* Initialize rule variables
     */


    root_0 = NULL;

    s       = NULL;
    DATATYPE34       = NULL;
    ID35       = NULL;
    FROM36       = NULL;
    FUNCTION38       = NULL;
    ID39       = NULL;
    LPAREN40       = NULL;
    RPAREN42       = NULL;
    string_literal43       = NULL;
    FROM45       = NULL;
    OPKEYWORD46       = NULL;
    STRING47       = NULL;
    LPAREN48       = NULL;
    RPAREN50       = NULL;
    string_literal51       = NULL;
    FROM53       = NULL;
    RELATION54       = NULL;
    ID55       = NULL;
    LPAREN56       = NULL;
    RPAREN58       = NULL;
    GLA59       = NULL;
    ID60       = NULL;
    FROM61       = NULL;
    LPAREN62       = NULL;
    RPAREN64       = NULL;
    string_literal65       = NULL;
    LPAREN66       = NULL;
    RPAREN68       = NULL;
    lstSyn37.tree = NULL;
    lstArgsFc41.tree = NULL;
    dType44.tree = NULL;
    lstArgsFc49.tree = NULL;
    dType52.tree = NULL;
    tpAttList57.tree = NULL;
    lstArgsFc63.tree = NULL;
    lstRetFc67.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    s_tree   = NULL;
    DATATYPE34_tree   = NULL;
    ID35_tree   = NULL;
    FROM36_tree   = NULL;
    FUNCTION38_tree   = NULL;
    ID39_tree   = NULL;
    LPAREN40_tree   = NULL;
    RPAREN42_tree   = NULL;
    string_literal43_tree   = NULL;
    FROM45_tree   = NULL;
    OPKEYWORD46_tree   = NULL;
    STRING47_tree   = NULL;
    LPAREN48_tree   = NULL;
    RPAREN50_tree   = NULL;
    string_literal51_tree   = NULL;
    FROM53_tree   = NULL;
    RELATION54_tree   = NULL;
    ID55_tree   = NULL;
    LPAREN56_tree   = NULL;
    RPAREN58_tree   = NULL;
    GLA59_tree   = NULL;
    ID60_tree   = NULL;
    FROM61_tree   = NULL;
    LPAREN62_tree   = NULL;
    RPAREN64_tree   = NULL;
    string_literal65_tree   = NULL;
    LPAREN66_tree   = NULL;
    RPAREN68_tree   = NULL;

    stream_FUNCTION   = NULL;
    #define CREATE_stream_FUNCTION  if (stream_FUNCTION == NULL) {stream_FUNCTION = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FUNCTION"); } 
    stream_RELATION   = NULL;
    #define CREATE_stream_RELATION  if (stream_RELATION == NULL) {stream_RELATION = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RELATION"); } 
    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_DATATYPE   = NULL;
    #define CREATE_stream_DATATYPE  if (stream_DATATYPE == NULL) {stream_DATATYPE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DATATYPE"); } 
    stream_GLA   = NULL;
    #define CREATE_stream_GLA  if (stream_GLA == NULL) {stream_GLA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token GLA"); } 
    stream_110   = NULL;
    #define CREATE_stream_110  if (stream_110 == NULL) {stream_110 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 110"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_FROM   = NULL;
    #define CREATE_stream_FROM  if (stream_FROM == NULL) {stream_FROM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FROM"); } 
    stream_OPKEYWORD   = NULL;
    #define CREATE_stream_OPKEYWORD  if (stream_OPKEYWORD == NULL) {stream_OPKEYWORD = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token OPKEYWORD"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_STRING   = NULL;
    #define CREATE_stream_STRING  if (stream_STRING == NULL) {stream_STRING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING"); } 
    stream_lstSyn   = NULL;
    #define CREATE_stream_lstSyn  if (stream_lstSyn == NULL) {stream_lstSyn = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule lstSyn"); }
    stream_lstRetFc   = NULL;
    #define CREATE_stream_lstRetFc  if (stream_lstRetFc == NULL) {stream_lstRetFc = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule lstRetFc"); }
    stream_tpAttList   = NULL;
    #define CREATE_stream_tpAttList  if (stream_tpAttList == NULL) {stream_tpAttList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule tpAttList"); }
    stream_dType   = NULL;
    #define CREATE_stream_dType  if (stream_dType == NULL) {stream_dType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule dType"); }
    stream_lstArgsFc   = NULL;
    #define CREATE_stream_lstArgsFc  if (stream_lstArgsFc == NULL) {stream_lstArgsFc = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule lstArgsFc"); }

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:129:3: ( DATATYPE ID ( FROM s= STRING )? lstSyn[(char*)$ID.text->chars] -> ^( CRDATATYPE ID $s) lstSyn | FUNCTION ID LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )? -> ^( FUNCTION ID $s dType lstArgsFc ) | OPKEYWORD STRING LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )? -> ^( OPDEF STRING $s dType lstArgsFc ) | RELATION ID LPAREN tpAttList RPAREN -> ^( CRRELATION ID tpAttList ) | GLA ID ( FROM s= STRING )? LPAREN lstArgsFc RPAREN '->' LPAREN lstRetFc RPAREN -> ^( CRGLA ID $s ^( TPATT lstRetFc ) ^( TPATT lstArgsFc ) ) )
            
            ANTLR3_UINT32 alt12;

            alt12=5;

            switch ( LA(1) ) 
            {
            case DATATYPE:
            	{
            		alt12=1;
            	}
                break;
            case FUNCTION:
            	{
            		alt12=2;
            	}
                break;
            case OPKEYWORD:
            	{
            		alt12=3;
            	}
                break;
            case RELATION:
            	{
            		alt12=4;
            	}
                break;
            case GLA:
            	{
            		alt12=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 12;
                EXCEPTION->state        = 0;


                goto rulecrStmtEx;
            }

            switch (alt12) 
            {
        	case 1:
        	    // DataPath.g:129:5: DATATYPE ID ( FROM s= STRING )? lstSyn[(char*)$ID.text->chars]
        	    {
        	        DATATYPE34 = (pANTLR3_COMMON_TOKEN) MATCHT(DATATYPE, &FOLLOW_DATATYPE_in_crStmt744); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_DATATYPE; stream_DATATYPE->add(stream_DATATYPE, DATATYPE34, NULL);

        	        ID35 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_crStmt746); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID35, NULL);


        	        // DataPath.g:129:17: ( FROM s= STRING )?
        	        {
        	            int alt8=2;
        	            switch ( LA(1) ) 
        	            {
        	                case FROM:
        	                	{
        	                		alt8=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt8) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:129:18: FROM s= STRING
        	        	    {
        	        	        FROM36 = (pANTLR3_COMMON_TOKEN) MATCHT(FROM, &FOLLOW_FROM_in_crStmt749); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_FROM; stream_FROM->add(stream_FROM, FROM36, NULL);

        	        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_crStmt753); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, s, NULL);


        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_lstSyn_in_crStmt758);
        	        lstSyn37=lstSyn(ctx, (char*)(ID35->getText(ID35))->chars);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_lstSyn; stream_lstSyn->add(stream_lstSyn, lstSyn37.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : s, lstSyn, ID
        	         * token labels      : s
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_s;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_s=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", s);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 129:66: -> ^( CRDATATYPE ID $s) lstSyn
        	        	{
        	        	    // DataPath.g:129:69: ^( CRDATATYPE ID $s)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CRDATATYPE, (pANTLR3_UINT8)"CRDATATYPE"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextNode(stream_s));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_lstSyn == NULL ? NULL : stream_lstSyn->nextTree(stream_lstSyn));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_s != NULL) stream_s->free(stream_s); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:130:5: FUNCTION ID LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )?
        	    {
        	        FUNCTION38 = (pANTLR3_COMMON_TOKEN) MATCHT(FUNCTION, &FOLLOW_FUNCTION_in_crStmt778); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_FUNCTION; stream_FUNCTION->add(stream_FUNCTION, FUNCTION38, NULL);

        	        ID39 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_crStmt780); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID39, NULL);

        	        LPAREN40 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_crStmt782); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN40, NULL);

        	        FOLLOWPUSH(FOLLOW_lstArgsFc_in_crStmt784);
        	        lstArgsFc41=lstArgsFc(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_lstArgsFc; stream_lstArgsFc->add(stream_lstArgsFc, lstArgsFc41.tree, NULL);
        	        RPAREN42 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_crStmt786); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN42, NULL);

        	        string_literal43 = (pANTLR3_COMMON_TOKEN) MATCHT(110, &FOLLOW_110_in_crStmt788); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_110; stream_110->add(stream_110, string_literal43, NULL);

        	        FOLLOWPUSH(FOLLOW_dType_in_crStmt790);
        	        dType44=dType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_dType; stream_dType->add(stream_dType, dType44.tree, NULL);

        	        // DataPath.g:130:52: ( FROM s= STRING )?
        	        {
        	            int alt9=2;
        	            switch ( LA(1) ) 
        	            {
        	                case FROM:
        	                	{
        	                		alt9=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt9) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:130:53: FROM s= STRING
        	        	    {
        	        	        FROM45 = (pANTLR3_COMMON_TOKEN) MATCHT(FROM, &FOLLOW_FROM_in_crStmt793); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_FROM; stream_FROM->add(stream_FROM, FROM45, NULL);

        	        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_crStmt797); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, s, NULL);


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : lstArgsFc, FUNCTION, s, ID, dType
        	         * token labels      : s
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_s;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_s=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", s);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 130:69: -> ^( FUNCTION ID $s dType lstArgsFc )
        	        	{
        	        	    // DataPath.g:130:72: ^( FUNCTION ID $s dType lstArgsFc )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_FUNCTION == NULL ? NULL : stream_FUNCTION->nextNode(stream_FUNCTION), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextNode(stream_s));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_dType == NULL ? NULL : stream_dType->nextTree(stream_dType));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_lstArgsFc == NULL ? NULL : stream_lstArgsFc->nextTree(stream_lstArgsFc));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_s != NULL) stream_s->free(stream_s); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // DataPath.g:131:5: OPKEYWORD STRING LPAREN lstArgsFc RPAREN '->' dType ( FROM s= STRING )?
        	    {
        	        OPKEYWORD46 = (pANTLR3_COMMON_TOKEN) MATCHT(OPKEYWORD, &FOLLOW_OPKEYWORD_in_crStmt820); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_OPKEYWORD; stream_OPKEYWORD->add(stream_OPKEYWORD, OPKEYWORD46, NULL);

        	        STRING47 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_crStmt822); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, STRING47, NULL);

        	        LPAREN48 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_crStmt824); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN48, NULL);

        	        FOLLOWPUSH(FOLLOW_lstArgsFc_in_crStmt826);
        	        lstArgsFc49=lstArgsFc(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_lstArgsFc; stream_lstArgsFc->add(stream_lstArgsFc, lstArgsFc49.tree, NULL);
        	        RPAREN50 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_crStmt828); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN50, NULL);

        	        string_literal51 = (pANTLR3_COMMON_TOKEN) MATCHT(110, &FOLLOW_110_in_crStmt830); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_110; stream_110->add(stream_110, string_literal51, NULL);

        	        FOLLOWPUSH(FOLLOW_dType_in_crStmt832);
        	        dType52=dType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_dType; stream_dType->add(stream_dType, dType52.tree, NULL);

        	        // DataPath.g:131:57: ( FROM s= STRING )?
        	        {
        	            int alt10=2;
        	            switch ( LA(1) ) 
        	            {
        	                case FROM:
        	                	{
        	                		alt10=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt10) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:131:58: FROM s= STRING
        	        	    {
        	        	        FROM53 = (pANTLR3_COMMON_TOKEN) MATCHT(FROM, &FOLLOW_FROM_in_crStmt835); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_FROM; stream_FROM->add(stream_FROM, FROM53, NULL);

        	        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_crStmt839); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, s, NULL);


        	        	    }
        	        	    break;

        	            }
        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : dType, STRING, s, lstArgsFc
        	         * token labels      : s
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_s;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_s=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", s);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 131:74: -> ^( OPDEF STRING $s dType lstArgsFc )
        	        	{
        	        	    // DataPath.g:131:77: ^( OPDEF STRING $s dType lstArgsFc )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPDEF, (pANTLR3_UINT8)"OPDEF"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_STRING == NULL ? NULL : stream_STRING->nextNode(stream_STRING));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextNode(stream_s));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_dType == NULL ? NULL : stream_dType->nextTree(stream_dType));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_lstArgsFc == NULL ? NULL : stream_lstArgsFc->nextTree(stream_lstArgsFc));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_s != NULL) stream_s->free(stream_s); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 4:
        	    // DataPath.g:132:5: RELATION ID LPAREN tpAttList RPAREN
        	    {
        	        RELATION54 = (pANTLR3_COMMON_TOKEN) MATCHT(RELATION, &FOLLOW_RELATION_in_crStmt862); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RELATION; stream_RELATION->add(stream_RELATION, RELATION54, NULL);

        	        ID55 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_crStmt864); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID55, NULL);

        	        LPAREN56 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_crStmt866); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN56, NULL);

        	        FOLLOWPUSH(FOLLOW_tpAttList_in_crStmt868);
        	        tpAttList57=tpAttList(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_tpAttList; stream_tpAttList->add(stream_tpAttList, tpAttList57.tree, NULL);
        	        RPAREN58 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_crStmt870); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN58, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID, tpAttList
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 132:41: -> ^( CRRELATION ID tpAttList )
        	        	{
        	        	    // DataPath.g:132:44: ^( CRRELATION ID tpAttList )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CRRELATION, (pANTLR3_UINT8)"CRRELATION"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_tpAttList == NULL ? NULL : stream_tpAttList->nextTree(stream_tpAttList));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 5:
        	    // DataPath.g:133:5: GLA ID ( FROM s= STRING )? LPAREN lstArgsFc RPAREN '->' LPAREN lstRetFc RPAREN
        	    {
        	        GLA59 = (pANTLR3_COMMON_TOKEN) MATCHT(GLA, &FOLLOW_GLA_in_crStmt886); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_GLA; stream_GLA->add(stream_GLA, GLA59, NULL);

        	        ID60 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_crStmt888); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID60, NULL);


        	        // DataPath.g:133:12: ( FROM s= STRING )?
        	        {
        	            int alt11=2;
        	            switch ( LA(1) ) 
        	            {
        	                case FROM:
        	                	{
        	                		alt11=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt11) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:133:13: FROM s= STRING
        	        	    {
        	        	        FROM61 = (pANTLR3_COMMON_TOKEN) MATCHT(FROM, &FOLLOW_FROM_in_crStmt891); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_FROM; stream_FROM->add(stream_FROM, FROM61, NULL);

        	        	        s = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_crStmt895); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulecrStmtEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, s, NULL);


        	        	    }
        	        	    break;

        	            }
        	        }
        	        LPAREN62 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_crStmt899); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN62, NULL);

        	        FOLLOWPUSH(FOLLOW_lstArgsFc_in_crStmt901);
        	        lstArgsFc63=lstArgsFc(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_lstArgsFc; stream_lstArgsFc->add(stream_lstArgsFc, lstArgsFc63.tree, NULL);
        	        RPAREN64 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_crStmt903); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN64, NULL);

        	        string_literal65 = (pANTLR3_COMMON_TOKEN) MATCHT(110, &FOLLOW_110_in_crStmt905); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_110; stream_110->add(stream_110, string_literal65, NULL);

        	        LPAREN66 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_crStmt907); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN66, NULL);

        	        FOLLOWPUSH(FOLLOW_lstRetFc_in_crStmt909);
        	        lstRetFc67=lstRetFc(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }

        	        CREATE_stream_lstRetFc; stream_lstRetFc->add(stream_lstRetFc, lstRetFc67.tree, NULL);
        	        RPAREN68 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_crStmt911); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulecrStmtEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN68, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : s, ID, lstRetFc, lstArgsFc
        	         * token labels      : s
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_s;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_s=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token s", s);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 133:81: -> ^( CRGLA ID $s ^( TPATT lstRetFc ) ^( TPATT lstArgsFc ) )
        	        	{
        	        	    // DataPath.g:133:84: ^( CRGLA ID $s ^( TPATT lstRetFc ) ^( TPATT lstArgsFc ) )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CRGLA, (pANTLR3_UINT8)"CRGLA"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_s == NULL ? NULL : stream_s->nextNode(stream_s));
        	        	        // DataPath.g:133:98: ^( TPATT lstRetFc )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TPATT, (pANTLR3_UINT8)"TPATT"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_lstRetFc == NULL ? NULL : stream_lstRetFc->nextTree(stream_lstRetFc));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }
        	        	        // DataPath.g:133:116: ^( TPATT lstArgsFc )
        	        	        {
        	        	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TPATT, (pANTLR3_UINT8)"TPATT"), root_2));

        	        	            ADAPTOR->addChild(ADAPTOR, root_2, stream_lstArgsFc == NULL ? NULL : stream_lstArgsFc->nextTree(stream_lstArgsFc));

        	        	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_s != NULL) stream_s->free(stream_s); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulecrStmtEx; /* Prevent compiler warnings */
    rulecrStmtEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_FUNCTION != NULL) stream_FUNCTION->free(stream_FUNCTION);
        if (stream_RELATION != NULL) stream_RELATION->free(stream_RELATION);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_DATATYPE != NULL) stream_DATATYPE->free(stream_DATATYPE);
        if (stream_GLA != NULL) stream_GLA->free(stream_GLA);
        if (stream_110 != NULL) stream_110->free(stream_110);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_FROM != NULL) stream_FROM->free(stream_FROM);
        if (stream_OPKEYWORD != NULL) stream_OPKEYWORD->free(stream_OPKEYWORD);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_STRING != NULL) stream_STRING->free(stream_STRING);
        if (stream_lstSyn != NULL) stream_lstSyn->free(stream_lstSyn);
        if (stream_lstRetFc != NULL) stream_lstRetFc->free(stream_lstRetFc);
        if (stream_tpAttList != NULL) stream_tpAttList->free(stream_tpAttList);
        if (stream_dType != NULL) stream_dType->free(stream_dType);
        if (stream_lstArgsFc != NULL) stream_lstArgsFc->free(stream_lstArgsFc);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end crStmt */

/** 
 * $ANTLR start fctName
 * DataPath.g:137:1: fctName : ( ID -> FCT[(const char*)$ID.text->chars] | STRING -> FCT[(const char*)$STRING.text->chars] );
 */
static DataPathParser_fctName_return
fctName(pDataPathParser ctx)
{   
    DataPathParser_fctName_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID69;
    pANTLR3_COMMON_TOKEN    STRING70;

    pANTLR3_BASE_TREE ID69_tree;
    pANTLR3_BASE_TREE STRING70_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID69       = NULL;
    STRING70       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID69_tree   = NULL;
    STRING70_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_STRING   = NULL;
    #define CREATE_stream_STRING  if (stream_STRING == NULL) {stream_STRING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:138:3: ( ID -> FCT[(const char*)$ID.text->chars] | STRING -> FCT[(const char*)$STRING.text->chars] )
            
            ANTLR3_UINT32 alt13;

            alt13=2;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt13=1;
            	}
                break;
            case STRING:
            	{
            		alt13=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 13;
                EXCEPTION->state        = 0;


                goto rulefctNameEx;
            }

            switch (alt13) 
            {
        	case 1:
        	    // DataPath.g:138:5: ID
        	    {
        	        ID69 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_fctName948); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefctNameEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID69, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 138:8: -> FCT[(const char*)$ID.text->chars]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FCT, TOKTEXT((const char*)(ID69->getText(ID69))->chars))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FCT, (pANTLR3_UINT8)(const char*)(ID69->getText(ID69))->chars)
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:139:5: STRING
        	    {
        	        STRING70 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_fctName959); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulefctNameEx;
        	        }
        	         
        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, STRING70, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 139:12: -> FCT[(const char*)$STRING.text->chars]
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, 
        	        	    #if 1 == 2
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, FCT, TOKTEXT((const char*)(STRING70->getText(STRING70))->chars))
        	        	    #else
        	        	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FCT, (pANTLR3_UINT8)(const char*)(STRING70->getText(STRING70))->chars)
        	        	    #endif
        	        	    );

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulefctNameEx; /* Prevent compiler warnings */
    rulefctNameEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_STRING != NULL) stream_STRING->free(stream_STRING);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end fctName */

/** 
 * $ANTLR start lstArgsFc
 * DataPath.g:142:1: lstArgsFc : ( | dType ( COMMA dType )* );
 */
static DataPathParser_lstArgsFc_return
lstArgsFc(pDataPathParser ctx)
{   
    DataPathParser_lstArgsFc_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA72;
    DataPathParser_dType_return dType71;
    #undef	RETURN_TYPE_dType71
    #define	RETURN_TYPE_dType71 DataPathParser_dType_return

    DataPathParser_dType_return dType73;
    #undef	RETURN_TYPE_dType73
    #define	RETURN_TYPE_dType73 DataPathParser_dType_return

    pANTLR3_BASE_TREE COMMA72_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA72       = NULL;
    dType71.tree = NULL;
    dType73.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA72_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  DataPath.g:143:3: ( | dType ( COMMA dType )* )
            
            ANTLR3_UINT32 alt15;

            alt15=2;

            switch ( LA(1) ) 
            {
            case RPAREN:
            	{
            		alt15=1;
            	}
                break;
            case ID:
            	{
            		alt15=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 15;
                EXCEPTION->state        = 0;


                goto rulelstArgsFcEx;
            }

            switch (alt15) 
            {
        	case 1:
        	    // DataPath.g:144:3: 
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	    }
        	    break;
        	case 2:
        	    // DataPath.g:144:5: dType ( COMMA dType )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_dType_in_lstArgsFc983);
        	        dType71=dType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelstArgsFcEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, dType71.tree);

        	        // DataPath.g:144:11: ( COMMA dType )*

        	        for (;;)
        	        {
        	            int alt14=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt14=1;
        	            	}
        	                break;

        	            }

        	            switch (alt14) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:144:17: COMMA dType
        	        	    {
        	        	        COMMA72 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_lstArgsFc991); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelstArgsFcEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_dType_in_lstArgsFc995);
        	        	        dType73=dType(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelstArgsFcEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, dType73.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop14;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop14: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelstArgsFcEx; /* Prevent compiler warnings */
    rulelstArgsFcEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end lstArgsFc */

/** 
 * $ANTLR start lstRetFc
 * DataPath.g:147:1: lstRetFc : dType ( COMMA dType )* ;
 */
static DataPathParser_lstRetFc_return
lstRetFc(pDataPathParser ctx)
{   
    DataPathParser_lstRetFc_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA75;
    DataPathParser_dType_return dType74;
    #undef	RETURN_TYPE_dType74
    #define	RETURN_TYPE_dType74 DataPathParser_dType_return

    DataPathParser_dType_return dType76;
    #undef	RETURN_TYPE_dType76
    #define	RETURN_TYPE_dType76 DataPathParser_dType_return

    pANTLR3_BASE_TREE COMMA75_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA75       = NULL;
    dType74.tree = NULL;
    dType76.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA75_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:148:3: ( dType ( COMMA dType )* )
        // DataPath.g:148:5: dType ( COMMA dType )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_dType_in_lstRetFc1010);
            dType74=dType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulelstRetFcEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, dType74.tree);

            // DataPath.g:148:11: ( COMMA dType )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // DataPath.g:148:13: COMMA dType
            	    {
            	        COMMA75 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_lstRetFc1014); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelstRetFcEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_dType_in_lstRetFc1018);
            	        dType76=dType(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelstRetFcEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, dType76.tree);

            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelstRetFcEx; /* Prevent compiler warnings */
    rulelstRetFcEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end lstRetFc */

/** 
 * $ANTLR start tpAttList
 * DataPath.g:151:1: tpAttList : tpAtt ( COMMA tpAtt )* ;
 */
static DataPathParser_tpAttList_return
tpAttList(pDataPathParser ctx)
{   
    DataPathParser_tpAttList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA78;
    DataPathParser_tpAtt_return tpAtt77;
    #undef	RETURN_TYPE_tpAtt77
    #define	RETURN_TYPE_tpAtt77 DataPathParser_tpAtt_return

    DataPathParser_tpAtt_return tpAtt79;
    #undef	RETURN_TYPE_tpAtt79
    #define	RETURN_TYPE_tpAtt79 DataPathParser_tpAtt_return

    pANTLR3_BASE_TREE COMMA78_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA78       = NULL;
    tpAtt77.tree = NULL;
    tpAtt79.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA78_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:152:3: ( tpAtt ( COMMA tpAtt )* )
        // DataPath.g:152:5: tpAtt ( COMMA tpAtt )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_tpAtt_in_tpAttList1033);
            tpAtt77=tpAtt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletpAttListEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, tpAtt77.tree);

            // DataPath.g:152:11: ( COMMA tpAtt )*

            for (;;)
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17) 
                {
            	case 1:
            	    // DataPath.g:152:16: COMMA tpAtt
            	    {
            	        COMMA78 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_tpAttList1040); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletpAttListEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_tpAtt_in_tpAttList1044);
            	        tpAtt79=tpAtt(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruletpAttListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, tpAtt79.tree);

            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletpAttListEx; /* Prevent compiler warnings */
    ruletpAttListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end tpAttList */

/** 
 * $ANTLR start tpAtt
 * DataPath.g:155:1: tpAtt : ID dType -> ^( TPATT ID dType ) ;
 */
static DataPathParser_tpAtt_return
tpAtt(pDataPathParser ctx)
{   
    DataPathParser_tpAtt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID80;
    DataPathParser_dType_return dType81;
    #undef	RETURN_TYPE_dType81
    #define	RETURN_TYPE_dType81 DataPathParser_dType_return

    pANTLR3_BASE_TREE ID80_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_dType;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID80       = NULL;
    dType81.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID80_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_dType   = NULL;
    #define CREATE_stream_dType  if (stream_dType == NULL) {stream_dType = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule dType"); }

    retval.tree  = NULL;
    {
        // DataPath.g:156:3: ( ID dType -> ^( TPATT ID dType ) )
        // DataPath.g:156:5: ID dType
        {
            ID80 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_tpAtt1059); 
            if  (HASEXCEPTION())
            {
                goto ruletpAttEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID80, NULL);

            FOLLOWPUSH(FOLLOW_dType_in_tpAtt1061);
            dType81=dType(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruletpAttEx;
            }

            CREATE_stream_dType; stream_dType->add(stream_dType, dType81.tree, NULL);

             
            /* AST REWRITE
             * elements          : dType, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 156:14: -> ^( TPATT ID dType )
            	{
            	    // DataPath.g:156:17: ^( TPATT ID dType )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TPATT, (pANTLR3_UINT8)"TPATT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_dType == NULL ? NULL : stream_dType->nextTree(stream_dType));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletpAttEx; /* Prevent compiler warnings */
    ruletpAttEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_dType != NULL) stream_dType->free(stream_dType);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end tpAtt */

/** 
 * $ANTLR start dType
 * DataPath.g:161:1: dType : ID ;
 */
static DataPathParser_dType_return
dType(pDataPathParser ctx)
{   
    DataPathParser_dType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID82;

    pANTLR3_BASE_TREE ID82_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID82       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID82_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:161:7: ( ID )
        // DataPath.g:161:9: ID
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            ID82 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_dType1085); 
            if  (HASEXCEPTION())
            {
                goto ruledTypeEx;
            }

            ID82_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID82));
            ADAPTOR->addChild(ADAPTOR, root_0, ID82_tree);


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledTypeEx; /* Prevent compiler warnings */
    ruledTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end dType */

/** 
 * $ANTLR start lstSyn
 * DataPath.g:163:1: lstSyn[char* tp] : ( | EQUAL ID ( COMMA ID )* -> ( ^( CRSYNONIM ID[$tp] ID ) )+ );
 */
static DataPathParser_lstSyn_return
lstSyn(pDataPathParser ctx, char* tp)
{   
    DataPathParser_lstSyn_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EQUAL83;
    pANTLR3_COMMON_TOKEN    ID84;
    pANTLR3_COMMON_TOKEN    COMMA85;
    pANTLR3_COMMON_TOKEN    ID86;

    pANTLR3_BASE_TREE EQUAL83_tree;
    pANTLR3_BASE_TREE ID84_tree;
    pANTLR3_BASE_TREE COMMA85_tree;
    pANTLR3_BASE_TREE ID86_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EQUAL;

    /* Initialize rule variables
     */


    root_0 = NULL;

    EQUAL83       = NULL;
    ID84       = NULL;
    COMMA85       = NULL;
    ID86       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    EQUAL83_tree   = NULL;
    ID84_tree   = NULL;
    COMMA85_tree   = NULL;
    ID86_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_EQUAL   = NULL;
    #define CREATE_stream_EQUAL  if (stream_EQUAL == NULL) {stream_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EQUAL"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:164:3: ( | EQUAL ID ( COMMA ID )* -> ( ^( CRSYNONIM ID[$tp] ID ) )+ )
            
            ANTLR3_UINT32 alt19;

            alt19=2;

            switch ( LA(1) ) 
            {
            case SEMICOLON:
            	{
            		alt19=1;
            	}
                break;
            case EQUAL:
            	{
            		alt19=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto rulelstSynEx;
            }

            switch (alt19) 
            {
        	case 1:
        	    // DataPath.g:165:3: 
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	    }
        	    break;
        	case 2:
        	    // DataPath.g:165:5: EQUAL ID ( COMMA ID )*
        	    {
        	        EQUAL83 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUAL, &FOLLOW_EQUAL_in_lstSyn1102); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelstSynEx;
        	        }
        	         
        	        CREATE_stream_EQUAL; stream_EQUAL->add(stream_EQUAL, EQUAL83, NULL);

        	        ID84 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_lstSyn1104); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulelstSynEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID84, NULL);


        	        // DataPath.g:165:14: ( COMMA ID )*

        	        for (;;)
        	        {
        	            int alt18=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt18=1;
        	            	}
        	                break;

        	            }

        	            switch (alt18) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:165:19: COMMA ID
        	        	    {
        	        	        COMMA85 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_lstSyn1111); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelstSynEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA85, NULL);

        	        	        ID86 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_lstSyn1113); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulelstSynEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID86, NULL);


        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop18;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop18: ; /* Jump out to here if this rule does not match */


        	         
        	        /* AST REWRITE
        	         * elements          : ID, ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 165:30: -> ( ^( CRSYNONIM ID[$tp] ID ) )+
        	        	{
        	        	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID)) || (stream_ID == NULL || !stream_ID->hasNext(stream_ID))  )
        	        	    {
        	        	        CONSTRUCTEX();
        	        	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
        	        	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
        	        	    }
        	        	    else
        	        	    {
        	        	    	while ( (stream_ID->hasNext(stream_ID)) || (stream_ID->hasNext(stream_ID))  ) {
        	        	    		// DataPath.g:165:32: ^( CRSYNONIM ID[$tp] ID )
        	        	    		{
        	        	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, CRSYNONIM, (pANTLR3_UINT8)"CRSYNONIM"), root_1));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_1, 
        	        	    		    #if 1 == 2
        	        	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ID, TOKTEXT(tp))
        	        	    		    #else
        	        	    		    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ID, (pANTLR3_UINT8)tp)
        	        	    		    #endif
        	        	    		    );
        	        	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    		}

        	        	    	}
        	        	    	stream_ID->reset(stream_ID);
        	        	    	stream_ID->reset(stream_ID);

        	        	    }
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulelstSynEx; /* Prevent compiler warnings */
    rulelstSynEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_EQUAL != NULL) stream_EQUAL->free(stream_EQUAL);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end lstSyn */

/** 
 * $ANTLR start drStmt
 * DataPath.g:168:1: drStmt : ;
 */
static DataPathParser_drStmt_return
drStmt(pDataPathParser ctx)
{   
    DataPathParser_drStmt_return retval;

    pANTLR3_BASE_TREE root_0;

    /* Initialize rule variables
     */


    root_0 = NULL;

    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:168:8: ()
        // DataPath.g:169:3: 
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruledrStmtEx; /* Prevent compiler warnings */
    ruledrStmtEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);


    return retval;
}
/* $ANTLR end drStmt */

/** 
 * $ANTLR start writer
 * DataPath.g:171:1: writer[bool isNew] : w= WRITER a= ID LPAREN b= ID RPAREN CONNECTIONS connList SEMICOLON -> ^( WRITER__[$w] $a $b connList ) ;
 */
static DataPathParser_writer_return
writer(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_writer_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    w;
    pANTLR3_COMMON_TOKEN    a;
    pANTLR3_COMMON_TOKEN    b;
    pANTLR3_COMMON_TOKEN    LPAREN87;
    pANTLR3_COMMON_TOKEN    RPAREN88;
    pANTLR3_COMMON_TOKEN    CONNECTIONS89;
    pANTLR3_COMMON_TOKEN    SEMICOLON91;
    DataPathParser_connList_return connList90;
    #undef	RETURN_TYPE_connList90
    #define	RETURN_TYPE_connList90 DataPathParser_connList_return

    pANTLR3_BASE_TREE w_tree;
    pANTLR3_BASE_TREE a_tree;
    pANTLR3_BASE_TREE b_tree;
    pANTLR3_BASE_TREE LPAREN87_tree;
    pANTLR3_BASE_TREE RPAREN88_tree;
    pANTLR3_BASE_TREE CONNECTIONS89_tree;
    pANTLR3_BASE_TREE SEMICOLON91_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CONNECTIONS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_WRITER;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_connList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    w       = NULL;
    a       = NULL;
    b       = NULL;
    LPAREN87       = NULL;
    RPAREN88       = NULL;
    CONNECTIONS89       = NULL;
    SEMICOLON91       = NULL;
    connList90.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    w_tree   = NULL;
    a_tree   = NULL;
    b_tree   = NULL;
    LPAREN87_tree   = NULL;
    RPAREN88_tree   = NULL;
    CONNECTIONS89_tree   = NULL;
    SEMICOLON91_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_CONNECTIONS   = NULL;
    #define CREATE_stream_CONNECTIONS  if (stream_CONNECTIONS == NULL) {stream_CONNECTIONS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CONNECTIONS"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_WRITER   = NULL;
    #define CREATE_stream_WRITER  if (stream_WRITER == NULL) {stream_WRITER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token WRITER"); } 
    stream_connList   = NULL;
    #define CREATE_stream_connList  if (stream_connList == NULL) {stream_connList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule connList"); }

    retval.tree  = NULL;
    {
        // DataPath.g:172:1: (w= WRITER a= ID LPAREN b= ID RPAREN CONNECTIONS connList SEMICOLON -> ^( WRITER__[$w] $a $b connList ) )
        // DataPath.g:172:3: w= WRITER a= ID LPAREN b= ID RPAREN CONNECTIONS connList SEMICOLON
        {
            w = (pANTLR3_COMMON_TOKEN) MATCHT(WRITER, &FOLLOW_WRITER_in_writer1149); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_WRITER; stream_WRITER->add(stream_WRITER, w, NULL);

            a = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_writer1153); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, a, NULL);

            LPAREN87 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_writer1155); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN87, NULL);

            b = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_writer1159); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, b, NULL);

            RPAREN88 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_writer1161); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN88, NULL);

            CONNECTIONS89 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_writer1163); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_CONNECTIONS; stream_CONNECTIONS->add(stream_CONNECTIONS, CONNECTIONS89, NULL);

            FOLLOWPUSH(FOLLOW_connList_in_writer1165);
            connList90=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }

            CREATE_stream_connList; stream_connList->add(stream_connList, connList90.tree, NULL);
            SEMICOLON91 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_writer1167); 
            if  (HASEXCEPTION())
            {
                goto rulewriterEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON91, NULL);


             
            /* AST REWRITE
             * elements          : b, a, connList
             * token labels      : b, a
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_b;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_a;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_b=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token b", b);
            	stream_a=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token a", a);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 172:66: -> ^( WRITER__[$w] $a $b connList )
            	{
            	    // DataPath.g:172:69: ^( WRITER__[$w] $a $b connList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WRITER__, TOKTEXT(w))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WRITER__, (pANTLR3_UINT8)w)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_a == NULL ? NULL : stream_a->nextNode(stream_a));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_b == NULL ? NULL : stream_b->nextNode(stream_b));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_connList == NULL ? NULL : stream_connList->nextTree(stream_connList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_b != NULL) stream_b->free(stream_b); 
            	if (stream_a != NULL) stream_a->free(stream_a); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewriterEx; /* Prevent compiler warnings */
    rulewriterEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_CONNECTIONS != NULL) stream_CONNECTIONS->free(stream_CONNECTIONS);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_WRITER != NULL) stream_WRITER->free(stream_WRITER);
        if (stream_connList != NULL) stream_connList->free(stream_connList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end writer */

/** 
 * $ANTLR start scanner
 * DataPath.g:175:1: scanner[bool isNew] : s= SCANNER ID scannerBody SEMICOLON -> ^( SCANNER__[$s] ID scannerBody ) ;
 */
static DataPathParser_scanner_return
scanner(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_scanner_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    ID92;
    pANTLR3_COMMON_TOKEN    SEMICOLON94;
    DataPathParser_scannerBody_return scannerBody93;
    #undef	RETURN_TYPE_scannerBody93
    #define	RETURN_TYPE_scannerBody93 DataPathParser_scannerBody_return

    pANTLR3_BASE_TREE s_tree;
    pANTLR3_BASE_TREE ID92_tree;
    pANTLR3_BASE_TREE SEMICOLON94_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SCANNER;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_scannerBody;
    /* Initialize rule variables
     */


    root_0 = NULL;

    s       = NULL;
    ID92       = NULL;
    SEMICOLON94       = NULL;
    scannerBody93.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    s_tree   = NULL;
    ID92_tree   = NULL;
    SEMICOLON94_tree   = NULL;

    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_SCANNER   = NULL;
    #define CREATE_stream_SCANNER  if (stream_SCANNER == NULL) {stream_SCANNER = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SCANNER"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_scannerBody   = NULL;
    #define CREATE_stream_scannerBody  if (stream_scannerBody == NULL) {stream_scannerBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule scannerBody"); }

    retval.tree  = NULL;
    {
        // DataPath.g:176:5: (s= SCANNER ID scannerBody SEMICOLON -> ^( SCANNER__[$s] ID scannerBody ) )
        // DataPath.g:176:7: s= SCANNER ID scannerBody SEMICOLON
        {
            s = (pANTLR3_COMMON_TOKEN) MATCHT(SCANNER, &FOLLOW_SCANNER_in_scanner1197); 
            if  (HASEXCEPTION())
            {
                goto rulescannerEx;
            }
             
            CREATE_stream_SCANNER; stream_SCANNER->add(stream_SCANNER, s, NULL);

            ID92 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_scanner1199); 
            if  (HASEXCEPTION())
            {
                goto rulescannerEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID92, NULL);

            FOLLOWPUSH(FOLLOW_scannerBody_in_scanner1201);
            scannerBody93=scannerBody(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulescannerEx;
            }

            CREATE_stream_scannerBody; stream_scannerBody->add(stream_scannerBody, scannerBody93.tree, NULL);
            SEMICOLON94 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_scanner1203); 
            if  (HASEXCEPTION())
            {
                goto rulescannerEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON94, NULL);

            {

                      P_ERR_IF( (!isNew), "Scanner should always be under new statement" );
                    
            }

             
            /* AST REWRITE
             * elements          : scannerBody, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 178:7: -> ^( SCANNER__[$s] ID scannerBody )
            	{
            	    // DataPath.g:178:10: ^( SCANNER__[$s] ID scannerBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SCANNER__, TOKTEXT(s))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SCANNER__, (pANTLR3_UINT8)s)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_scannerBody == NULL ? NULL : stream_scannerBody->nextTree(stream_scannerBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulescannerEx; /* Prevent compiler warnings */
    rulescannerEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_SCANNER != NULL) stream_SCANNER->free(stream_SCANNER);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_scannerBody != NULL) stream_scannerBody->free(stream_scannerBody);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end scanner */

/** 
 * $ANTLR start scannerBody
 * DataPath.g:181:1: scannerBody : ( | LPAREN ID RPAREN -> ID );
 */
static DataPathParser_scannerBody_return
scannerBody(pDataPathParser ctx)
{   
    DataPathParser_scannerBody_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN95;
    pANTLR3_COMMON_TOKEN    ID96;
    pANTLR3_COMMON_TOKEN    RPAREN97;

    pANTLR3_BASE_TREE LPAREN95_tree;
    pANTLR3_BASE_TREE ID96_tree;
    pANTLR3_BASE_TREE RPAREN97_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;

    /* Initialize rule variables
     */


    root_0 = NULL;

    LPAREN95       = NULL;
    ID96       = NULL;
    RPAREN97       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LPAREN95_tree   = NULL;
    ID96_tree   = NULL;
    RPAREN97_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:182:5: ( | LPAREN ID RPAREN -> ID )
            
            ANTLR3_UINT32 alt20;

            alt20=2;

            switch ( LA(1) ) 
            {
            case SEMICOLON:
            	{
            		alt20=1;
            	}
                break;
            case LPAREN:
            	{
            		alt20=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 20;
                EXCEPTION->state        = 0;


                goto rulescannerBodyEx;
            }

            switch (alt20) 
            {
        	case 1:
        	    // DataPath.g:183:5: 
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	    }
        	    break;
        	case 2:
        	    // DataPath.g:183:7: LPAREN ID RPAREN
        	    {
        	        LPAREN95 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_scannerBody1241); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescannerBodyEx;
        	        }
        	         
        	        CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN95, NULL);

        	        ID96 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_scannerBody1243); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescannerBodyEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID96, NULL);

        	        RPAREN97 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_scannerBody1245); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulescannerBodyEx;
        	        }
        	         
        	        CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN97, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 183:24: -> ID
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulescannerBodyEx; /* Prevent compiler warnings */
    rulescannerBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end scannerBody */

/** 
 * $ANTLR start waypoint
 * DataPath.g:186:1: waypoint[bool isNew] : w= WAYPOINT ID wpDefinition[isNew] wpBody[wpType] -> ^( WAYPOINT__[$w] ID wpDefinition wpBody ) ;
 */
static DataPathParser_waypoint_return
waypoint(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_waypoint_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    w;
    pANTLR3_COMMON_TOKEN    ID98;
    DataPathParser_wpDefinition_return wpDefinition99;
    #undef	RETURN_TYPE_wpDefinition99
    #define	RETURN_TYPE_wpDefinition99 DataPathParser_wpDefinition_return

    DataPathParser_wpBody_return wpBody100;
    #undef	RETURN_TYPE_wpBody100
    #define	RETURN_TYPE_wpBody100 DataPathParser_wpBody_return

    pANTLR3_BASE_TREE w_tree;
    pANTLR3_BASE_TREE ID98_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_WAYPOINT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_wpDefinition;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_wpBody;
    /* Initialize rule variables
     */


    root_0 = NULL;

    w       = NULL;
    ID98       = NULL;
    wpDefinition99.tree = NULL;
    wpBody100.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    w_tree   = NULL;
    ID98_tree   = NULL;

    stream_WAYPOINT   = NULL;
    #define CREATE_stream_WAYPOINT  if (stream_WAYPOINT == NULL) {stream_WAYPOINT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token WAYPOINT"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_wpDefinition   = NULL;
    #define CREATE_stream_wpDefinition  if (stream_wpDefinition == NULL) {stream_wpDefinition = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule wpDefinition"); }
    stream_wpBody   = NULL;
    #define CREATE_stream_wpBody  if (stream_wpBody == NULL) {stream_wpBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule wpBody"); }

    retval.tree  = NULL;
    {
        // DataPath.g:187:3: (w= WAYPOINT ID wpDefinition[isNew] wpBody[wpType] -> ^( WAYPOINT__[$w] ID wpDefinition wpBody ) )
        // DataPath.g:187:8: w= WAYPOINT ID wpDefinition[isNew] wpBody[wpType]
        {
            w = (pANTLR3_COMMON_TOKEN) MATCHT(WAYPOINT, &FOLLOW_WAYPOINT_in_waypoint1270); 
            if  (HASEXCEPTION())
            {
                goto rulewaypointEx;
            }
             
            CREATE_stream_WAYPOINT; stream_WAYPOINT->add(stream_WAYPOINT, w, NULL);

            ID98 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_waypoint1272); 
            if  (HASEXCEPTION())
            {
                goto rulewaypointEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID98, NULL);

            {

                      wp = (char*)(ID98->getText(ID98))->chars;
                    if (isNew){
                      // should not be in type map
                    } else {
                      // should be in type map
                    }
                  
            }
            FOLLOWPUSH(FOLLOW_wpDefinition_in_waypoint1276);
            wpDefinition99=wpDefinition(ctx, isNew);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewaypointEx;
            }

            CREATE_stream_wpDefinition; stream_wpDefinition->add(stream_wpDefinition, wpDefinition99.tree, NULL);
            {
                 wpType=typeMap[wp]; 
            }
            FOLLOWPUSH(FOLLOW_wpBody_in_waypoint1281);
            wpBody100=wpBody(ctx, wpType);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewaypointEx;
            }

            CREATE_stream_wpBody; stream_wpBody->add(stream_wpBody, wpBody100.tree, NULL);

             
            /* AST REWRITE
             * elements          : wpDefinition, wpBody, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 194:64: -> ^( WAYPOINT__[$w] ID wpDefinition wpBody )
            	{
            	    // DataPath.g:194:67: ^( WAYPOINT__[$w] ID wpDefinition wpBody )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WAYPOINT__, TOKTEXT(w))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WAYPOINT__, (pANTLR3_UINT8)w)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_wpDefinition == NULL ? NULL : stream_wpDefinition->nextTree(stream_wpDefinition));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_wpBody == NULL ? NULL : stream_wpBody->nextTree(stream_wpBody));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewaypointEx; /* Prevent compiler warnings */
    rulewaypointEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_WAYPOINT != NULL) stream_WAYPOINT->free(stream_WAYPOINT);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_wpDefinition != NULL) stream_wpDefinition->free(stream_wpDefinition);
        if (stream_wpBody != NULL) stream_wpBody->free(stream_wpBody);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end waypoint */

/** 
 * $ANTLR start query
 * DataPath.g:197:1: query[bool isNew] : (q= QUERRY rez= (id1= ID ( COMMA id2= ID )* ) SEMICOLON -> ^( QUERRY__[$q] $rez) | QUERRY id1= ID queryBody -> ^( QUERRY__ $id1 queryBody ) );
 */
static DataPathParser_query_return
query(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_query_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    q;
    pANTLR3_COMMON_TOKEN    id1;
    pANTLR3_COMMON_TOKEN    id2;
    pANTLR3_COMMON_TOKEN    rez;
    pANTLR3_COMMON_TOKEN    COMMA101;
    pANTLR3_COMMON_TOKEN    SEMICOLON102;
    pANTLR3_COMMON_TOKEN    QUERRY103;
    DataPathParser_queryBody_return queryBody104;
    #undef	RETURN_TYPE_queryBody104
    #define	RETURN_TYPE_queryBody104 DataPathParser_queryBody_return

    pANTLR3_BASE_TREE q_tree;
    pANTLR3_BASE_TREE id1_tree;
    pANTLR3_BASE_TREE id2_tree;
    pANTLR3_BASE_TREE rez_tree;
    pANTLR3_BASE_TREE COMMA101_tree;
    pANTLR3_BASE_TREE SEMICOLON102_tree;
    pANTLR3_BASE_TREE QUERRY103_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUERRY;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_queryBody;
    /* Initialize rule variables
     */


    root_0 = NULL;

    q       = NULL;
    id1       = NULL;
    id2       = NULL;
    rez       = NULL;
    COMMA101       = NULL;
    SEMICOLON102       = NULL;
    QUERRY103       = NULL;
    queryBody104.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    q_tree   = NULL;
    id1_tree   = NULL;
    id2_tree   = NULL;
    rez_tree   = NULL;
    COMMA101_tree   = NULL;
    SEMICOLON102_tree   = NULL;
    QUERRY103_tree   = NULL;

    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_QUERRY   = NULL;
    #define CREATE_stream_QUERRY  if (stream_QUERRY == NULL) {stream_QUERRY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUERRY"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_queryBody   = NULL;
    #define CREATE_stream_queryBody  if (stream_queryBody == NULL) {stream_queryBody = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule queryBody"); }

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:198:3: (q= QUERRY rez= (id1= ID ( COMMA id2= ID )* ) SEMICOLON -> ^( QUERRY__[$q] $rez) | QUERRY id1= ID queryBody -> ^( QUERRY__ $id1 queryBody ) )
            
            ANTLR3_UINT32 alt22;

            alt22=2;

            switch ( LA(1) ) 
            {
            case QUERRY:
            	{
            		switch ( LA(2) ) 
            		{
            		case ID:
            			{
            				switch ( LA(3) ) 
            				{
            				case 111:
            					{
            						alt22=2;
            					}
            				    break;
            				case SEMICOLON:
            				case COMMA:
            					{
            						alt22=1;
            					}
            				    break;

            				default:
            				    CONSTRUCTEX();
            				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            				    EXCEPTION->message      = (void *)"";
            				    EXCEPTION->decisionNum  = 22;
            				    EXCEPTION->state        = 2;


            				    goto rulequeryEx;
            				}

            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 22;
            		    EXCEPTION->state        = 1;


            		    goto rulequeryEx;
            		}

            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 22;
                EXCEPTION->state        = 0;


                goto rulequeryEx;
            }

            switch (alt22) 
            {
        	case 1:
        	    // DataPath.g:198:8: q= QUERRY rez= (id1= ID ( COMMA id2= ID )* ) SEMICOLON
        	    {
        	        q = (pANTLR3_COMMON_TOKEN) MATCHT(QUERRY, &FOLLOW_QUERRY_in_query1313); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequeryEx;
        	        }
        	         
        	        CREATE_stream_QUERRY; stream_QUERRY->add(stream_QUERRY, q, NULL);

        	        // DataPath.g:198:21: (id1= ID ( COMMA id2= ID )* )
        	        // DataPath.g:198:22: id1= ID ( COMMA id2= ID )*
        	        {
        	            id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_query1320); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto rulequeryEx;
        	            }
        	             
        	            CREATE_stream_ID; stream_ID->add(stream_ID, id1, NULL);

        	            {
        	                qry=(char*)(id1->getText(id1))->chars; DP_CheckQuery(isNew,qry) ;
        	            }

        	            // DataPath.g:198:87: ( COMMA id2= ID )*

        	            for (;;)
        	            {
        	                int alt21=2;
        	                switch ( LA(1) ) 
        	                {
        	                case COMMA:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;

        	                }

        	                switch (alt21) 
        	                {
        	            	case 1:
        	            	    // DataPath.g:198:92: COMMA id2= ID
        	            	    {
        	            	        COMMA101 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_query1329); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulequeryEx;
        	            	        }
        	            	         
        	            	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA101, NULL);

        	            	        id2 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_query1333); 
        	            	        if  (HASEXCEPTION())
        	            	        {
        	            	            goto rulequeryEx;
        	            	        }
        	            	         
        	            	        CREATE_stream_ID; stream_ID->add(stream_ID, id2, NULL);

        	            	        {
        	            	            DP_CheckQuery(isNew, (char*)(id2->getText(id2))->chars);
        	            	        }

        	            	    }
        	            	    break;

        	            	default:
        	            	    goto loop21;	/* break out of the loop */
        	            	    break;
        	                }
        	            }
        	            loop21: ; /* Jump out to here if this rule does not match */


        	        }

        	        SEMICOLON102 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_query1342); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequeryEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON102, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : rez
        	         * token labels      : rez
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_rez;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_rez=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token rez", rez);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 198:169: -> ^( QUERRY__[$q] $rez)
        	        	{
        	        	    // DataPath.g:198:172: ^( QUERRY__[$q] $rez)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 1 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUERRY__, TOKTEXT(q))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUERRY__, (pANTLR3_UINT8)q)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_rez == NULL ? NULL : stream_rez->nextNode(stream_rez));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_rez != NULL) stream_rez->free(stream_rez); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:199:7: QUERRY id1= ID queryBody
        	    {
        	        QUERRY103 = (pANTLR3_COMMON_TOKEN) MATCHT(QUERRY, &FOLLOW_QUERRY_in_query1361); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequeryEx;
        	        }
        	         
        	        CREATE_stream_QUERRY; stream_QUERRY->add(stream_QUERRY, QUERRY103, NULL);

        	        id1 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_query1365); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequeryEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, id1, NULL);

        	        {
        	            qry=(char*)(id1->getText(id1))->chars; DP_CheckQuery(isNew,qry) ;
        	        }
        	        FOLLOWPUSH(FOLLOW_queryBody_in_query1369);
        	        queryBody104=queryBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulequeryEx;
        	        }

        	        CREATE_stream_queryBody; stream_queryBody->add(stream_queryBody, queryBody104.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : id1, queryBody
        	         * token labels      : id1
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_id1;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_id1=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token id1", id1);
        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 200:5: -> ^( QUERRY__ $id1 queryBody )
        	        	{
        	        	    // DataPath.g:200:8: ^( QUERRY__ $id1 queryBody )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUERRY__, (pANTLR3_UINT8)"QUERRY__"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_id1 == NULL ? NULL : stream_id1->nextNode(stream_id1));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_queryBody == NULL ? NULL : stream_queryBody->nextTree(stream_queryBody));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_id1 != NULL) stream_id1->free(stream_id1); 
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulequeryEx; /* Prevent compiler warnings */
    rulequeryEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_QUERRY != NULL) stream_QUERRY->free(stream_QUERRY);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_queryBody != NULL) stream_queryBody->free(stream_queryBody);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end query */

/** 
 * $ANTLR start wpBody
 * DataPath.g:203:1: wpBody[WaypointType which] : ( '{' ( bypass )? ( wpbodyStatement[which] )* '}' | SEMICOLON );
 */
static DataPathParser_wpBody_return
wpBody(pDataPathParser ctx, WaypointType which)
{   
    DataPathParser_wpBody_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal105;
    pANTLR3_COMMON_TOKEN    char_literal108;
    pANTLR3_COMMON_TOKEN    SEMICOLON109;
    DataPathParser_bypass_return bypass106;
    #undef	RETURN_TYPE_bypass106
    #define	RETURN_TYPE_bypass106 DataPathParser_bypass_return

    DataPathParser_wpbodyStatement_return wpbodyStatement107;
    #undef	RETURN_TYPE_wpbodyStatement107
    #define	RETURN_TYPE_wpbodyStatement107 DataPathParser_wpbodyStatement_return

    pANTLR3_BASE_TREE char_literal105_tree;
    pANTLR3_BASE_TREE char_literal108_tree;
    pANTLR3_BASE_TREE SEMICOLON109_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal105       = NULL;
    char_literal108       = NULL;
    SEMICOLON109       = NULL;
    bypass106.tree = NULL;
    wpbodyStatement107.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal105_tree   = NULL;
    char_literal108_tree   = NULL;
    SEMICOLON109_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  DataPath.g:203:33: ( '{' ( bypass )? ( wpbodyStatement[which] )* '}' | SEMICOLON )
            
            ANTLR3_UINT32 alt25;

            alt25=2;

            switch ( LA(1) ) 
            {
            case 111:
            	{
            		alt25=1;
            	}
                break;
            case SEMICOLON:
            	{
            		alt25=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 25;
                EXCEPTION->state        = 0;


                goto rulewpBodyEx;
            }

            switch (alt25) 
            {
        	case 1:
        	    // DataPath.g:203:38: '{' ( bypass )? ( wpbodyStatement[which] )* '}'
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        char_literal105 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_wpBody1406); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulewpBodyEx;
        	        }


        	        // DataPath.g:203:43: ( bypass )?
        	        {
        	            int alt23=2;
        	            switch ( LA(1) ) 
        	            {
        	                case BYPASS:
        	                	{
        	                		alt23=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt23) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:203:43: bypass
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_bypass_in_wpBody1409);
        	        	        bypass106=bypass(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpBodyEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, bypass106.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	        // DataPath.g:203:51: ( wpbodyStatement[which] )*

        	        for (;;)
        	        {
        	            int alt24=2;
        	            switch ( LA(1) ) 
        	            {
        	            case QUERRY:
        	            	{
        	            		alt24=1;
        	            	}
        	                break;

        	            }

        	            switch (alt24) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:203:51: wpbodyStatement[which]
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_wpbodyStatement_in_wpBody1412);
        	        	        wpbodyStatement107=wpbodyStatement(ctx, which);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpBodyEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, wpbodyStatement107.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop24;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop24: ; /* Jump out to here if this rule does not match */

        	        char_literal108 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_wpBody1416); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulewpBodyEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // DataPath.g:204:10: SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        SEMICOLON109 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_wpBody1428); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulewpBodyEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulewpBodyEx; /* Prevent compiler warnings */
    rulewpBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end wpBody */

/** 
 * $ANTLR start queryBody
 * DataPath.g:207:1: queryBody : '{' ( qBodyStatement )* '}' ;
 */
static DataPathParser_queryBody_return
queryBody(pDataPathParser ctx)
{   
    DataPathParser_queryBody_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    char_literal110;
    pANTLR3_COMMON_TOKEN    char_literal112;
    DataPathParser_qBodyStatement_return qBodyStatement111;
    #undef	RETURN_TYPE_qBodyStatement111
    #define	RETURN_TYPE_qBodyStatement111 DataPathParser_qBodyStatement_return

    pANTLR3_BASE_TREE char_literal110_tree;
    pANTLR3_BASE_TREE char_literal112_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    char_literal110       = NULL;
    char_literal112       = NULL;
    qBodyStatement111.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    char_literal110_tree   = NULL;
    char_literal112_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:208:5: ( '{' ( qBodyStatement )* '}' )
        // DataPath.g:208:10: '{' ( qBodyStatement )* '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            char_literal110 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_queryBody1449); 
            if  (HASEXCEPTION())
            {
                goto rulequeryBodyEx;
            }


            // DataPath.g:208:15: ( qBodyStatement )*

            for (;;)
            {
                int alt26=2;
                switch ( LA(1) ) 
                {
                case WAYPOINT:
                	{
                		alt26=1;
                	}
                    break;

                }

                switch (alt26) 
                {
            	case 1:
            	    // DataPath.g:208:15: qBodyStatement
            	    {
            	        FOLLOWPUSH(FOLLOW_qBodyStatement_in_queryBody1452);
            	        qBodyStatement111=qBodyStatement(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulequeryBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, qBodyStatement111.tree);

            	    }
            	    break;

            	default:
            	    goto loop26;	/* break out of the loop */
            	    break;
                }
            }
            loop26: ; /* Jump out to here if this rule does not match */

            char_literal112 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_queryBody1455); 
            if  (HASEXCEPTION())
            {
                goto rulequeryBodyEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequeryBodyEx; /* Prevent compiler warnings */
    rulequeryBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end queryBody */

/** 
 * $ANTLR start wpbodyStatement
 * DataPath.g:211:1: wpbodyStatement[WaypointType which] : q= QUERRY ID '{' bodyStatement[which] '}' -> ^( QUERRY__[$q] ID bodyStatement ) ;
 */
static DataPathParser_wpbodyStatement_return
wpbodyStatement(pDataPathParser ctx, WaypointType  which)
{   
    DataPathParser_wpbodyStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    q;
    pANTLR3_COMMON_TOKEN    ID113;
    pANTLR3_COMMON_TOKEN    char_literal114;
    pANTLR3_COMMON_TOKEN    char_literal116;
    DataPathParser_bodyStatement_return bodyStatement115;
    #undef	RETURN_TYPE_bodyStatement115
    #define	RETURN_TYPE_bodyStatement115 DataPathParser_bodyStatement_return

    pANTLR3_BASE_TREE q_tree;
    pANTLR3_BASE_TREE ID113_tree;
    pANTLR3_BASE_TREE char_literal114_tree;
    pANTLR3_BASE_TREE char_literal116_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_112;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QUERRY;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_111;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bodyStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    q       = NULL;
    ID113       = NULL;
    char_literal114       = NULL;
    char_literal116       = NULL;
    bodyStatement115.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    q_tree   = NULL;
    ID113_tree   = NULL;
    char_literal114_tree   = NULL;
    char_literal116_tree   = NULL;

    stream_112   = NULL;
    #define CREATE_stream_112  if (stream_112 == NULL) {stream_112 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 112"); } 
    stream_QUERRY   = NULL;
    #define CREATE_stream_QUERRY  if (stream_QUERRY == NULL) {stream_QUERRY = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QUERRY"); } 
    stream_111   = NULL;
    #define CREATE_stream_111  if (stream_111 == NULL) {stream_111 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 111"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_bodyStatement   = NULL;
    #define CREATE_stream_bodyStatement  if (stream_bodyStatement == NULL) {stream_bodyStatement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bodyStatement"); }

    retval.tree  = NULL;
    {
        // DataPath.g:212:5: (q= QUERRY ID '{' bodyStatement[which] '}' -> ^( QUERRY__[$q] ID bodyStatement ) )
        // DataPath.g:212:7: q= QUERRY ID '{' bodyStatement[which] '}'
        {
            q = (pANTLR3_COMMON_TOKEN) MATCHT(QUERRY, &FOLLOW_QUERRY_in_wpbodyStatement1477); 
            if  (HASEXCEPTION())
            {
                goto rulewpbodyStatementEx;
            }
             
            CREATE_stream_QUERRY; stream_QUERRY->add(stream_QUERRY, q, NULL);

            ID113 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_wpbodyStatement1479); 
            if  (HASEXCEPTION())
            {
                goto rulewpbodyStatementEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID113, NULL);

            {
                qry=(char*)(ID113->getText(ID113))->chars;/*DP_CheckQuery(false,qry);*/
            }
            char_literal114 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_wpbodyStatement1483); 
            if  (HASEXCEPTION())
            {
                goto rulewpbodyStatementEx;
            }
             
            CREATE_stream_111; stream_111->add(stream_111, char_literal114, NULL);

            FOLLOWPUSH(FOLLOW_bodyStatement_in_wpbodyStatement1485);
            bodyStatement115=bodyStatement(ctx, which);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewpbodyStatementEx;
            }

            CREATE_stream_bodyStatement; stream_bodyStatement->add(stream_bodyStatement, bodyStatement115.tree, NULL);
            char_literal116 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_wpbodyStatement1488); 
            if  (HASEXCEPTION())
            {
                goto rulewpbodyStatementEx;
            }
             
            CREATE_stream_112; stream_112->add(stream_112, char_literal116, NULL);


             
            /* AST REWRITE
             * elements          : ID, bodyStatement
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 212:107: -> ^( QUERRY__[$q] ID bodyStatement )
            	{
            	    // DataPath.g:212:110: ^( QUERRY__[$q] ID bodyStatement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, QUERRY__, TOKTEXT(q))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, QUERRY__, (pANTLR3_UINT8)q)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bodyStatement == NULL ? NULL : stream_bodyStatement->nextTree(stream_bodyStatement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewpbodyStatementEx; /* Prevent compiler warnings */
    rulewpbodyStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_112 != NULL) stream_112->free(stream_112);
        if (stream_QUERRY != NULL) stream_QUERRY->free(stream_QUERRY);
        if (stream_111 != NULL) stream_111->free(stream_111);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_bodyStatement != NULL) stream_bodyStatement->free(stream_bodyStatement);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end wpbodyStatement */

/** 
 * $ANTLR start qBodyStatement
 * DataPath.g:215:1: qBodyStatement : w= WAYPOINT ID '{' bodyStatement[wpType] '}' -> ^( WAYPOINT__[$w] ID bodyStatement ) ;
 */
static DataPathParser_qBodyStatement_return
qBodyStatement(pDataPathParser ctx)
{   
    DataPathParser_qBodyStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    w;
    pANTLR3_COMMON_TOKEN    ID117;
    pANTLR3_COMMON_TOKEN    char_literal118;
    pANTLR3_COMMON_TOKEN    char_literal120;
    DataPathParser_bodyStatement_return bodyStatement119;
    #undef	RETURN_TYPE_bodyStatement119
    #define	RETURN_TYPE_bodyStatement119 DataPathParser_bodyStatement_return

    pANTLR3_BASE_TREE w_tree;
    pANTLR3_BASE_TREE ID117_tree;
    pANTLR3_BASE_TREE char_literal118_tree;
    pANTLR3_BASE_TREE char_literal120_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_WAYPOINT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_112;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_111;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_bodyStatement;
    /* Initialize rule variables
     */


    root_0 = NULL;

    w       = NULL;
    ID117       = NULL;
    char_literal118       = NULL;
    char_literal120       = NULL;
    bodyStatement119.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    w_tree   = NULL;
    ID117_tree   = NULL;
    char_literal118_tree   = NULL;
    char_literal120_tree   = NULL;

    stream_WAYPOINT   = NULL;
    #define CREATE_stream_WAYPOINT  if (stream_WAYPOINT == NULL) {stream_WAYPOINT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token WAYPOINT"); } 
    stream_112   = NULL;
    #define CREATE_stream_112  if (stream_112 == NULL) {stream_112 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 112"); } 
    stream_111   = NULL;
    #define CREATE_stream_111  if (stream_111 == NULL) {stream_111 = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token 111"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_bodyStatement   = NULL;
    #define CREATE_stream_bodyStatement  if (stream_bodyStatement == NULL) {stream_bodyStatement = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule bodyStatement"); }

    retval.tree  = NULL;
    {
        // DataPath.g:216:5: (w= WAYPOINT ID '{' bodyStatement[wpType] '}' -> ^( WAYPOINT__[$w] ID bodyStatement ) )
        // DataPath.g:216:10: w= WAYPOINT ID '{' bodyStatement[wpType] '}'
        {
            w = (pANTLR3_COMMON_TOKEN) MATCHT(WAYPOINT, &FOLLOW_WAYPOINT_in_qBodyStatement1521); 
            if  (HASEXCEPTION())
            {
                goto ruleqBodyStatementEx;
            }
             
            CREATE_stream_WAYPOINT; stream_WAYPOINT->add(stream_WAYPOINT, w, NULL);

            ID117 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_qBodyStatement1523); 
            if  (HASEXCEPTION())
            {
                goto ruleqBodyStatementEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID117, NULL);

            {

                            wp = (const char*)(ID117->getText(ID117))->chars;
                            wpType=typeMap[wp];
                        
            }
            char_literal118 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_qBodyStatement1527); 
            if  (HASEXCEPTION())
            {
                goto ruleqBodyStatementEx;
            }
             
            CREATE_stream_111; stream_111->add(stream_111, char_literal118, NULL);

            FOLLOWPUSH(FOLLOW_bodyStatement_in_qBodyStatement1529);
            bodyStatement119=bodyStatement(ctx, wpType);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleqBodyStatementEx;
            }

            CREATE_stream_bodyStatement; stream_bodyStatement->add(stream_bodyStatement, bodyStatement119.tree, NULL);
            char_literal120 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_qBodyStatement1532); 
            if  (HASEXCEPTION())
            {
                goto ruleqBodyStatementEx;
            }
             
            CREATE_stream_112; stream_112->add(stream_112, char_literal120, NULL);


             
            /* AST REWRITE
             * elements          : bodyStatement, ID
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 220:5: -> ^( WAYPOINT__[$w] ID bodyStatement )
            	{
            	    // DataPath.g:220:8: ^( WAYPOINT__[$w] ID bodyStatement )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, WAYPOINT__, TOKTEXT(w))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, WAYPOINT__, (pANTLR3_UINT8)w)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_bodyStatement == NULL ? NULL : stream_bodyStatement->nextTree(stream_bodyStatement));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleqBodyStatementEx; /* Prevent compiler warnings */
    ruleqBodyStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_WAYPOINT != NULL) stream_WAYPOINT->free(stream_WAYPOINT);
        if (stream_112 != NULL) stream_112->free(stream_112);
        if (stream_111 != NULL) stream_111->free(stream_111);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_bodyStatement != NULL) stream_bodyStatement->free(stream_bodyStatement);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end qBodyStatement */

/** 
 * $ANTLR start bodyStatement
 * DataPath.g:223:1: bodyStatement[WaypointType which] : ({...}? selectBody | {...}? aggregateBody | {...}? printBody | {...}? joinBody | {...}? glaBody | );
 */
static DataPathParser_bodyStatement_return
bodyStatement(pDataPathParser ctx, WaypointType which)
{   
    DataPathParser_bodyStatement_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_selectBody_return selectBody121;
    #undef	RETURN_TYPE_selectBody121
    #define	RETURN_TYPE_selectBody121 DataPathParser_selectBody_return

    DataPathParser_aggregateBody_return aggregateBody122;
    #undef	RETURN_TYPE_aggregateBody122
    #define	RETURN_TYPE_aggregateBody122 DataPathParser_aggregateBody_return

    DataPathParser_printBody_return printBody123;
    #undef	RETURN_TYPE_printBody123
    #define	RETURN_TYPE_printBody123 DataPathParser_printBody_return

    DataPathParser_joinBody_return joinBody124;
    #undef	RETURN_TYPE_joinBody124
    #define	RETURN_TYPE_joinBody124 DataPathParser_joinBody_return

    DataPathParser_glaBody_return glaBody125;
    #undef	RETURN_TYPE_glaBody125
    #define	RETURN_TYPE_glaBody125 DataPathParser_glaBody_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    selectBody121.tree = NULL;
    aggregateBody122.tree = NULL;
    printBody123.tree = NULL;
    joinBody124.tree = NULL;
    glaBody125.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        {
            //  DataPath.g:224:5: ({...}? selectBody | {...}? aggregateBody | {...}? printBody | {...}? joinBody | {...}? glaBody | )
            
            ANTLR3_UINT32 alt27;

            alt27=6;

            switch ( LA(1) ) 
            {
            case FILTER:
            case SYNTHESIZE:
            	{
            		alt27=1;
            	}
                break;
            case 112:
            	{

            		{
            		    int LA27_2 = LA(2);
            		    if ( ((which==SelectionWaypoint))) 
            		    {
            		        alt27=1;
            		    }
            		    else if ( ((which==AggregateWaypoint))) 
            		    {
            		        alt27=2;
            		    }
            		    else if ( ((which==PrintWaypoint))) 
            		    {
            		        alt27=3;
            		    }
            		    else if ( ((which==JoinWaypoint))) 
            		    {
            		        alt27=4;
            		    }
            		    else if ( ((which==GLAWaypoint))) 
            		    {
            		        alt27=5;
            		    }
            		    else if ( (ANTLR3_TRUE)) 
            		    {
            		        alt27=6;
            		    }
            		    else 
            		    {
            		    
            		        CONSTRUCTEX();
            		        EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		        EXCEPTION->message      = (void *)"";
            		        EXCEPTION->decisionNum  = 27;
            		        EXCEPTION->state        = 2;


            		        goto rulebodyStatementEx;
            		    }
            		}
            	}
                break;
            case AGGREGATE:
            	{
            		alt27=2;
            	}
                break;
            case PRINT:
            	{
            		alt27=3;
            	}
                break;
            case JOIN:
            	{
            		alt27=4;
            	}
                break;
            case GLA:
            	{
            		alt27=5;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 27;
                EXCEPTION->state        = 0;


                goto rulebodyStatementEx;
            }

            switch (alt27) 
            {
        	case 1:
        	    // DataPath.g:224:10: {...}? selectBody
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((which==SelectionWaypoint)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"which==SelectionWaypoint";
        	                EXCEPTION->ruleName	 = (void *)"bodyStatement";


        	        }
        	        FOLLOWPUSH(FOLLOW_selectBody_in_bodyStatement1571);
        	        selectBody121=selectBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebodyStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, selectBody121.tree);

        	    }
        	    break;
        	case 2:
        	    // DataPath.g:225:11: {...}? aggregateBody
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((which==AggregateWaypoint)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"which==AggregateWaypoint";
        	                EXCEPTION->ruleName	 = (void *)"bodyStatement";


        	        }
        	        FOLLOWPUSH(FOLLOW_aggregateBody_in_bodyStatement1585);
        	        aggregateBody122=aggregateBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebodyStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, aggregateBody122.tree);

        	    }
        	    break;
        	case 3:
        	    // DataPath.g:226:10: {...}? printBody
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((which==PrintWaypoint)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"which==PrintWaypoint";
        	                EXCEPTION->ruleName	 = (void *)"bodyStatement";


        	        }
        	        FOLLOWPUSH(FOLLOW_printBody_in_bodyStatement1598);
        	        printBody123=printBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebodyStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, printBody123.tree);

        	    }
        	    break;
        	case 4:
        	    // DataPath.g:227:10: {...}? joinBody
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((which==JoinWaypoint)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"which==JoinWaypoint";
        	                EXCEPTION->ruleName	 = (void *)"bodyStatement";


        	        }
        	        FOLLOWPUSH(FOLLOW_joinBody_in_bodyStatement1611);
        	        joinBody124=joinBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebodyStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, joinBody124.tree);

        	    }
        	    break;
        	case 5:
        	    // DataPath.g:228:10: {...}? glaBody
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((which==GLAWaypoint)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"which==GLAWaypoint";
        	                EXCEPTION->ruleName	 = (void *)"bodyStatement";


        	        }
        	        FOLLOWPUSH(FOLLOW_glaBody_in_bodyStatement1624);
        	        glaBody125=glaBody(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebodyStatementEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, glaBody125.tree);

        	    }
        	    break;
        	case 6:
        	    // DataPath.g:229:19: 
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        {
        	             P_ERR_IF(true, "Invalid type of waypoint. Probably the waypoint %s is not defined", wp.c_str()); 
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebodyStatementEx; /* Prevent compiler warnings */
    rulebodyStatementEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end bodyStatement */

/** 
 * $ANTLR start selectBody
 * DataPath.g:232:1: selectBody : ( selectRules )* ;
 */
static DataPathParser_selectBody_return
selectBody(pDataPathParser ctx)
{   
    DataPathParser_selectBody_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_selectRules_return selectRules126;
    #undef	RETURN_TYPE_selectRules126
    #define	RETURN_TYPE_selectRules126 DataPathParser_selectRules_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    selectRules126.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:233:5: ( ( selectRules )* )
        // DataPath.g:233:10: ( selectRules )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // DataPath.g:233:10: ( selectRules )*

            for (;;)
            {
                int alt28=2;
                switch ( LA(1) ) 
                {
                case FILTER:
                case SYNTHESIZE:
                	{
                		alt28=1;
                	}
                    break;

                }

                switch (alt28) 
                {
            	case 1:
            	    // DataPath.g:233:10: selectRules
            	    {
            	        FOLLOWPUSH(FOLLOW_selectRules_in_selectBody1653);
            	        selectRules126=selectRules(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleselectBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, selectRules126.tree);

            	    }
            	    break;

            	default:
            	    goto loop28;	/* break out of the loop */
            	    break;
                }
            }
            loop28: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleselectBodyEx; /* Prevent compiler warnings */
    ruleselectBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end selectBody */

/** 
 * $ANTLR start selectRules
 * DataPath.g:236:1: selectRules : ( FILTER logical_or_expression SEMICOLON | SYNTHESIZE ID COLON ID EQUAL expression SEMICOLON );
 */
static DataPathParser_selectRules_return
selectRules(pDataPathParser ctx)
{   
    DataPathParser_selectRules_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    FILTER127;
    pANTLR3_COMMON_TOKEN    SEMICOLON129;
    pANTLR3_COMMON_TOKEN    SYNTHESIZE130;
    pANTLR3_COMMON_TOKEN    ID131;
    pANTLR3_COMMON_TOKEN    COLON132;
    pANTLR3_COMMON_TOKEN    ID133;
    pANTLR3_COMMON_TOKEN    EQUAL134;
    pANTLR3_COMMON_TOKEN    SEMICOLON136;
    DataPath_BaseParser_logical_or_expression_return logical_or_expression128;
    #undef	RETURN_TYPE_logical_or_expression128
    #define	RETURN_TYPE_logical_or_expression128 DataPath_BaseParser_logical_or_expression_return

    DataPath_BaseParser_expression_return expression135;
    #undef	RETURN_TYPE_expression135
    #define	RETURN_TYPE_expression135 DataPath_BaseParser_expression_return

    pANTLR3_BASE_TREE FILTER127_tree;
    pANTLR3_BASE_TREE SEMICOLON129_tree;
    pANTLR3_BASE_TREE SYNTHESIZE130_tree;
    pANTLR3_BASE_TREE ID131_tree;
    pANTLR3_BASE_TREE COLON132_tree;
    pANTLR3_BASE_TREE ID133_tree;
    pANTLR3_BASE_TREE EQUAL134_tree;
    pANTLR3_BASE_TREE SEMICOLON136_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    FILTER127       = NULL;
    SEMICOLON129       = NULL;
    SYNTHESIZE130       = NULL;
    ID131       = NULL;
    COLON132       = NULL;
    ID133       = NULL;
    EQUAL134       = NULL;
    SEMICOLON136       = NULL;
    logical_or_expression128.tree = NULL;
    expression135.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    FILTER127_tree   = NULL;
    SEMICOLON129_tree   = NULL;
    SYNTHESIZE130_tree   = NULL;
    ID131_tree   = NULL;
    COLON132_tree   = NULL;
    ID133_tree   = NULL;
    EQUAL134_tree   = NULL;
    SEMICOLON136_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  DataPath.g:237:5: ( FILTER logical_or_expression SEMICOLON | SYNTHESIZE ID COLON ID EQUAL expression SEMICOLON )
            
            ANTLR3_UINT32 alt29;

            alt29=2;

            switch ( LA(1) ) 
            {
            case FILTER:
            	{
            		alt29=1;
            	}
                break;
            case SYNTHESIZE:
            	{
            		alt29=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 29;
                EXCEPTION->state        = 0;


                goto ruleselectRulesEx;
            }

            switch (alt29) 
            {
        	case 1:
        	    // DataPath.g:237:10: FILTER logical_or_expression SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FILTER127 = (pANTLR3_COMMON_TOKEN) MATCHT(FILTER, &FOLLOW_FILTER_in_selectRules1674); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        FILTER127_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, FILTER127));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, FILTER127_tree, root_0));

        	        FOLLOWPUSH(FOLLOW_logical_or_expression_in_selectRules1677);
        	        logical_or_expression128=logical_or_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, logical_or_expression128.tree);
        	        SEMICOLON129 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_selectRules1679); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }


        	    }
        	    break;
        	case 2:
        	    // DataPath.g:238:10: SYNTHESIZE ID COLON ID EQUAL expression SEMICOLON
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        SYNTHESIZE130 = (pANTLR3_COMMON_TOKEN) MATCHT(SYNTHESIZE, &FOLLOW_SYNTHESIZE_in_selectRules1691); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        SYNTHESIZE130_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, SYNTHESIZE130));
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, SYNTHESIZE130_tree, root_0));

        	        ID131 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selectRules1694); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        ID131_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID131));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID131_tree);

        	        COLON132 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_selectRules1696); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        ID133 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_selectRules1699); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        ID133_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID133));
        	        ADAPTOR->addChild(ADAPTOR, root_0, ID133_tree);

        	        EQUAL134 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUAL, &FOLLOW_EQUAL_in_selectRules1701); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expression_in_selectRules1704);
        	        expression135=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression135.tree);
        	        SEMICOLON136 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_selectRules1706); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleselectRulesEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleselectRulesEx; /* Prevent compiler warnings */
    ruleselectRulesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end selectRules */

/** 
 * $ANTLR start aggregateBody
 * DataPath.g:242:1: aggregateBody : ( aggregateRules )* ;
 */
static DataPathParser_aggregateBody_return
aggregateBody(pDataPathParser ctx)
{   
    DataPathParser_aggregateBody_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_aggregateRules_return aggregateRules137;
    #undef	RETURN_TYPE_aggregateRules137
    #define	RETURN_TYPE_aggregateRules137 DataPathParser_aggregateRules_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    aggregateRules137.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:243:5: ( ( aggregateRules )* )
        // DataPath.g:243:10: ( aggregateRules )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // DataPath.g:243:10: ( aggregateRules )*

            for (;;)
            {
                int alt30=2;
                switch ( LA(1) ) 
                {
                case AGGREGATE:
                	{
                		alt30=1;
                	}
                    break;

                }

                switch (alt30) 
                {
            	case 1:
            	    // DataPath.g:243:10: aggregateRules
            	    {
            	        FOLLOWPUSH(FOLLOW_aggregateRules_in_aggregateBody1728);
            	        aggregateRules137=aggregateRules(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleaggregateBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, aggregateRules137.tree);

            	    }
            	    break;

            	default:
            	    goto loop30;	/* break out of the loop */
            	    break;
                }
            }
            loop30: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaggregateBodyEx; /* Prevent compiler warnings */
    ruleaggregateBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end aggregateBody */

/** 
 * $ANTLR start aggregateRules
 * DataPath.g:246:1: aggregateRules : AGGREGATE ID EQUAL ID LPAREN expression RPAREN SEMICOLON ;
 */
static DataPathParser_aggregateRules_return
aggregateRules(pDataPathParser ctx)
{   
    DataPathParser_aggregateRules_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    AGGREGATE138;
    pANTLR3_COMMON_TOKEN    ID139;
    pANTLR3_COMMON_TOKEN    EQUAL140;
    pANTLR3_COMMON_TOKEN    ID141;
    pANTLR3_COMMON_TOKEN    LPAREN142;
    pANTLR3_COMMON_TOKEN    RPAREN144;
    pANTLR3_COMMON_TOKEN    SEMICOLON145;
    DataPath_BaseParser_expression_return expression143;
    #undef	RETURN_TYPE_expression143
    #define	RETURN_TYPE_expression143 DataPath_BaseParser_expression_return

    pANTLR3_BASE_TREE AGGREGATE138_tree;
    pANTLR3_BASE_TREE ID139_tree;
    pANTLR3_BASE_TREE EQUAL140_tree;
    pANTLR3_BASE_TREE ID141_tree;
    pANTLR3_BASE_TREE LPAREN142_tree;
    pANTLR3_BASE_TREE RPAREN144_tree;
    pANTLR3_BASE_TREE SEMICOLON145_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    AGGREGATE138       = NULL;
    ID139       = NULL;
    EQUAL140       = NULL;
    ID141       = NULL;
    LPAREN142       = NULL;
    RPAREN144       = NULL;
    SEMICOLON145       = NULL;
    expression143.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    AGGREGATE138_tree   = NULL;
    ID139_tree   = NULL;
    EQUAL140_tree   = NULL;
    ID141_tree   = NULL;
    LPAREN142_tree   = NULL;
    RPAREN144_tree   = NULL;
    SEMICOLON145_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:247:5: ( AGGREGATE ID EQUAL ID LPAREN expression RPAREN SEMICOLON )
        // DataPath.g:247:10: AGGREGATE ID EQUAL ID LPAREN expression RPAREN SEMICOLON
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            AGGREGATE138 = (pANTLR3_COMMON_TOKEN) MATCHT(AGGREGATE, &FOLLOW_AGGREGATE_in_aggregateRules1749); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            AGGREGATE138_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, AGGREGATE138));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, AGGREGATE138_tree, root_0));

            ID139 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_aggregateRules1752); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            ID139_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID139));
            ADAPTOR->addChild(ADAPTOR, root_0, ID139_tree);

            EQUAL140 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUAL, &FOLLOW_EQUAL_in_aggregateRules1754); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            ID141 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_aggregateRules1757); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            ID141_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID141));
            ADAPTOR->addChild(ADAPTOR, root_0, ID141_tree);

            LPAREN142 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_aggregateRules1759); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            FOLLOWPUSH(FOLLOW_expression_in_aggregateRules1762);
            expression143=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, expression143.tree);
            RPAREN144 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_aggregateRules1764); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            SEMICOLON145 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_aggregateRules1767); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateRulesEx;
            }

            {

                      // add ID to the list of synthesized attributes of qry
                    
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaggregateRulesEx; /* Prevent compiler warnings */
    ruleaggregateRulesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end aggregateRules */

/** 
 * $ANTLR start printBody
 * DataPath.g:252:1: printBody : ( printRules )* ;
 */
static DataPathParser_printBody_return
printBody(pDataPathParser ctx)
{   
    DataPathParser_printBody_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_printRules_return printRules146;
    #undef	RETURN_TYPE_printRules146
    #define	RETURN_TYPE_printRules146 DataPathParser_printRules_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    printRules146.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:253:5: ( ( printRules )* )
        // DataPath.g:253:10: ( printRules )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // DataPath.g:253:10: ( printRules )*

            for (;;)
            {
                int alt31=2;
                switch ( LA(1) ) 
                {
                case PRINT:
                	{
                		alt31=1;
                	}
                    break;

                }

                switch (alt31) 
                {
            	case 1:
            	    // DataPath.g:253:10: printRules
            	    {
            	        FOLLOWPUSH(FOLLOW_printRules_in_printBody1790);
            	        printRules146=printRules(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprintBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, printRules146.tree);

            	    }
            	    break;

            	default:
            	    goto loop31;	/* break out of the loop */
            	    break;
                }
            }
            loop31: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprintBodyEx; /* Prevent compiler warnings */
    ruleprintBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end printBody */

/** 
 * $ANTLR start printRules
 * DataPath.g:256:1: printRules : PRINT expression ( COMMA expression )* SEMICOLON -> ( ^( PRINT expression ) )+ ;
 */
static DataPathParser_printRules_return
printRules(pDataPathParser ctx)
{   
    DataPathParser_printRules_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PRINT147;
    pANTLR3_COMMON_TOKEN    COMMA149;
    pANTLR3_COMMON_TOKEN    SEMICOLON151;
    DataPath_BaseParser_expression_return expression148;
    #undef	RETURN_TYPE_expression148
    #define	RETURN_TYPE_expression148 DataPath_BaseParser_expression_return

    DataPath_BaseParser_expression_return expression150;
    #undef	RETURN_TYPE_expression150
    #define	RETURN_TYPE_expression150 DataPath_BaseParser_expression_return

    pANTLR3_BASE_TREE PRINT147_tree;
    pANTLR3_BASE_TREE COMMA149_tree;
    pANTLR3_BASE_TREE SEMICOLON151_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PRINT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    PRINT147       = NULL;
    COMMA149       = NULL;
    SEMICOLON151       = NULL;
    expression148.tree = NULL;
    expression150.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    PRINT147_tree   = NULL;
    COMMA149_tree   = NULL;
    SEMICOLON151_tree   = NULL;

    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_PRINT   = NULL;
    #define CREATE_stream_PRINT  if (stream_PRINT == NULL) {stream_PRINT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PRINT"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // DataPath.g:257:5: ( PRINT expression ( COMMA expression )* SEMICOLON -> ( ^( PRINT expression ) )+ )
        // DataPath.g:257:10: PRINT expression ( COMMA expression )* SEMICOLON
        {
            PRINT147 = (pANTLR3_COMMON_TOKEN) MATCHT(PRINT, &FOLLOW_PRINT_in_printRules1811); 
            if  (HASEXCEPTION())
            {
                goto ruleprintRulesEx;
            }
             
            CREATE_stream_PRINT; stream_PRINT->add(stream_PRINT, PRINT147, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_printRules1813);
            expression148=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprintRulesEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, expression148.tree, NULL);

            // DataPath.g:257:27: ( COMMA expression )*

            for (;;)
            {
                int alt32=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt32=1;
                	}
                    break;

                }

                switch (alt32) 
                {
            	case 1:
            	    // DataPath.g:257:33: COMMA expression
            	    {
            	        COMMA149 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_printRules1821); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprintRulesEx;
            	        }
            	         
            	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA149, NULL);

            	        FOLLOWPUSH(FOLLOW_expression_in_printRules1823);
            	        expression150=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleprintRulesEx;
            	        }

            	        CREATE_stream_expression; stream_expression->add(stream_expression, expression150.tree, NULL);

            	    }
            	    break;

            	default:
            	    goto loop32;	/* break out of the loop */
            	    break;
                }
            }
            loop32: ; /* Jump out to here if this rule does not match */

            SEMICOLON151 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_printRules1828); 
            if  (HASEXCEPTION())
            {
                goto ruleprintRulesEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON151, NULL);


             
            /* AST REWRITE
             * elements          : PRINT, expression
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 257:63: -> ( ^( PRINT expression ) )+
            	{
            	    if ((stream_PRINT == NULL || !stream_PRINT->hasNext(stream_PRINT)) || (stream_expression == NULL || !stream_expression->hasNext(stream_expression))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_PRINT->hasNext(stream_PRINT)) || (stream_expression->hasNext(stream_expression))  ) {
            	    		// DataPath.g:257:66: ^( PRINT expression )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_PRINT == NULL ? NULL : stream_PRINT->nextNode(stream_PRINT), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_expression == NULL ? NULL : stream_expression->nextTree(stream_expression));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	stream_PRINT->reset(stream_PRINT);
            	    	stream_expression->reset(stream_expression);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprintRulesEx; /* Prevent compiler warnings */
    ruleprintRulesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_PRINT != NULL) stream_PRINT->free(stream_PRINT);
        if (stream_expression != NULL) stream_expression->free(stream_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end printRules */

/** 
 * $ANTLR start joinBody
 * DataPath.g:260:1: joinBody : ( joinRules )* ;
 */
static DataPathParser_joinBody_return
joinBody(pDataPathParser ctx)
{   
    DataPathParser_joinBody_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_joinRules_return joinRules152;
    #undef	RETURN_TYPE_joinRules152
    #define	RETURN_TYPE_joinRules152 DataPathParser_joinRules_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    joinRules152.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:261:5: ( ( joinRules )* )
        // DataPath.g:261:10: ( joinRules )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // DataPath.g:261:10: ( joinRules )*

            for (;;)
            {
                int alt33=2;
                switch ( LA(1) ) 
                {
                case JOIN:
                	{
                		alt33=1;
                	}
                    break;

                }

                switch (alt33) 
                {
            	case 1:
            	    // DataPath.g:261:10: joinRules
            	    {
            	        FOLLOWPUSH(FOLLOW_joinRules_in_joinBody1857);
            	        joinRules152=joinRules(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulejoinBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, joinRules152.tree);

            	    }
            	    break;

            	default:
            	    goto loop33;	/* break out of the loop */
            	    break;
                }
            }
            loop33: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejoinBodyEx; /* Prevent compiler warnings */
    rulejoinBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end joinBody */

/** 
 * $ANTLR start joinRules
 * DataPath.g:264:1: joinRules : JOIN attributeEList SEMICOLON -> ^( JOIN ^( ATTS attributeEList ) ) ;
 */
static DataPathParser_joinRules_return
joinRules(pDataPathParser ctx)
{   
    DataPathParser_joinRules_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    JOIN153;
    pANTLR3_COMMON_TOKEN    SEMICOLON155;
    DataPath_BaseParser_attributeEList_return attributeEList154;
    #undef	RETURN_TYPE_attributeEList154
    #define	RETURN_TYPE_attributeEList154 DataPath_BaseParser_attributeEList_return

    pANTLR3_BASE_TREE JOIN153_tree;
    pANTLR3_BASE_TREE SEMICOLON155_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_JOIN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attributeEList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    JOIN153       = NULL;
    SEMICOLON155       = NULL;
    attributeEList154.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    JOIN153_tree   = NULL;
    SEMICOLON155_tree   = NULL;

    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_JOIN   = NULL;
    #define CREATE_stream_JOIN  if (stream_JOIN == NULL) {stream_JOIN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token JOIN"); } 
    stream_attributeEList   = NULL;
    #define CREATE_stream_attributeEList  if (stream_attributeEList == NULL) {stream_attributeEList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attributeEList"); }

    retval.tree  = NULL;
    {
        // DataPath.g:265:5: ( JOIN attributeEList SEMICOLON -> ^( JOIN ^( ATTS attributeEList ) ) )
        // DataPath.g:265:10: JOIN attributeEList SEMICOLON
        {
            JOIN153 = (pANTLR3_COMMON_TOKEN) MATCHT(JOIN, &FOLLOW_JOIN_in_joinRules1878); 
            if  (HASEXCEPTION())
            {
                goto rulejoinRulesEx;
            }
             
            CREATE_stream_JOIN; stream_JOIN->add(stream_JOIN, JOIN153, NULL);

            FOLLOWPUSH(FOLLOW_attributeEList_in_joinRules1880);
            attributeEList154=attributeEList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulejoinRulesEx;
            }

            CREATE_stream_attributeEList; stream_attributeEList->add(stream_attributeEList, attributeEList154.tree, NULL);
            SEMICOLON155 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_joinRules1882); 
            if  (HASEXCEPTION())
            {
                goto rulejoinRulesEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON155, NULL);


             
            /* AST REWRITE
             * elements          : attributeEList, JOIN
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 265:40: -> ^( JOIN ^( ATTS attributeEList ) )
            	{
            	    // DataPath.g:265:43: ^( JOIN ^( ATTS attributeEList ) )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_JOIN == NULL ? NULL : stream_JOIN->nextNode(stream_JOIN), root_1));

            	        // DataPath.g:265:50: ^( ATTS attributeEList )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTS, (pANTLR3_UINT8)"ATTS"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_attributeEList == NULL ? NULL : stream_attributeEList->nextTree(stream_attributeEList));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejoinRulesEx; /* Prevent compiler warnings */
    rulejoinRulesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_JOIN != NULL) stream_JOIN->free(stream_JOIN);
        if (stream_attributeEList != NULL) stream_attributeEList->free(stream_attributeEList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end joinRules */

/** 
 * $ANTLR start glaBody
 * DataPath.g:268:1: glaBody : ( glaRules )* ;
 */
static DataPathParser_glaBody_return
glaBody(pDataPathParser ctx)
{   
    DataPathParser_glaBody_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPathParser_glaRules_return glaRules156;
    #undef	RETURN_TYPE_glaRules156
    #define	RETURN_TYPE_glaRules156 DataPathParser_glaRules_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    glaRules156.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:269:5: ( ( glaRules )* )
        // DataPath.g:269:10: ( glaRules )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // DataPath.g:269:10: ( glaRules )*

            for (;;)
            {
                int alt34=2;
                switch ( LA(1) ) 
                {
                case GLA:
                	{
                		alt34=1;
                	}
                    break;

                }

                switch (alt34) 
                {
            	case 1:
            	    // DataPath.g:269:10: glaRules
            	    {
            	        FOLLOWPUSH(FOLLOW_glaRules_in_glaBody1914);
            	        glaRules156=glaRules(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaBodyEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, glaRules156.tree);

            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleglaBodyEx; /* Prevent compiler warnings */
    ruleglaBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end glaBody */

/** 
 * $ANTLR start glaRules
 * DataPath.g:272:1: glaRules : GLA ( PLUS )? LPAREN attListWTypes RPAREN EQUAL ID ( LSQ ctAttList RSQ )? LPAREN expressionList RPAREN SEMICOLON -> ^( GLA ( PLUS )? ctAttList ID attListWTypes expressionList ) ;
 */
static DataPathParser_glaRules_return
glaRules(pDataPathParser ctx)
{   
    DataPathParser_glaRules_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    GLA157;
    pANTLR3_COMMON_TOKEN    PLUS158;
    pANTLR3_COMMON_TOKEN    LPAREN159;
    pANTLR3_COMMON_TOKEN    RPAREN161;
    pANTLR3_COMMON_TOKEN    EQUAL162;
    pANTLR3_COMMON_TOKEN    ID163;
    pANTLR3_COMMON_TOKEN    LSQ164;
    pANTLR3_COMMON_TOKEN    RSQ166;
    pANTLR3_COMMON_TOKEN    LPAREN167;
    pANTLR3_COMMON_TOKEN    RPAREN169;
    pANTLR3_COMMON_TOKEN    SEMICOLON170;
    DataPath_BaseParser_attListWTypes_return attListWTypes160;
    #undef	RETURN_TYPE_attListWTypes160
    #define	RETURN_TYPE_attListWTypes160 DataPath_BaseParser_attListWTypes_return

    DataPath_BaseParser_ctAttList_return ctAttList165;
    #undef	RETURN_TYPE_ctAttList165
    #define	RETURN_TYPE_ctAttList165 DataPath_BaseParser_ctAttList_return

    DataPath_BaseParser_expressionList_return expressionList168;
    #undef	RETURN_TYPE_expressionList168
    #define	RETURN_TYPE_expressionList168 DataPath_BaseParser_expressionList_return

    pANTLR3_BASE_TREE GLA157_tree;
    pANTLR3_BASE_TREE PLUS158_tree;
    pANTLR3_BASE_TREE LPAREN159_tree;
    pANTLR3_BASE_TREE RPAREN161_tree;
    pANTLR3_BASE_TREE EQUAL162_tree;
    pANTLR3_BASE_TREE ID163_tree;
    pANTLR3_BASE_TREE LSQ164_tree;
    pANTLR3_BASE_TREE RSQ166_tree;
    pANTLR3_BASE_TREE LPAREN167_tree;
    pANTLR3_BASE_TREE RPAREN169_tree;
    pANTLR3_BASE_TREE SEMICOLON170_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PLUS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_GLA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LSQ;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_EQUAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RSQ;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attListWTypes;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expressionList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_ctAttList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    GLA157       = NULL;
    PLUS158       = NULL;
    LPAREN159       = NULL;
    RPAREN161       = NULL;
    EQUAL162       = NULL;
    ID163       = NULL;
    LSQ164       = NULL;
    RSQ166       = NULL;
    LPAREN167       = NULL;
    RPAREN169       = NULL;
    SEMICOLON170       = NULL;
    attListWTypes160.tree = NULL;
    ctAttList165.tree = NULL;
    expressionList168.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    GLA157_tree   = NULL;
    PLUS158_tree   = NULL;
    LPAREN159_tree   = NULL;
    RPAREN161_tree   = NULL;
    EQUAL162_tree   = NULL;
    ID163_tree   = NULL;
    LSQ164_tree   = NULL;
    RSQ166_tree   = NULL;
    LPAREN167_tree   = NULL;
    RPAREN169_tree   = NULL;
    SEMICOLON170_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_PLUS   = NULL;
    #define CREATE_stream_PLUS  if (stream_PLUS == NULL) {stream_PLUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PLUS"); } 
    stream_GLA   = NULL;
    #define CREATE_stream_GLA  if (stream_GLA == NULL) {stream_GLA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token GLA"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_LSQ   = NULL;
    #define CREATE_stream_LSQ  if (stream_LSQ == NULL) {stream_LSQ = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LSQ"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_EQUAL   = NULL;
    #define CREATE_stream_EQUAL  if (stream_EQUAL == NULL) {stream_EQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token EQUAL"); } 
    stream_RSQ   = NULL;
    #define CREATE_stream_RSQ  if (stream_RSQ == NULL) {stream_RSQ = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RSQ"); } 
    stream_attListWTypes   = NULL;
    #define CREATE_stream_attListWTypes  if (stream_attListWTypes == NULL) {stream_attListWTypes = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attListWTypes"); }
    stream_expressionList   = NULL;
    #define CREATE_stream_expressionList  if (stream_expressionList == NULL) {stream_expressionList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expressionList"); }
    stream_ctAttList   = NULL;
    #define CREATE_stream_ctAttList  if (stream_ctAttList == NULL) {stream_ctAttList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule ctAttList"); }

    retval.tree  = NULL;
    {
        // DataPath.g:273:5: ( GLA ( PLUS )? LPAREN attListWTypes RPAREN EQUAL ID ( LSQ ctAttList RSQ )? LPAREN expressionList RPAREN SEMICOLON -> ^( GLA ( PLUS )? ctAttList ID attListWTypes expressionList ) )
        // DataPath.g:273:10: GLA ( PLUS )? LPAREN attListWTypes RPAREN EQUAL ID ( LSQ ctAttList RSQ )? LPAREN expressionList RPAREN SEMICOLON
        {
            GLA157 = (pANTLR3_COMMON_TOKEN) MATCHT(GLA, &FOLLOW_GLA_in_glaRules1935); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_GLA; stream_GLA->add(stream_GLA, GLA157, NULL);


            // DataPath.g:273:14: ( PLUS )?
            {
                int alt35=2;
                switch ( LA(1) ) 
                {
                    case PLUS:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35) 
                {
            	case 1:
            	    // DataPath.g:273:15: PLUS
            	    {
            	        PLUS158 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_glaRules1938); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaRulesEx;
            	        }
            	         
            	        CREATE_stream_PLUS; stream_PLUS->add(stream_PLUS, PLUS158, NULL);


            	    }
            	    break;

                }
            }
            LPAREN159 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_glaRules1942); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN159, NULL);

            FOLLOWPUSH(FOLLOW_attListWTypes_in_glaRules1944);
            attListWTypes160=attListWTypes(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }

            CREATE_stream_attListWTypes; stream_attListWTypes->add(stream_attListWTypes, attListWTypes160.tree, NULL);
            RPAREN161 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_glaRules1946); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN161, NULL);

            EQUAL162 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUAL, &FOLLOW_EQUAL_in_glaRules1948); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_EQUAL; stream_EQUAL->add(stream_EQUAL, EQUAL162, NULL);

            ID163 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_glaRules1950); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID163, NULL);


            // DataPath.g:273:59: ( LSQ ctAttList RSQ )?
            {
                int alt36=2;
                switch ( LA(1) ) 
                {
                    case LSQ:
                    	{
                    		alt36=1;
                    	}
                        break;
                }

                switch (alt36) 
                {
            	case 1:
            	    // DataPath.g:273:60: LSQ ctAttList RSQ
            	    {
            	        LSQ164 = (pANTLR3_COMMON_TOKEN) MATCHT(LSQ, &FOLLOW_LSQ_in_glaRules1953); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaRulesEx;
            	        }
            	         
            	        CREATE_stream_LSQ; stream_LSQ->add(stream_LSQ, LSQ164, NULL);

            	        FOLLOWPUSH(FOLLOW_ctAttList_in_glaRules1955);
            	        ctAttList165=ctAttList(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaRulesEx;
            	        }

            	        CREATE_stream_ctAttList; stream_ctAttList->add(stream_ctAttList, ctAttList165.tree, NULL);
            	        RSQ166 = (pANTLR3_COMMON_TOKEN) MATCHT(RSQ, &FOLLOW_RSQ_in_glaRules1957); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaRulesEx;
            	        }
            	         
            	        CREATE_stream_RSQ; stream_RSQ->add(stream_RSQ, RSQ166, NULL);


            	    }
            	    break;

                }
            }
            LPAREN167 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_glaRules1961); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN167, NULL);

            FOLLOWPUSH(FOLLOW_expressionList_in_glaRules1963);
            expressionList168=expressionList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }

            CREATE_stream_expressionList; stream_expressionList->add(stream_expressionList, expressionList168.tree, NULL);
            RPAREN169 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_glaRules1966); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN169, NULL);

            SEMICOLON170 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_glaRules1969); 
            if  (HASEXCEPTION())
            {
                goto ruleglaRulesEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON170, NULL);


             
            /* AST REWRITE
             * elements          : ID, expressionList, attListWTypes, ctAttList, GLA, PLUS
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 273:122: -> ^( GLA ( PLUS )? ctAttList ID attListWTypes expressionList )
            	{
            	    // DataPath.g:273:125: ^( GLA ( PLUS )? ctAttList ID attListWTypes expressionList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_GLA == NULL ? NULL : stream_GLA->nextNode(stream_GLA), root_1));

            	        // DataPath.g:273:131: ( PLUS )?
            	        {
            	        	if ( (stream_PLUS != NULL && stream_PLUS->hasNext(stream_PLUS))  )
            	        	{
            	        		ADAPTOR->addChild(ADAPTOR, root_1, stream_PLUS == NULL ? NULL : stream_PLUS->nextNode(stream_PLUS));

            	        	}
            	        	if ( stream_PLUS != NULL) stream_PLUS->reset(stream_PLUS);

            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ctAttList == NULL ? NULL : stream_ctAttList->nextTree(stream_ctAttList));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_attListWTypes == NULL ? NULL : stream_attListWTypes->nextTree(stream_attListWTypes));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expressionList == NULL ? NULL : stream_expressionList->nextTree(stream_expressionList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleglaRulesEx; /* Prevent compiler warnings */
    ruleglaRulesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_PLUS != NULL) stream_PLUS->free(stream_PLUS);
        if (stream_GLA != NULL) stream_GLA->free(stream_GLA);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_LSQ != NULL) stream_LSQ->free(stream_LSQ);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_EQUAL != NULL) stream_EQUAL->free(stream_EQUAL);
        if (stream_RSQ != NULL) stream_RSQ->free(stream_RSQ);
        if (stream_attListWTypes != NULL) stream_attListWTypes->free(stream_attListWTypes);
        if (stream_expressionList != NULL) stream_expressionList->free(stream_expressionList);
        if (stream_ctAttList != NULL) stream_ctAttList->free(stream_ctAttList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end glaRules */

/** 
 * $ANTLR start bypass
 * DataPath.g:276:1: bypass : BYPASS ID ( COMMA ID )* SEMICOLON -> ( ^( BYPASS ID ) )+ ;
 */
static DataPathParser_bypass_return
bypass(pDataPathParser ctx)
{   
    DataPathParser_bypass_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BYPASS171;
    pANTLR3_COMMON_TOKEN    ID172;
    pANTLR3_COMMON_TOKEN    COMMA173;
    pANTLR3_COMMON_TOKEN    ID174;
    pANTLR3_COMMON_TOKEN    SEMICOLON175;

    pANTLR3_BASE_TREE BYPASS171_tree;
    pANTLR3_BASE_TREE ID172_tree;
    pANTLR3_BASE_TREE COMMA173_tree;
    pANTLR3_BASE_TREE ID174_tree;
    pANTLR3_BASE_TREE SEMICOLON175_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BYPASS;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BYPASS171       = NULL;
    ID172       = NULL;
    COMMA173       = NULL;
    ID174       = NULL;
    SEMICOLON175       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    BYPASS171_tree   = NULL;
    ID172_tree   = NULL;
    COMMA173_tree   = NULL;
    ID174_tree   = NULL;
    SEMICOLON175_tree   = NULL;

    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_BYPASS   = NULL;
    #define CREATE_stream_BYPASS  if (stream_BYPASS == NULL) {stream_BYPASS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BYPASS"); } 

    retval.tree  = NULL;
    {
        // DataPath.g:276:12: ( BYPASS ID ( COMMA ID )* SEMICOLON -> ( ^( BYPASS ID ) )+ )
        // DataPath.g:276:17: BYPASS ID ( COMMA ID )* SEMICOLON
        {
            BYPASS171 = (pANTLR3_COMMON_TOKEN) MATCHT(BYPASS, &FOLLOW_BYPASS_in_bypass2010); 
            if  (HASEXCEPTION())
            {
                goto rulebypassEx;
            }
             
            CREATE_stream_BYPASS; stream_BYPASS->add(stream_BYPASS, BYPASS171, NULL);

            ID172 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_bypass2012); 
            if  (HASEXCEPTION())
            {
                goto rulebypassEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID172, NULL);


            // DataPath.g:276:27: ( COMMA ID )*

            for (;;)
            {
                int alt37=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37) 
                {
            	case 1:
            	    // DataPath.g:276:33: COMMA ID
            	    {
            	        COMMA173 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_bypass2020); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebypassEx;
            	        }
            	         
            	        CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA173, NULL);

            	        ID174 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_bypass2022); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulebypassEx;
            	        }
            	         
            	        CREATE_stream_ID; stream_ID->add(stream_ID, ID174, NULL);


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */

            SEMICOLON175 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_bypass2028); 
            if  (HASEXCEPTION())
            {
                goto rulebypassEx;
            }
             
            CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON175, NULL);


             
            /* AST REWRITE
             * elements          : ID, BYPASS
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 276:56: -> ( ^( BYPASS ID ) )+
            	{
            	    if ((stream_ID == NULL || !stream_ID->hasNext(stream_ID)) || (stream_BYPASS == NULL || !stream_BYPASS->hasNext(stream_BYPASS))  )
            	    {
            	        CONSTRUCTEX();
            	        EXCEPTION->type         = ANTLR3_REWRITE_EARLY_EXCEPTION;
            	        EXCEPTION->name         = (void *)ANTLR3_REWRITE_EARLY_EXCEPTION_NAME;
            	    }
            	    else
            	    {
            	    	while ( (stream_ID->hasNext(stream_ID)) || (stream_BYPASS->hasNext(stream_BYPASS))  ) {
            	    		// DataPath.g:276:59: ^( BYPASS ID )
            	    		{
            	    		    pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	    		    root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_BYPASS == NULL ? NULL : stream_BYPASS->nextNode(stream_BYPASS), root_1));

            	    		    ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	    		    ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    		}

            	    	}
            	    	stream_ID->reset(stream_ID);
            	    	stream_BYPASS->reset(stream_BYPASS);

            	    }
            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulebypassEx; /* Prevent compiler warnings */
    rulebypassEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_BYPASS != NULL) stream_BYPASS->free(stream_BYPASS);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end bypass */

/** 
 * $ANTLR start queryList
 * DataPath.g:279:1: queryList : idList ;
 */
static DataPathParser_queryList_return
queryList(pDataPathParser ctx)
{   
    DataPathParser_queryList_return retval;

    pANTLR3_BASE_TREE root_0;

    DataPath_BaseParser_idList_return idList176;
    #undef	RETURN_TYPE_idList176
    #define	RETURN_TYPE_idList176 DataPath_BaseParser_idList_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    idList176.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // DataPath.g:280:5: ( idList )
        // DataPath.g:280:10: idList
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_idList_in_queryList2057);
            idList176=idList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulequeryListEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, idList176.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulequeryListEx; /* Prevent compiler warnings */
    rulequeryListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end queryList */

/** 
 * $ANTLR start wpDefinition
 * DataPath.g:283:1: wpDefinition[bool isNew] : ({...}? -> | {...}? EQUAL ( selectWP | joinWP | aggregateWP | printWP | textloaderWP | glaWP ) );
 */
static DataPathParser_wpDefinition_return
wpDefinition(pDataPathParser ctx, bool isNew)
{   
    DataPathParser_wpDefinition_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    EQUAL177;
    DataPathParser_selectWP_return selectWP178;
    #undef	RETURN_TYPE_selectWP178
    #define	RETURN_TYPE_selectWP178 DataPathParser_selectWP_return

    DataPathParser_joinWP_return joinWP179;
    #undef	RETURN_TYPE_joinWP179
    #define	RETURN_TYPE_joinWP179 DataPathParser_joinWP_return

    DataPathParser_aggregateWP_return aggregateWP180;
    #undef	RETURN_TYPE_aggregateWP180
    #define	RETURN_TYPE_aggregateWP180 DataPathParser_aggregateWP_return

    DataPathParser_printWP_return printWP181;
    #undef	RETURN_TYPE_printWP181
    #define	RETURN_TYPE_printWP181 DataPathParser_printWP_return

    DataPathParser_textloaderWP_return textloaderWP182;
    #undef	RETURN_TYPE_textloaderWP182
    #define	RETURN_TYPE_textloaderWP182 DataPathParser_textloaderWP_return

    DataPathParser_glaWP_return glaWP183;
    #undef	RETURN_TYPE_glaWP183
    #define	RETURN_TYPE_glaWP183 DataPathParser_glaWP_return

    pANTLR3_BASE_TREE EQUAL177_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    EQUAL177       = NULL;
    selectWP178.tree = NULL;
    joinWP179.tree = NULL;
    aggregateWP180.tree = NULL;
    printWP181.tree = NULL;
    textloaderWP182.tree = NULL;
    glaWP183.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    EQUAL177_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  DataPath.g:284:5: ({...}? -> | {...}? EQUAL ( selectWP | joinWP | aggregateWP | printWP | textloaderWP | glaWP ) )
            
            ANTLR3_UINT32 alt39;

            alt39=2;

            switch ( LA(1) ) 
            {
            case SEMICOLON:
            case 111:
            	{
            		alt39=1;
            	}
                break;
            case EQUAL:
            	{
            		alt39=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 39;
                EXCEPTION->state        = 0;


                goto rulewpDefinitionEx;
            }

            switch (alt39) 
            {
        	case 1:
        	    // DataPath.g:284:10: {...}?
        	    {
        	        if ( !((isNew==false)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"isNew==false";
        	                EXCEPTION->ruleName	 = (void *)"wpDefinition";


        	        }

        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 284:40: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:285:10: {...}? EQUAL ( selectWP | joinWP | aggregateWP | printWP | textloaderWP | glaWP )
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        if ( !((isNew==true)) ) 
        	        {
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_FAILED_PREDICATE_EXCEPTION;
        	                EXCEPTION->message      = (void *)"isNew==true";
        	                EXCEPTION->ruleName	 = (void *)"wpDefinition";


        	        }
        	        EQUAL177 = (pANTLR3_COMMON_TOKEN) MATCHT(EQUAL, &FOLLOW_EQUAL_in_wpDefinition2098); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulewpDefinitionEx;
        	        }


        	        // DataPath.g:285:32: ( selectWP | joinWP | aggregateWP | printWP | textloaderWP | glaWP )
        	        {
        	            int alt38=6;
        	            switch ( LA(1) ) 
        	            {
        	            case SELECT:
        	            	{
        	            		alt38=1;
        	            	}
        	                break;
        	            case JOIN:
        	            	{
        	            		alt38=2;
        	            	}
        	                break;
        	            case AGGREGATE:
        	            	{
        	            		alt38=3;
        	            	}
        	                break;
        	            case PRINT:
        	            	{
        	            		alt38=4;
        	            	}
        	                break;
        	            case TEXTLOADER:
        	            	{
        	            		alt38=5;
        	            	}
        	                break;
        	            case GLA:
        	            	{
        	            		alt38=6;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 38;
        	                EXCEPTION->state        = 0;


        	                goto rulewpDefinitionEx;
        	            }

        	            switch (alt38) 
        	            {
        	        	case 1:
        	        	    // DataPath.g:285:34: selectWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_selectWP_in_wpDefinition2103);
        	        	        selectWP178=selectWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, selectWP178.tree);

        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // DataPath.g:285:45: joinWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_joinWP_in_wpDefinition2107);
        	        	        joinWP179=joinWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, joinWP179.tree);

        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // DataPath.g:285:54: aggregateWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_aggregateWP_in_wpDefinition2111);
        	        	        aggregateWP180=aggregateWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, aggregateWP180.tree);

        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // DataPath.g:285:68: printWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_printWP_in_wpDefinition2115);
        	        	        printWP181=printWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, printWP181.tree);

        	        	    }
        	        	    break;
        	        	case 5:
        	        	    // DataPath.g:285:78: textloaderWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_textloaderWP_in_wpDefinition2119);
        	        	        textloaderWP182=textloaderWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, textloaderWP182.tree);

        	        	    }
        	        	    break;
        	        	case 6:
        	        	    // DataPath.g:285:93: glaWP
        	        	    {
        	        	        FOLLOWPUSH(FOLLOW_glaWP_in_wpDefinition2123);
        	        	        glaWP183=glaWP(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulewpDefinitionEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, glaWP183.tree);

        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulewpDefinitionEx; /* Prevent compiler warnings */
    rulewpDefinitionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end wpDefinition */

/** 
 * $ANTLR start selectWP
 * DataPath.g:288:1: selectWP : s= SELECT CONNECTIONS connList -> ^( SELECT__[$s] connList ) ;
 */
static DataPathParser_selectWP_return
selectWP(pDataPathParser ctx)
{   
    DataPathParser_selectWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    s;
    pANTLR3_COMMON_TOKEN    CONNECTIONS184;
    DataPathParser_connList_return connList185;
    #undef	RETURN_TYPE_connList185
    #define	RETURN_TYPE_connList185 DataPathParser_connList_return

    pANTLR3_BASE_TREE s_tree;
    pANTLR3_BASE_TREE CONNECTIONS184_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SELECT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CONNECTIONS;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_connList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    s       = NULL;
    CONNECTIONS184       = NULL;
    connList185.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    s_tree   = NULL;
    CONNECTIONS184_tree   = NULL;

    stream_SELECT   = NULL;
    #define CREATE_stream_SELECT  if (stream_SELECT == NULL) {stream_SELECT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SELECT"); } 
    stream_CONNECTIONS   = NULL;
    #define CREATE_stream_CONNECTIONS  if (stream_CONNECTIONS == NULL) {stream_CONNECTIONS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CONNECTIONS"); } 
    stream_connList   = NULL;
    #define CREATE_stream_connList  if (stream_connList == NULL) {stream_connList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule connList"); }

    retval.tree  = NULL;
    {
        // DataPath.g:289:5: (s= SELECT CONNECTIONS connList -> ^( SELECT__[$s] connList ) )
        // DataPath.g:289:10: s= SELECT CONNECTIONS connList
        {
            s = (pANTLR3_COMMON_TOKEN) MATCHT(SELECT, &FOLLOW_SELECT_in_selectWP2146); 
            if  (HASEXCEPTION())
            {
                goto ruleselectWPEx;
            }
             
            CREATE_stream_SELECT; stream_SELECT->add(stream_SELECT, s, NULL);

            {

                            typeMap[wp]=SelectionWaypoint;
                        
            }
            CONNECTIONS184 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_selectWP2150); 
            if  (HASEXCEPTION())
            {
                goto ruleselectWPEx;
            }
             
            CREATE_stream_CONNECTIONS; stream_CONNECTIONS->add(stream_CONNECTIONS, CONNECTIONS184, NULL);

            FOLLOWPUSH(FOLLOW_connList_in_selectWP2152);
            connList185=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleselectWPEx;
            }

            CREATE_stream_connList; stream_connList->add(stream_connList, connList185.tree, NULL);

             
            /* AST REWRITE
             * elements          : connList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 291:32: -> ^( SELECT__[$s] connList )
            	{
            	    // DataPath.g:291:35: ^( SELECT__[$s] connList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        #if 1 == 2
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, SELECT__, TOKTEXT(s))
            	        #else
            	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, SELECT__, (pANTLR3_UINT8)s)
            	        #endif
            	        , root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_connList == NULL ? NULL : stream_connList->nextTree(stream_connList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleselectWPEx; /* Prevent compiler warnings */
    ruleselectWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SELECT != NULL) stream_SELECT->free(stream_SELECT);
        if (stream_CONNECTIONS != NULL) stream_CONNECTIONS->free(stream_CONNECTIONS);
        if (stream_connList != NULL) stream_connList->free(stream_connList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end selectWP */

/** 
 * $ANTLR start joinWP
 * DataPath.g:294:1: joinWP : JOIN LPAREN attributeList RPAREN CONNECTIONS connList -> ^( JOIN ^( ATTS attributeList ) connList ) ;
 */
static DataPathParser_joinWP_return
joinWP(pDataPathParser ctx)
{   
    DataPathParser_joinWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    JOIN186;
    pANTLR3_COMMON_TOKEN    LPAREN187;
    pANTLR3_COMMON_TOKEN    RPAREN189;
    pANTLR3_COMMON_TOKEN    CONNECTIONS190;
    DataPath_BaseParser_attributeList_return attributeList188;
    #undef	RETURN_TYPE_attributeList188
    #define	RETURN_TYPE_attributeList188 DataPath_BaseParser_attributeList_return

    DataPathParser_connList_return connList191;
    #undef	RETURN_TYPE_connList191
    #define	RETURN_TYPE_connList191 DataPathParser_connList_return

    pANTLR3_BASE_TREE JOIN186_tree;
    pANTLR3_BASE_TREE LPAREN187_tree;
    pANTLR3_BASE_TREE RPAREN189_tree;
    pANTLR3_BASE_TREE CONNECTIONS190_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_JOIN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CONNECTIONS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attributeList;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_connList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    JOIN186       = NULL;
    LPAREN187       = NULL;
    RPAREN189       = NULL;
    CONNECTIONS190       = NULL;
    attributeList188.tree = NULL;
    connList191.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    JOIN186_tree   = NULL;
    LPAREN187_tree   = NULL;
    RPAREN189_tree   = NULL;
    CONNECTIONS190_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_JOIN   = NULL;
    #define CREATE_stream_JOIN  if (stream_JOIN == NULL) {stream_JOIN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token JOIN"); } 
    stream_CONNECTIONS   = NULL;
    #define CREATE_stream_CONNECTIONS  if (stream_CONNECTIONS == NULL) {stream_CONNECTIONS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CONNECTIONS"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_attributeList   = NULL;
    #define CREATE_stream_attributeList  if (stream_attributeList == NULL) {stream_attributeList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attributeList"); }
    stream_connList   = NULL;
    #define CREATE_stream_connList  if (stream_connList == NULL) {stream_connList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule connList"); }

    retval.tree  = NULL;
    {
        // DataPath.g:295:5: ( JOIN LPAREN attributeList RPAREN CONNECTIONS connList -> ^( JOIN ^( ATTS attributeList ) connList ) )
        // DataPath.g:295:7: JOIN LPAREN attributeList RPAREN CONNECTIONS connList
        {
            JOIN186 = (pANTLR3_COMMON_TOKEN) MATCHT(JOIN, &FOLLOW_JOIN_in_joinWP2178); 
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }
             
            CREATE_stream_JOIN; stream_JOIN->add(stream_JOIN, JOIN186, NULL);

            {

                            typeMap[wp]=JoinWaypoint;
                        
            }
            LPAREN187 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_joinWP2181); 
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN187, NULL);

            FOLLOWPUSH(FOLLOW_attributeList_in_joinWP2183);
            attributeList188=attributeList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }

            CREATE_stream_attributeList; stream_attributeList->add(stream_attributeList, attributeList188.tree, NULL);
            RPAREN189 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_joinWP2185); 
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN189, NULL);

            CONNECTIONS190 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_joinWP2187); 
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }
             
            CREATE_stream_CONNECTIONS; stream_CONNECTIONS->add(stream_CONNECTIONS, CONNECTIONS190, NULL);

            FOLLOWPUSH(FOLLOW_connList_in_joinWP2189);
            connList191=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulejoinWPEx;
            }

            CREATE_stream_connList; stream_connList->add(stream_connList, connList191.tree, NULL);

             
            /* AST REWRITE
             * elements          : connList, attributeList, JOIN
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 297:59: -> ^( JOIN ^( ATTS attributeList ) connList )
            	{
            	    // DataPath.g:297:62: ^( JOIN ^( ATTS attributeList ) connList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_JOIN == NULL ? NULL : stream_JOIN->nextNode(stream_JOIN), root_1));

            	        // DataPath.g:297:69: ^( ATTS attributeList )
            	        {
            	            pANTLR3_BASE_TREE root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	            root_2 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTS, (pANTLR3_UINT8)"ATTS"), root_2));

            	            ADAPTOR->addChild(ADAPTOR, root_2, stream_attributeList == NULL ? NULL : stream_attributeList->nextTree(stream_attributeList));

            	            ADAPTOR->addChild(ADAPTOR, root_1, root_2);
            	        }
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_connList == NULL ? NULL : stream_connList->nextTree(stream_connList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulejoinWPEx; /* Prevent compiler warnings */
    rulejoinWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_JOIN != NULL) stream_JOIN->free(stream_JOIN);
        if (stream_CONNECTIONS != NULL) stream_CONNECTIONS->free(stream_CONNECTIONS);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_attributeList != NULL) stream_attributeList->free(stream_attributeList);
        if (stream_connList != NULL) stream_connList->free(stream_connList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end joinWP */

/** 
 * $ANTLR start aggregateWP
 * DataPath.g:300:1: aggregateWP : AGGREGATE CONNECTIONS connList ;
 */
static DataPathParser_aggregateWP_return
aggregateWP(pDataPathParser ctx)
{   
    DataPathParser_aggregateWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    AGGREGATE192;
    pANTLR3_COMMON_TOKEN    CONNECTIONS193;
    DataPathParser_connList_return connList194;
    #undef	RETURN_TYPE_connList194
    #define	RETURN_TYPE_connList194 DataPathParser_connList_return

    pANTLR3_BASE_TREE AGGREGATE192_tree;
    pANTLR3_BASE_TREE CONNECTIONS193_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    AGGREGATE192       = NULL;
    CONNECTIONS193       = NULL;
    connList194.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    AGGREGATE192_tree   = NULL;
    CONNECTIONS193_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:301:5: ( AGGREGATE CONNECTIONS connList )
        // DataPath.g:301:10: AGGREGATE CONNECTIONS connList
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            AGGREGATE192 = (pANTLR3_COMMON_TOKEN) MATCHT(AGGREGATE, &FOLLOW_AGGREGATE_in_aggregateWP2223); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateWPEx;
            }

            AGGREGATE192_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, AGGREGATE192));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, AGGREGATE192_tree, root_0));

            {

                      typeMap[wp]=AggregateWaypoint;
                    
            }
            CONNECTIONS193 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_aggregateWP2228); 
            if  (HASEXCEPTION())
            {
                goto ruleaggregateWPEx;
            }

            FOLLOWPUSH(FOLLOW_connList_in_aggregateWP2231);
            connList194=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleaggregateWPEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, connList194.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleaggregateWPEx; /* Prevent compiler warnings */
    ruleaggregateWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end aggregateWP */

/** 
 * $ANTLR start printWP
 * DataPath.g:306:1: printWP : PRINT CONNECTIONS connList ;
 */
static DataPathParser_printWP_return
printWP(pDataPathParser ctx)
{   
    DataPathParser_printWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    PRINT195;
    pANTLR3_COMMON_TOKEN    CONNECTIONS196;
    DataPathParser_connList_return connList197;
    #undef	RETURN_TYPE_connList197
    #define	RETURN_TYPE_connList197 DataPathParser_connList_return

    pANTLR3_BASE_TREE PRINT195_tree;
    pANTLR3_BASE_TREE CONNECTIONS196_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    PRINT195       = NULL;
    CONNECTIONS196       = NULL;
    connList197.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    PRINT195_tree   = NULL;
    CONNECTIONS196_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:306:12: ( PRINT CONNECTIONS connList )
        // DataPath.g:306:17: PRINT CONNECTIONS connList
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            PRINT195 = (pANTLR3_COMMON_TOKEN) MATCHT(PRINT, &FOLLOW_PRINT_in_printWP2248); 
            if  (HASEXCEPTION())
            {
                goto ruleprintWPEx;
            }

            PRINT195_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, PRINT195));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, PRINT195_tree, root_0));

            {

                            typeMap[wp]=PrintWaypoint;
                        
            }
            CONNECTIONS196 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_printWP2252); 
            if  (HASEXCEPTION())
            {
                goto ruleprintWPEx;
            }

            FOLLOWPUSH(FOLLOW_connList_in_printWP2255);
            connList197=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleprintWPEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, connList197.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleprintWPEx; /* Prevent compiler warnings */
    ruleprintWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end printWP */

/** 
 * $ANTLR start glaWP
 * DataPath.g:311:1: glaWP : GLA ( PLUS )? CONNECTIONS connList ;
 */
static DataPathParser_glaWP_return
glaWP(pDataPathParser ctx)
{   
    DataPathParser_glaWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    GLA198;
    pANTLR3_COMMON_TOKEN    PLUS199;
    pANTLR3_COMMON_TOKEN    CONNECTIONS200;
    DataPathParser_connList_return connList201;
    #undef	RETURN_TYPE_connList201
    #define	RETURN_TYPE_connList201 DataPathParser_connList_return

    pANTLR3_BASE_TREE GLA198_tree;
    pANTLR3_BASE_TREE PLUS199_tree;
    pANTLR3_BASE_TREE CONNECTIONS200_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    GLA198       = NULL;
    PLUS199       = NULL;
    CONNECTIONS200       = NULL;
    connList201.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    GLA198_tree   = NULL;
    PLUS199_tree   = NULL;
    CONNECTIONS200_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:311:10: ( GLA ( PLUS )? CONNECTIONS connList )
        // DataPath.g:311:15: GLA ( PLUS )? CONNECTIONS connList
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            GLA198 = (pANTLR3_COMMON_TOKEN) MATCHT(GLA, &FOLLOW_GLA_in_glaWP2272); 
            if  (HASEXCEPTION())
            {
                goto ruleglaWPEx;
            }

            GLA198_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, GLA198));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, GLA198_tree, root_0));

            {

                            typeMap[wp]=GLAWaypoint;
                        
            }

            // DataPath.g:313:11: ( PLUS )?
            {
                int alt40=2;
                switch ( LA(1) ) 
                {
                    case PLUS:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40) 
                {
            	case 1:
            	    // DataPath.g:313:11: PLUS
            	    {
            	        PLUS199 = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_glaWP2277); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleglaWPEx;
            	        }

            	        PLUS199_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, PLUS199));
            	        ADAPTOR->addChild(ADAPTOR, root_0, PLUS199_tree);


            	    }
            	    break;

                }
            }
            CONNECTIONS200 = (pANTLR3_COMMON_TOKEN) MATCHT(CONNECTIONS, &FOLLOW_CONNECTIONS_in_glaWP2280); 
            if  (HASEXCEPTION())
            {
                goto ruleglaWPEx;
            }

            FOLLOWPUSH(FOLLOW_connList_in_glaWP2283);
            connList201=connList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleglaWPEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, connList201.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleglaWPEx; /* Prevent compiler warnings */
    ruleglaWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end glaWP */

/** 
 * $ANTLR start connList
 * DataPath.g:316:1: connList : wayPointCN ( COMMA wayPointCN )* ;
 */
static DataPathParser_connList_return
connList(pDataPathParser ctx)
{   
    DataPathParser_connList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA203;
    DataPathParser_wayPointCN_return wayPointCN202;
    #undef	RETURN_TYPE_wayPointCN202
    #define	RETURN_TYPE_wayPointCN202 DataPathParser_wayPointCN_return

    DataPathParser_wayPointCN_return wayPointCN204;
    #undef	RETURN_TYPE_wayPointCN204
    #define	RETURN_TYPE_wayPointCN204 DataPathParser_wayPointCN_return

    pANTLR3_BASE_TREE COMMA203_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA203       = NULL;
    wayPointCN202.tree = NULL;
    wayPointCN204.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA203_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:317:5: ( wayPointCN ( COMMA wayPointCN )* )
        // DataPath.g:317:10: wayPointCN ( COMMA wayPointCN )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_wayPointCN_in_connList2301);
            wayPointCN202=wayPointCN(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconnListEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, wayPointCN202.tree);

            // DataPath.g:317:21: ( COMMA wayPointCN )*

            for (;;)
            {
                int alt41=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt41=1;
                	}
                    break;

                }

                switch (alt41) 
                {
            	case 1:
            	    // DataPath.g:317:27: COMMA wayPointCN
            	    {
            	        COMMA203 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_connList2309); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconnListEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_wayPointCN_in_connList2312);
            	        wayPointCN204=wayPointCN(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconnListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, wayPointCN204.tree);

            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconnListEx; /* Prevent compiler warnings */
    ruleconnListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end connList */

/** 
 * $ANTLR start textloaderWP
 * DataPath.g:320:1: textloaderWP : TEXTLOADER '{' ( textloaderBody )+ '}' ;
 */
static DataPathParser_textloaderWP_return
textloaderWP(pDataPathParser ctx)
{   
    DataPathParser_textloaderWP_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    TEXTLOADER205;
    pANTLR3_COMMON_TOKEN    char_literal206;
    pANTLR3_COMMON_TOKEN    char_literal208;
    DataPathParser_textloaderBody_return textloaderBody207;
    #undef	RETURN_TYPE_textloaderBody207
    #define	RETURN_TYPE_textloaderBody207 DataPathParser_textloaderBody_return

    pANTLR3_BASE_TREE TEXTLOADER205_tree;
    pANTLR3_BASE_TREE char_literal206_tree;
    pANTLR3_BASE_TREE char_literal208_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    TEXTLOADER205       = NULL;
    char_literal206       = NULL;
    char_literal208       = NULL;
    textloaderBody207.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    TEXTLOADER205_tree   = NULL;
    char_literal206_tree   = NULL;
    char_literal208_tree   = NULL;


    retval.tree  = NULL;
    {
        // DataPath.g:320:14: ( TEXTLOADER '{' ( textloaderBody )+ '}' )
        // DataPath.g:321:5: TEXTLOADER '{' ( textloaderBody )+ '}'
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            TEXTLOADER205 = (pANTLR3_COMMON_TOKEN) MATCHT(TEXTLOADER, &FOLLOW_TEXTLOADER_in_textloaderWP2332); 
            if  (HASEXCEPTION())
            {
                goto ruletextloaderWPEx;
            }

            TEXTLOADER205_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, TEXTLOADER205));
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, TEXTLOADER205_tree, root_0));

            {
                typeMap[wp]=TextLoaderWaypoint;
            }
            char_literal206 = (pANTLR3_COMMON_TOKEN) MATCHT(111, &FOLLOW_111_in_textloaderWP2337); 
            if  (HASEXCEPTION())
            {
                goto ruletextloaderWPEx;
            }

            // DataPath.g:321:56: ( textloaderBody )+
            {
                int cnt42=0;

                for (;;)
                {
                    int alt42=2;
            	switch ( LA(1) ) 
            	{
            	case SEPARATOR:
            	case ATTRIBUTES:
            	case FILE:
            		{
            			alt42=1;
            		}
            	    break;

            	}

            	switch (alt42) 
            	{
            	    case 1:
            	        // DataPath.g:321:56: textloaderBody
            	        {
            	            FOLLOWPUSH(FOLLOW_textloaderBody_in_textloaderWP2340);
            	            textloaderBody207=textloaderBody(ctx);

            	            FOLLOWPOP();
            	            if  (HASEXCEPTION())
            	            {
            	                goto ruletextloaderWPEx;
            	            }

            	            ADAPTOR->addChild(ADAPTOR, root_0, textloaderBody207.tree);

            	        }
            	        break;

            	    default:
            	    
            		if ( cnt42 >= 1 )
            		{
            		    goto loop42;
            		}
            		/* mismatchedSetEx()
            		 */
            		CONSTRUCTEX();
            		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
            		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


            		goto ruletextloaderWPEx;
            	}
            	cnt42++;
                }
                loop42: ;	/* Jump to here if this rule does not match */
            }
            char_literal208 = (pANTLR3_COMMON_TOKEN) MATCHT(112, &FOLLOW_112_in_textloaderWP2343); 
            if  (HASEXCEPTION())
            {
                goto ruletextloaderWPEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruletextloaderWPEx; /* Prevent compiler warnings */
    ruletextloaderWPEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end textloaderWP */

/** 
 * $ANTLR start textloaderBody
 * DataPath.g:324:1: textloaderBody : ( ATTRIBUTES FROM ID SEMICOLON -> ^( ATTFROM ID ) | SEPARATOR STRING SEMICOLON -> ^( SEPARATOR STRING ) | FILE STRING INT SEMICOLON -> ^( FILE__ STRING INT ) );
 */
static DataPathParser_textloaderBody_return
textloaderBody(pDataPathParser ctx)
{   
    DataPathParser_textloaderBody_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ATTRIBUTES209;
    pANTLR3_COMMON_TOKEN    FROM210;
    pANTLR3_COMMON_TOKEN    ID211;
    pANTLR3_COMMON_TOKEN    SEMICOLON212;
    pANTLR3_COMMON_TOKEN    SEPARATOR213;
    pANTLR3_COMMON_TOKEN    STRING214;
    pANTLR3_COMMON_TOKEN    SEMICOLON215;
    pANTLR3_COMMON_TOKEN    FILE216;
    pANTLR3_COMMON_TOKEN    STRING217;
    pANTLR3_COMMON_TOKEN    INT218;
    pANTLR3_COMMON_TOKEN    SEMICOLON219;

    pANTLR3_BASE_TREE ATTRIBUTES209_tree;
    pANTLR3_BASE_TREE FROM210_tree;
    pANTLR3_BASE_TREE ID211_tree;
    pANTLR3_BASE_TREE SEMICOLON212_tree;
    pANTLR3_BASE_TREE SEPARATOR213_tree;
    pANTLR3_BASE_TREE STRING214_tree;
    pANTLR3_BASE_TREE SEMICOLON215_tree;
    pANTLR3_BASE_TREE FILE216_tree;
    pANTLR3_BASE_TREE STRING217_tree;
    pANTLR3_BASE_TREE INT218_tree;
    pANTLR3_BASE_TREE SEMICOLON219_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_INT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEMICOLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SEPARATOR;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ATTRIBUTES;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FROM;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_FILE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ATTRIBUTES209       = NULL;
    FROM210       = NULL;
    ID211       = NULL;
    SEMICOLON212       = NULL;
    SEPARATOR213       = NULL;
    STRING214       = NULL;
    SEMICOLON215       = NULL;
    FILE216       = NULL;
    STRING217       = NULL;
    INT218       = NULL;
    SEMICOLON219       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ATTRIBUTES209_tree   = NULL;
    FROM210_tree   = NULL;
    ID211_tree   = NULL;
    SEMICOLON212_tree   = NULL;
    SEPARATOR213_tree   = NULL;
    STRING214_tree   = NULL;
    SEMICOLON215_tree   = NULL;
    FILE216_tree   = NULL;
    STRING217_tree   = NULL;
    INT218_tree   = NULL;
    SEMICOLON219_tree   = NULL;

    stream_INT   = NULL;
    #define CREATE_stream_INT  if (stream_INT == NULL) {stream_INT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token INT"); } 
    stream_SEMICOLON   = NULL;
    #define CREATE_stream_SEMICOLON  if (stream_SEMICOLON == NULL) {stream_SEMICOLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEMICOLON"); } 
    stream_SEPARATOR   = NULL;
    #define CREATE_stream_SEPARATOR  if (stream_SEPARATOR == NULL) {stream_SEPARATOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SEPARATOR"); } 
    stream_ATTRIBUTES   = NULL;
    #define CREATE_stream_ATTRIBUTES  if (stream_ATTRIBUTES == NULL) {stream_ATTRIBUTES = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ATTRIBUTES"); } 
    stream_FROM   = NULL;
    #define CREATE_stream_FROM  if (stream_FROM == NULL) {stream_FROM = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FROM"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_FILE   = NULL;
    #define CREATE_stream_FILE  if (stream_FILE == NULL) {stream_FILE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token FILE"); } 
    stream_STRING   = NULL;
    #define CREATE_stream_STRING  if (stream_STRING == NULL) {stream_STRING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:324:16: ( ATTRIBUTES FROM ID SEMICOLON -> ^( ATTFROM ID ) | SEPARATOR STRING SEMICOLON -> ^( SEPARATOR STRING ) | FILE STRING INT SEMICOLON -> ^( FILE__ STRING INT ) )
            
            ANTLR3_UINT32 alt43;

            alt43=3;

            switch ( LA(1) ) 
            {
            case ATTRIBUTES:
            	{
            		alt43=1;
            	}
                break;
            case SEPARATOR:
            	{
            		alt43=2;
            	}
                break;
            case FILE:
            	{
            		alt43=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 43;
                EXCEPTION->state        = 0;


                goto ruletextloaderBodyEx;
            }

            switch (alt43) 
            {
        	case 1:
        	    // DataPath.g:325:5: ATTRIBUTES FROM ID SEMICOLON
        	    {
        	        ATTRIBUTES209 = (pANTLR3_COMMON_TOKEN) MATCHT(ATTRIBUTES, &FOLLOW_ATTRIBUTES_in_textloaderBody2361); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_ATTRIBUTES; stream_ATTRIBUTES->add(stream_ATTRIBUTES, ATTRIBUTES209, NULL);

        	        FROM210 = (pANTLR3_COMMON_TOKEN) MATCHT(FROM, &FOLLOW_FROM_in_textloaderBody2363); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_FROM; stream_FROM->add(stream_FROM, FROM210, NULL);

        	        ID211 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_textloaderBody2365); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_ID; stream_ID->add(stream_ID, ID211, NULL);

        	        SEMICOLON212 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_textloaderBody2367); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON212, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : ID
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 325:34: -> ^( ATTFROM ID )
        	        	{
        	        	    // DataPath.g:325:37: ^( ATTFROM ID )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTFROM, (pANTLR3_UINT8)"ATTFROM"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:326:7: SEPARATOR STRING SEMICOLON
        	    {
        	        SEPARATOR213 = (pANTLR3_COMMON_TOKEN) MATCHT(SEPARATOR, &FOLLOW_SEPARATOR_in_textloaderBody2383); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_SEPARATOR; stream_SEPARATOR->add(stream_SEPARATOR, SEPARATOR213, NULL);

        	        STRING214 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_textloaderBody2385); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, STRING214, NULL);

        	        SEMICOLON215 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_textloaderBody2387); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON215, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : SEPARATOR, STRING
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 326:34: -> ^( SEPARATOR STRING )
        	        	{
        	        	    // DataPath.g:326:37: ^( SEPARATOR STRING )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_SEPARATOR == NULL ? NULL : stream_SEPARATOR->nextNode(stream_SEPARATOR), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_STRING == NULL ? NULL : stream_STRING->nextNode(stream_STRING));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 3:
        	    // DataPath.g:327:7: FILE STRING INT SEMICOLON
        	    {
        	        FILE216 = (pANTLR3_COMMON_TOKEN) MATCHT(FILE, &FOLLOW_FILE_in_textloaderBody2403); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_FILE; stream_FILE->add(stream_FILE, FILE216, NULL);

        	        STRING217 = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_textloaderBody2405); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_STRING; stream_STRING->add(stream_STRING, STRING217, NULL);

        	        INT218 = (pANTLR3_COMMON_TOKEN) MATCHT(INT, &FOLLOW_INT_in_textloaderBody2407); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_INT; stream_INT->add(stream_INT, INT218, NULL);

        	        SEMICOLON219 = (pANTLR3_COMMON_TOKEN) MATCHT(SEMICOLON, &FOLLOW_SEMICOLON_in_textloaderBody2409); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletextloaderBodyEx;
        	        }
        	         
        	        CREATE_stream_SEMICOLON; stream_SEMICOLON->add(stream_SEMICOLON, SEMICOLON219, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : INT, STRING
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 327:33: -> ^( FILE__ STRING INT )
        	        	{
        	        	    // DataPath.g:327:36: ^( FILE__ STRING INT )
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FILE__, (pANTLR3_UINT8)"FILE__"), root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_STRING == NULL ? NULL : stream_STRING->nextNode(stream_STRING));
        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_INT == NULL ? NULL : stream_INT->nextNode(stream_INT));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletextloaderBodyEx; /* Prevent compiler warnings */
    ruletextloaderBodyEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_INT != NULL) stream_INT->free(stream_INT);
        if (stream_SEMICOLON != NULL) stream_SEMICOLON->free(stream_SEMICOLON);
        if (stream_SEPARATOR != NULL) stream_SEPARATOR->free(stream_SEPARATOR);
        if (stream_ATTRIBUTES != NULL) stream_ATTRIBUTES->free(stream_ATTRIBUTES);
        if (stream_FROM != NULL) stream_FROM->free(stream_FROM);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_FILE != NULL) stream_FILE->free(stream_FILE);
        if (stream_STRING != NULL) stream_STRING->free(stream_STRING);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end textloaderBody */

/** 
 * $ANTLR start wayPointCN
 * DataPath.g:330:1: wayPointCN : t= termConnOpt ID -> $t ID ;
 */
static DataPathParser_wayPointCN_return
wayPointCN(pDataPathParser ctx)
{   
    DataPathParser_wayPointCN_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID220;
    DataPathParser_termConnOpt_return t;
    #undef	RETURN_TYPE_t
    #define	RETURN_TYPE_t DataPathParser_termConnOpt_return

    pANTLR3_BASE_TREE ID220_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_termConnOpt;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID220       = NULL;
    t.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID220_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_termConnOpt   = NULL;
    #define CREATE_stream_termConnOpt  if (stream_termConnOpt == NULL) {stream_termConnOpt = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule termConnOpt"); }

    retval.tree  = NULL;
    {
        // DataPath.g:331:5: (t= termConnOpt ID -> $t ID )
        // DataPath.g:331:10: t= termConnOpt ID
        {
            FOLLOWPUSH(FOLLOW_termConnOpt_in_wayPointCN2441);
            t=termConnOpt(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulewayPointCNEx;
            }

            CREATE_stream_termConnOpt; stream_termConnOpt->add(stream_termConnOpt, t.tree, NULL);
            ID220 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_wayPointCN2443); 
            if  (HASEXCEPTION())
            {
                goto rulewayPointCNEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID220, NULL);

            {

                          string nWP = (char*)(ID220->getText(ID220))->chars;
                          // check that ID is valid
                          WaypointType wType = typeMap[nWP];
                        
            }

             
            /* AST REWRITE
             * elements          : ID, t
             * token labels      : 
             * rule labels       : retval, t
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_t;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_t=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token t", t.tree != NULL ? t.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 335:11: -> $t ID
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_t == NULL ? NULL : stream_t->nextTree(stream_t));
            	    ADAPTOR->addChild(ADAPTOR, root_0, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_t != NULL) stream_t->free(stream_t);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulewayPointCNEx; /* Prevent compiler warnings */
    rulewayPointCNEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_termConnOpt != NULL) stream_termConnOpt->free(stream_termConnOpt);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end wayPointCN */

/** 
 * $ANTLR start termConnOpt
 * DataPath.g:337:1: termConnOpt : ( -> | QMARK -> TERMCONN );
 */
static DataPathParser_termConnOpt_return
termConnOpt(pDataPathParser ctx)
{   
    DataPathParser_termConnOpt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    QMARK221;

    pANTLR3_BASE_TREE QMARK221_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_QMARK;

    /* Initialize rule variables
     */


    root_0 = NULL;

    QMARK221       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    QMARK221_tree   = NULL;

    stream_QMARK   = NULL;
    #define CREATE_stream_QMARK  if (stream_QMARK == NULL) {stream_QMARK = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token QMARK"); } 

    retval.tree  = NULL;
    {
        {
            //  DataPath.g:338:5: ( -> | QMARK -> TERMCONN )
            
            ANTLR3_UINT32 alt44;

            alt44=2;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		alt44=1;
            	}
                break;
            case QMARK:
            	{
            		alt44=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 44;
                EXCEPTION->state        = 0;


                goto ruletermConnOptEx;
            }

            switch (alt44) 
            {
        	case 1:
        	    // DataPath.g:338:21: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 338:21: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // DataPath.g:339:7: QMARK
        	    {
        	        QMARK221 = (pANTLR3_COMMON_TOKEN) MATCHT(QMARK, &FOLLOW_QMARK_in_termConnOpt2478); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruletermConnOptEx;
        	        }
        	         
        	        CREATE_stream_QMARK; stream_QMARK->add(stream_QMARK, QMARK221, NULL);


        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 339:13: -> TERMCONN
        	        	{
        	        	    ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, TERMCONN, (pANTLR3_UINT8)"TERMCONN"));

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruletermConnOptEx; /* Prevent compiler warnings */
    ruletermConnOptEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_QMARK != NULL) stream_QMARK->free(stream_QMARK);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end termConnOpt */
	// Delegated methods that appear to be a part of this 
	// parser
	//
    DataPath_BaseParser_case_expression_return case_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->case_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attribute_return attribute(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attribute(ctx->gBaseParser); 
	}
    DataPath_BaseParser_constant_return constant(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->constant(ctx->gBaseParser); 
	}
    DataPath_BaseParser_and_expression_return and_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->and_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attCList_return attCList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attCList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attributeEList_return attributeEList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attributeEList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_multiplicative_expression_return multiplicative_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->multiplicative_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_ctAttList_return ctAttList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->ctAttList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_logical_or_expression_return logical_or_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->logical_or_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attC_return attC(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attC(ctx->gBaseParser); 
	}
    DataPath_BaseParser_exclusive_or_expression_return exclusive_or_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->exclusive_or_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_additive_expression_return additive_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->additive_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attributeList_return attributeList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attributeList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attCElem_return attCElem(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attCElem(ctx->gBaseParser); 
	}
    DataPath_BaseParser_shift_expression_return shift_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->shift_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_relational_expression_return relational_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->relational_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_synthAttribute_return synthAttribute(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->synthAttribute(ctx->gBaseParser); 
	}
    DataPath_BaseParser_ctAtt_return ctAtt(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->ctAtt(ctx->gBaseParser); 
	}
    DataPath_BaseParser_expression_return expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_match_expression_return match_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->match_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_primary_expression_return primary_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->primary_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_function_return function(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->function(ctx->gBaseParser); 
	}
    DataPath_BaseParser_idList_return idList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->idList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_equality_expression_return equality_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->equality_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_inclusive_or_expression_return inclusive_or_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->inclusive_or_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_unary_expression_return unary_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->unary_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_expressionList_return expressionList(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->expressionList(ctx->gBaseParser); 
	}
    DataPath_BaseParser_logical_and_expression_return logical_and_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->logical_and_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attWType_return attWType(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attWType(ctx->gBaseParser); 
	}
    DataPath_BaseParser_attListWTypes_return attListWTypes(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->attListWTypes(ctx->gBaseParser); 
	}
    DataPath_BaseParser_conditional_expression_return conditional_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->conditional_expression(ctx->gBaseParser); 
	}
    DataPath_BaseParser_basic_bool_expression_return basic_bool_expression(pDataPathParser ctx) 
    { 
return ctx->gBaseParser->basic_bool_expression(ctx->gBaseParser); 
	}
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
