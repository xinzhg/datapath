//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : BaseParser.g
 *     -                            On : 2012-06-14 15:15:15
 *     -                for the parser : Piggy_BaseParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

#ifndef BASE_GRAMMAR_INCLUDE
#define BASE_GRAMMAR_INCLUDE
extern "C++" {
 #include "SymbolicWaypointConfig.h"
 #include "LemonTranslator.h"
 #include "AttributeManager.h"
 #include "QueryManager.h"
 #include <iostream>

 #define P_ERR_IF(cond,msg...) {\
   if (cond) {\
         fprintf(stderr, "WARNING : ");\
     fprintf(stderr, msg);\
         fprintf(stderr, "\n");\
     haveErrors=true;\
   }\
    }

#define DP_CheckQuery(IsNew,query) {\
    QueryManager& qm = QueryManager::GetQueryManager();\
    if (!IsNew) {\
        string qName;\
        P_ERR_IF(qm.GetQueryName(qm.GetQueryID(query),qName), "Query Not registered");\
    } else {\
      QueryID bogus;\
      qm.AddNewQuery(query, bogus);\
    }\
}

extern string qry;
extern int tempCounter; // id for temporary variables}
extern bool haveErrors;
string StripQuotes(string str);
string NormalizeQuotes(string str);
string GenerateTemp(const char* pattern);

}
#endif //BASE_GRAMMAR_INCLUDE

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "Piggy_BaseParser.h"
/* ----------------------------------------- */





/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pPiggy_BaseParser_##scope##_SCOPE
#define SCOPE_STACK(scope)  pPiggy_BaseParser_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pPiggy_BaseParser_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pPiggy_BaseParser_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

/* Macros for accessing things in the parser
 */
 
#undef	    PARSER		    
#undef	    RECOGNIZER		    
#undef	    HAVEPARSEDRULE
#undef		MEMOIZE
#undef	    INPUT
#undef	    STRSTREAM
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    MATCHT
#undef	    MATCHANYT
#undef	    FOLLOWSTACK
#undef	    FOLLOWPUSH
#undef	    FOLLOWPOP
#undef	    PRECOVER
#undef	    PREPORTERROR
#undef	    LA
#undef	    LT
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    PERRORRECOVERY
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    RECOVERFROMMISMATCHEDSET
#undef	    RECOVERFROMMISMATCHEDELEMENT
#undef		INDEX
#undef      ADAPTOR
#undef		SEEK
#undef	    RULEMEMO		    
#undef		DBG

#define	    PARSER				ctx->pParser  
#define	    RECOGNIZER				PARSER->rec
#define	    PSRSTATE				RECOGNIZER->state
#define	    HAVEPARSEDRULE(r)			RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define	    MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define	    INPUT				PARSER->tstream
#define	    STRSTREAM				INPUT
#define	    ISTREAM				INPUT->istream
#define	    INDEX()				ISTREAM->index(INPUT->istream)
#define	    HASEXCEPTION()			(PSRSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				PSRSTATE->exception
#define	    MATCHT(t, fs)			RECOGNIZER->match(RECOGNIZER, t, fs)
#define	    MATCHANYT()				RECOGNIZER->matchAny(RECOGNIZER)
#define	    FOLLOWSTACK				PSRSTATE->following
#ifdef  SKIP_FOLLOW_SETS
#define	    FOLLOWPUSH(x)
#define	    FOLLOWPOP()
#else
#define	    FOLLOWPUSH(x)			FOLLOWSTACK->push(FOLLOWSTACK, ((void *)(&(x))), NULL)
#define	    FOLLOWPOP()				FOLLOWSTACK->pop(FOLLOWSTACK)
#endif
#define	    PRECOVER()				RECOGNIZER->recover(RECOGNIZER)
#define	    PREPORTERROR()			RECOGNIZER->reportError(RECOGNIZER)
#define	    LA(n)				INPUT->istream->_LA(ISTREAM, n)
#define	    LT(n)				INPUT->_LT(INPUT, n)
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    CONSUME()				ISTREAM->consume(ISTREAM)
#define	    MARK()				ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define	    SEEK(n)				ISTREAM->seek(ISTREAM, n)
#define	    PERRORRECOVERY			PSRSTATE->errorRecovery
#define	    FAILEDFLAG				PSRSTATE->failed
#define	    HASFAILED()				(FAILEDFLAG == ANTLR3_TRUE)
#define	    BACKTRACKING			PSRSTATE->backtracking
#define	    RECOVERFROMMISMATCHEDSET(s)		RECOGNIZER->recoverFromMismatchedSet(RECOGNIZER, s)
#define	    RECOVERFROMMISMATCHEDELEMENT(e)	RECOGNIZER->recoverFromMismatchedElement(RECOGNIZER, s)
#define     ADAPTOR                         ctx->adaptor
#define		RULEMEMO						PSRSTATE->ruleMemo
#define		DBG								RECOGNIZER->debugger

#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */




        

// Forward declare the locally static matching functions we have generated.
//
static Piggy_BaseParser_ctAttList_return	ctAttList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_ctAtt_return	ctAtt    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attListWTypes_return	attListWTypes    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attWType_return	attWType    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attCList_return	attCList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attC_return	attC    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attCElem_return	attCElem    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_idList_return	idList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attributeList_return	attributeList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attributeEList_return	attributeEList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_attribute_return	attribute    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_synthAttribute_return	synthAttribute    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_conditional_expression_return	conditional_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_logical_or_expression_return	logical_or_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_logical_and_expression_return	logical_and_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_inclusive_or_expression_return	inclusive_or_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_exclusive_or_expression_return	exclusive_or_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_and_expression_return	and_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_basic_bool_expression_return	basic_bool_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_match_expression_return	match_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_case_expression_return	case_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_equality_expression_return	equality_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_relational_expression_return	relational_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_shift_expression_return	shift_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_additive_expression_return	additive_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_multiplicative_expression_return	multiplicative_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_unary_expression_return	unary_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_primary_expression_return	primary_expression    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_function_return	function    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_expressionList_return	expressionList    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_constant_return	constant    (pPiggy_BaseParser ctx);
static Piggy_BaseParser_expression_return	expression    (pPiggy_BaseParser ctx);
static void	Piggy_BaseParserFree(pPiggy_BaseParser ctx);
static void     Piggy_BaseParserReset (pPiggy_BaseParser ctx);

/* For use in tree output where we are accumulating rule labels via label += ruleRef
 * we need a function that knows how to free a return scope when the list is destroyed. 
 * We cannot just use ANTLR3_FREE because in debug tracking mode, this is a macro.
 */
static	void ANTLR3_CDECL freeScope(void * scope)
{
    ANTLR3_FREE(scope);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "BaseParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new Piggy_BaseParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pPiggy_BaseParser
Piggy_BaseParserNew   (pANTLR3_COMMON_TOKEN_STREAM instream, pPiggyParser gPiggy)
{
	// See if we can create a new parser with the standard constructor
	//
	return Piggy_BaseParserNewSSD(instream, NULL, gPiggy);
}

/** \brief Create a new Piggy_BaseParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
ANTLR3_API pPiggy_BaseParser
Piggy_BaseParserNewSSD   (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state, pPiggyParser gPiggy)
{
    pPiggy_BaseParser ctx;	    /* Context structure we will build and return   */
    
    ctx	= (pPiggy_BaseParser) ANTLR3_CALLOC(1, sizeof(Piggy_BaseParser));
    
    if	(ctx == NULL)
    {
		// Failed to allocate memory for parser context
		//
        return  NULL;
    }
    
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * the base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 parser function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in Piggy_BaseParser.h here, in order that you can get a sense
     * of what goes where.
     */

    /* Create a base parser/recognizer, using the supplied token stream
     */
    ctx->pParser	    = antlr3ParserNewStream(ANTLR3_SIZE_HINT, instream->tstream, state);
    /* Install the implementation of our Piggy_BaseParser interface
     */
    ctx->ctAttList	= ctAttList;
    ctx->ctAtt	= ctAtt;
    ctx->attListWTypes	= attListWTypes;
    ctx->attWType	= attWType;
    ctx->attCList	= attCList;
    ctx->attC	= attC;
    ctx->attCElem	= attCElem;
    ctx->idList	= idList;
    ctx->attributeList	= attributeList;
    ctx->attributeEList	= attributeEList;
    ctx->attribute	= attribute;
    ctx->synthAttribute	= synthAttribute;
    ctx->conditional_expression	= conditional_expression;
    ctx->logical_or_expression	= logical_or_expression;
    ctx->logical_and_expression	= logical_and_expression;
    ctx->inclusive_or_expression	= inclusive_or_expression;
    ctx->exclusive_or_expression	= exclusive_or_expression;
    ctx->and_expression	= and_expression;
    ctx->basic_bool_expression	= basic_bool_expression;
    ctx->match_expression	= match_expression;
    ctx->case_expression	= case_expression;
    ctx->equality_expression	= equality_expression;
    ctx->relational_expression	= relational_expression;
    ctx->shift_expression	= shift_expression;
    ctx->additive_expression	= additive_expression;
    ctx->multiplicative_expression	= multiplicative_expression;
    ctx->unary_expression	= unary_expression;
    ctx->primary_expression	= primary_expression;
    ctx->function	= function;
    ctx->expressionList	= expressionList;
    ctx->constant	= constant;
    ctx->expression	= expression;
    ctx->free			= Piggy_BaseParserFree;
    ctx->reset			= Piggy_BaseParserReset;
    ctx->getGrammarFileName	= getGrammarFileName;
    
    /* Install the scope pushing methods.
     */
    ADAPTOR	= ANTLR3_TREE_ADAPTORNew(instream->tstream->tokenSource->strFactory);
    ctx->vectors	= antlr3VectorFactoryNew(0);
    
	// Install the pointers back to parsers that will delegate us to perform certain functions
	// for them.
	//
	ctx->gPiggy			= gPiggy;
	
    /* Install the token table
     */
    PSRSTATE->tokenNames   = PiggyParserTokenNames;
    
    
    /* Return the newly built parser to the caller
     */
    return  ctx;
}

static void
Piggy_BaseParserReset (pPiggy_BaseParser ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** Free the parser resources
 */
 static void
 Piggy_BaseParserFree(pPiggy_BaseParser ctx)
 {
    /* Free any scope memory
     */
    
    ctx->vectors->close(ctx->vectors);
    /* We created the adaptor so we must free it
     */
    ADAPTOR->free(ADAPTOR);
	// Free this parser
	//
    ctx->pParser->free(ctx->pParser);
    
    ANTLR3_FREE(ctx);

    /* Everything is released, so we can return
     */
    return;
 }
 
/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token 
 * number as the index).
 * 
 * \return Pointer to first char * in the table.
 */
static pANTLR3_UINT8    *getTokenNames() 
{
        return PiggyParserTokenNames; 
}

    
/* Declare the bitsets
 */

/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctAtt_in_ctAttList220  */
static	ANTLR3_BITWORD FOLLOW_ctAtt_in_ctAttList220_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctAtt_in_ctAttList220	= { FOLLOW_ctAtt_in_ctAttList220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_ctAttList223  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_ctAttList223_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001140000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_ctAttList223	= { FOLLOW_COMMA_in_ctAttList223_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ctAtt_in_ctAttList226  */
static	ANTLR3_BITWORD FOLLOW_ctAtt_in_ctAttList226_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ctAtt_in_ctAttList226	= { FOLLOW_ctAtt_in_ctAttList226_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_ctAtt0  */
static	ANTLR3_BITWORD FOLLOW_set_in_ctAtt0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_ctAtt0	= { FOLLOW_set_in_ctAtt0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attWType_in_attListWTypes273  */
static	ANTLR3_BITWORD FOLLOW_attWType_in_attListWTypes273_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attWType_in_attListWTypes273	= { FOLLOW_attWType_in_attListWTypes273_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attListWTypes277  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attListWTypes277_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attListWTypes277	= { FOLLOW_COMMA_in_attListWTypes277_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attWType_in_attListWTypes281  */
static	ANTLR3_BITWORD FOLLOW_attWType_in_attListWTypes281_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attWType_in_attListWTypes281	= { FOLLOW_attWType_in_attListWTypes281_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attWType303  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attWType303_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attWType303	= { FOLLOW_ID_in_attWType303_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_attWType305  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_attWType305_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_attWType305	= { FOLLOW_COLON_in_attWType305_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attWType309  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attWType309_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attWType309	= { FOLLOW_ID_in_attWType309_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attC_in_attCList349  */
static	ANTLR3_BITWORD FOLLOW_attC_in_attCList349_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attC_in_attCList349	= { FOLLOW_attC_in_attCList349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attCList353  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attCList353_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attCList353	= { FOLLOW_COMMA_in_attCList353_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attC_in_attCList357  */
static	ANTLR3_BITWORD FOLLOW_attC_in_attCList357_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attC_in_attCList357	= { FOLLOW_attC_in_attCList357_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attCElem_in_attC377  */
static	ANTLR3_BITWORD FOLLOW_attCElem_in_attC377_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attCElem_in_attC377	= { FOLLOW_attCElem_in_attC377_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attCElem404  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attCElem404_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attCElem404	= { FOLLOW_ID_in_attCElem404_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_attCElem407  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_attCElem407_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_attCElem407	= { FOLLOW_COLON_in_attCElem407_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attCElem410  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attCElem410_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attCElem410	= { FOLLOW_ID_in_attCElem410_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_idList432  */
static	ANTLR3_BITWORD FOLLOW_ID_in_idList432_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_idList432	= { FOLLOW_ID_in_idList432_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_idList436  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_idList436_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_idList436	= { FOLLOW_COMMA_in_idList436_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_idList438  */
static	ANTLR3_BITWORD FOLLOW_ID_in_idList438_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_idList438	= { FOLLOW_ID_in_idList438_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attribute_in_attributeList457  */
static	ANTLR3_BITWORD FOLLOW_attribute_in_attributeList457_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attribute_in_attributeList457	= { FOLLOW_attribute_in_attributeList457_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attributeList462  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attributeList462_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attributeList462	= { FOLLOW_COMMA_in_attributeList462_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attribute_in_attributeList465  */
static	ANTLR3_BITWORD FOLLOW_attribute_in_attributeList465_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attribute_in_attributeList465	= { FOLLOW_attribute_in_attributeList465_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attribute_in_attributeEList482  */
static	ANTLR3_BITWORD FOLLOW_attribute_in_attributeEList482_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attribute_in_attributeEList482	= { FOLLOW_attribute_in_attributeEList482_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_synthAttribute_in_attributeEList484  */
static	ANTLR3_BITWORD FOLLOW_synthAttribute_in_attributeEList484_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_synthAttribute_in_attributeEList484	= { FOLLOW_synthAttribute_in_attributeEList484_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_attributeEList490  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_attributeEList490_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_attributeEList490	= { FOLLOW_COMMA_in_attributeEList490_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attribute_in_attributeEList494  */
static	ANTLR3_BITWORD FOLLOW_attribute_in_attributeEList494_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attribute_in_attributeEList494	= { FOLLOW_attribute_in_attributeEList494_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_synthAttribute_in_attributeEList496  */
static	ANTLR3_BITWORD FOLLOW_synthAttribute_in_attributeEList496_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_synthAttribute_in_attributeEList496	= { FOLLOW_synthAttribute_in_attributeEList496_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attribute524  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attribute524_bits[]	= { ANTLR3_UINT64_LIT(0x0000000010000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attribute524	= { FOLLOW_ID_in_attribute524_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DOT_in_attribute526  */
static	ANTLR3_BITWORD FOLLOW_DOT_in_attribute526_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000020000) };
static  ANTLR3_BITSET_LIST FOLLOW_DOT_in_attribute526	= { FOLLOW_DOT_in_attribute526_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_attribute530  */
static	ANTLR3_BITWORD FOLLOW_ID_in_attribute530_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_attribute530	= { FOLLOW_ID_in_attribute530_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_synthAttribute563  */
static	ANTLR3_BITWORD FOLLOW_ID_in_synthAttribute563_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_synthAttribute563	= { FOLLOW_ID_in_synthAttribute563_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_or_expression_in_conditional_expression589  */
static	ANTLR3_BITWORD FOLLOW_logical_or_expression_in_conditional_expression589_bits[]	= { ANTLR3_UINT64_LIT(0x0000000200000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_or_expression_in_conditional_expression589	= { FOLLOW_logical_or_expression_in_conditional_expression589_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_QMARK_in_conditional_expression592  */
static	ANTLR3_BITWORD FOLLOW_QMARK_in_conditional_expression592_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_QMARK_in_conditional_expression592	= { FOLLOW_QMARK_in_conditional_expression592_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_conditional_expression595  */
static	ANTLR3_BITWORD FOLLOW_expression_in_conditional_expression595_bits[]	= { ANTLR3_UINT64_LIT(0x0000000008000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_conditional_expression595	= { FOLLOW_expression_in_conditional_expression595_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COLON_in_conditional_expression597  */
static	ANTLR3_BITWORD FOLLOW_COLON_in_conditional_expression597_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_COLON_in_conditional_expression597	= { FOLLOW_COLON_in_conditional_expression597_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_conditional_expression600  */
static	ANTLR3_BITWORD FOLLOW_expression_in_conditional_expression600_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_conditional_expression600	= { FOLLOW_expression_in_conditional_expression600_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression625  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression625_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression625	= { FOLLOW_logical_and_expression_in_logical_or_expression625_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LOR_in_logical_or_expression644  */
static	ANTLR3_BITWORD FOLLOW_LOR_in_logical_or_expression644_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LOR_in_logical_or_expression644	= { FOLLOW_LOR_in_logical_or_expression644_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_logical_and_expression_in_logical_or_expression648  */
static	ANTLR3_BITWORD FOLLOW_logical_and_expression_in_logical_or_expression648_bits[]	= { ANTLR3_UINT64_LIT(0x0000000800000002) };
static  ANTLR3_BITSET_LIST FOLLOW_logical_and_expression_in_logical_or_expression648	= { FOLLOW_logical_and_expression_in_logical_or_expression648_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inclusive_or_expression_in_logical_and_expression695  */
static	ANTLR3_BITWORD FOLLOW_inclusive_or_expression_in_logical_and_expression695_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_inclusive_or_expression_in_logical_and_expression695	= { FOLLOW_inclusive_or_expression_in_logical_and_expression695_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LAND_in_logical_and_expression714  */
static	ANTLR3_BITWORD FOLLOW_LAND_in_logical_and_expression714_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LAND_in_logical_and_expression714	= { FOLLOW_LAND_in_logical_and_expression714_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_inclusive_or_expression_in_logical_and_expression718  */
static	ANTLR3_BITWORD FOLLOW_inclusive_or_expression_in_logical_and_expression718_bits[]	= { ANTLR3_UINT64_LIT(0x0000000400000002) };
static  ANTLR3_BITSET_LIST FOLLOW_inclusive_or_expression_in_logical_and_expression718	= { FOLLOW_inclusive_or_expression_in_logical_and_expression718_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exclusive_or_expression_in_inclusive_or_expression765  */
static	ANTLR3_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression765_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exclusive_or_expression_in_inclusive_or_expression765	= { FOLLOW_exclusive_or_expression_in_inclusive_or_expression765_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOR_in_inclusive_or_expression784  */
static	ANTLR3_BITWORD FOLLOW_BOR_in_inclusive_or_expression784_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_BOR_in_inclusive_or_expression784	= { FOLLOW_BOR_in_inclusive_or_expression784_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_exclusive_or_expression_in_inclusive_or_expression788  */
static	ANTLR3_BITWORD FOLLOW_exclusive_or_expression_in_inclusive_or_expression788_bits[]	= { ANTLR3_UINT64_LIT(0x0000002000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_exclusive_or_expression_in_inclusive_or_expression788	= { FOLLOW_exclusive_or_expression_in_inclusive_or_expression788_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_and_expression_in_exclusive_or_expression835  */
static	ANTLR3_BITWORD FOLLOW_and_expression_in_exclusive_or_expression835_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_and_expression_in_exclusive_or_expression835	= { FOLLOW_and_expression_in_exclusive_or_expression835_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_XOR_in_exclusive_or_expression854  */
static	ANTLR3_BITWORD FOLLOW_XOR_in_exclusive_or_expression854_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_XOR_in_exclusive_or_expression854	= { FOLLOW_XOR_in_exclusive_or_expression854_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_and_expression_in_exclusive_or_expression858  */
static	ANTLR3_BITWORD FOLLOW_and_expression_in_exclusive_or_expression858_bits[]	= { ANTLR3_UINT64_LIT(0x0000004000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_and_expression_in_exclusive_or_expression858	= { FOLLOW_and_expression_in_exclusive_or_expression858_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_basic_bool_expression_in_and_expression905  */
static	ANTLR3_BITWORD FOLLOW_basic_bool_expression_in_and_expression905_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_basic_bool_expression_in_and_expression905	= { FOLLOW_basic_bool_expression_in_and_expression905_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BAND_in_and_expression924  */
static	ANTLR3_BITWORD FOLLOW_BAND_in_and_expression924_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_BAND_in_and_expression924	= { FOLLOW_BAND_in_and_expression924_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_basic_bool_expression_in_and_expression928  */
static	ANTLR3_BITWORD FOLLOW_basic_bool_expression_in_and_expression928_bits[]	= { ANTLR3_UINT64_LIT(0x0000001000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_basic_bool_expression_in_and_expression928	= { FOLLOW_basic_bool_expression_in_and_expression928_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_equality_expression_in_basic_bool_expression969  */
static	ANTLR3_BITWORD FOLLOW_equality_expression_in_basic_bool_expression969_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_equality_expression_in_basic_bool_expression969	= { FOLLOW_equality_expression_in_basic_bool_expression969_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_match_expression_in_basic_bool_expression977  */
static	ANTLR3_BITWORD FOLLOW_match_expression_in_basic_bool_expression977_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_match_expression_in_basic_bool_expression977	= { FOLLOW_match_expression_in_basic_bool_expression977_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_BOOL_T_in_basic_bool_expression985  */
static	ANTLR3_BITWORD FOLLOW_BOOL_T_in_basic_bool_expression985_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_BOOL_T_in_basic_bool_expression985	= { FOLLOW_BOOL_T_in_basic_bool_expression985_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MATCH_DP_in_match_expression1002  */
static	ANTLR3_BITWORD FOLLOW_MATCH_DP_in_match_expression1002_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_MATCH_DP_in_match_expression1002	= { FOLLOW_MATCH_DP_in_match_expression1002_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_match_expression1004  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_match_expression1004_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_match_expression1004	= { FOLLOW_LPAREN_in_match_expression1004_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_match_expression1008  */
static	ANTLR3_BITWORD FOLLOW_expression_in_match_expression1008_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_match_expression1008	= { FOLLOW_expression_in_match_expression1008_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_match_expression1010  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_match_expression1010_bits[]	= { ANTLR3_UINT64_LIT(0x0000000001000000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_match_expression1010	= { FOLLOW_COMMA_in_match_expression1010_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_STRING_in_match_expression1014  */
static	ANTLR3_BITWORD FOLLOW_STRING_in_match_expression1014_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_STRING_in_match_expression1014	= { FOLLOW_STRING_in_match_expression1014_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_match_expression1016  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_match_expression1016_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_match_expression1016	= { FOLLOW_RPAREN_in_match_expression1016_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_CASE_DP_in_case_expression1047  */
static	ANTLR3_BITWORD FOLLOW_CASE_DP_in_case_expression1047_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_CASE_DP_in_case_expression1047	= { FOLLOW_CASE_DP_in_case_expression1047_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_case_expression1049  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_case_expression1049_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_case_expression1049	= { FOLLOW_LPAREN_in_case_expression1049_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_case_expression1053  */
static	ANTLR3_BITWORD FOLLOW_expression_in_case_expression1053_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_case_expression1053	= { FOLLOW_expression_in_case_expression1053_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_case_expression1055  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_case_expression1055_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_case_expression1055	= { FOLLOW_COMMA_in_case_expression1055_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_case_expression1059  */
static	ANTLR3_BITWORD FOLLOW_expression_in_case_expression1059_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_case_expression1059	= { FOLLOW_expression_in_case_expression1059_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_case_expression1061  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_case_expression1061_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_case_expression1061	= { FOLLOW_COMMA_in_case_expression1061_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_case_expression1065  */
static	ANTLR3_BITWORD FOLLOW_expression_in_case_expression1065_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_case_expression1065	= { FOLLOW_expression_in_case_expression1065_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_case_expression1067  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_case_expression1067_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_case_expression1067	= { FOLLOW_RPAREN_in_case_expression1067_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression1112  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression1112_bits[]	= { ANTLR3_UINT64_LIT(0x0000030000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression1112	= { FOLLOW_relational_expression_in_equality_expression1112_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ISEQUAL_in_equality_expression1132  */
static	ANTLR3_BITWORD FOLLOW_ISEQUAL_in_equality_expression1132_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_ISEQUAL_in_equality_expression1132	= { FOLLOW_ISEQUAL_in_equality_expression1132_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NEQUAL_in_equality_expression1136  */
static	ANTLR3_BITWORD FOLLOW_NEQUAL_in_equality_expression1136_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_NEQUAL_in_equality_expression1136	= { FOLLOW_NEQUAL_in_equality_expression1136_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_relational_expression_in_equality_expression1141  */
static	ANTLR3_BITWORD FOLLOW_relational_expression_in_equality_expression1141_bits[]	= { ANTLR3_UINT64_LIT(0x0000030000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_relational_expression_in_equality_expression1141	= { FOLLOW_relational_expression_in_equality_expression1141_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_relational_expression1188  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_relational_expression1188_bits[]	= { ANTLR3_UINT64_LIT(0x00003C0000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_relational_expression1188	= { FOLLOW_shift_expression_in_relational_expression1188_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LS_in_relational_expression1208  */
static	ANTLR3_BITWORD FOLLOW_LS_in_relational_expression1208_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_LS_in_relational_expression1208	= { FOLLOW_LS_in_relational_expression1208_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GT_in_relational_expression1212  */
static	ANTLR3_BITWORD FOLLOW_GT_in_relational_expression1212_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_GT_in_relational_expression1212	= { FOLLOW_GT_in_relational_expression1212_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LE_in_relational_expression1216  */
static	ANTLR3_BITWORD FOLLOW_LE_in_relational_expression1216_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_LE_in_relational_expression1216	= { FOLLOW_LE_in_relational_expression1216_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_GE_in_relational_expression1220  */
static	ANTLR3_BITWORD FOLLOW_GE_in_relational_expression1220_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_GE_in_relational_expression1220	= { FOLLOW_GE_in_relational_expression1220_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_shift_expression_in_relational_expression1225  */
static	ANTLR3_BITWORD FOLLOW_shift_expression_in_relational_expression1225_bits[]	= { ANTLR3_UINT64_LIT(0x00003C0000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_shift_expression_in_relational_expression1225	= { FOLLOW_shift_expression_in_relational_expression1225_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_shift_expression1272  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_shift_expression1272_bits[]	= { ANTLR3_UINT64_LIT(0x0001800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_shift_expression1272	= { FOLLOW_additive_expression_in_shift_expression1272_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SLEFT_in_shift_expression1292  */
static	ANTLR3_BITWORD FOLLOW_SLEFT_in_shift_expression1292_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_SLEFT_in_shift_expression1292	= { FOLLOW_SLEFT_in_shift_expression1292_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_SRIGHT_in_shift_expression1296  */
static	ANTLR3_BITWORD FOLLOW_SRIGHT_in_shift_expression1296_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_SRIGHT_in_shift_expression1296	= { FOLLOW_SRIGHT_in_shift_expression1296_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_additive_expression_in_shift_expression1301  */
static	ANTLR3_BITWORD FOLLOW_additive_expression_in_shift_expression1301_bits[]	= { ANTLR3_UINT64_LIT(0x0001800000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_additive_expression_in_shift_expression1301	= { FOLLOW_additive_expression_in_shift_expression1301_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression1349  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression1349_bits[]	= { ANTLR3_UINT64_LIT(0x0006000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression1349	= { FOLLOW_multiplicative_expression_in_additive_expression1349_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_additive_expression1369  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_additive_expression1369_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_additive_expression1369	= { FOLLOW_PLUS_in_additive_expression1369_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUS_in_additive_expression1373  */
static	ANTLR3_BITWORD FOLLOW_MINUS_in_additive_expression1373_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUS_in_additive_expression1373	= { FOLLOW_MINUS_in_additive_expression1373_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_multiplicative_expression_in_additive_expression1378  */
static	ANTLR3_BITWORD FOLLOW_multiplicative_expression_in_additive_expression1378_bits[]	= { ANTLR3_UINT64_LIT(0x0006000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_multiplicative_expression_in_additive_expression1378	= { FOLLOW_multiplicative_expression_in_additive_expression1378_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_multiplicative_expression1425  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_multiplicative_expression1425_bits[]	= { ANTLR3_UINT64_LIT(0x0038000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_multiplicative_expression1425	= { FOLLOW_unary_expression_in_multiplicative_expression1425_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_TIMES_in_multiplicative_expression1445  */
static	ANTLR3_BITWORD FOLLOW_TIMES_in_multiplicative_expression1445_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_TIMES_in_multiplicative_expression1445	= { FOLLOW_TIMES_in_multiplicative_expression1445_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_DIVIDE_in_multiplicative_expression1449  */
static	ANTLR3_BITWORD FOLLOW_DIVIDE_in_multiplicative_expression1449_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_DIVIDE_in_multiplicative_expression1449	= { FOLLOW_DIVIDE_in_multiplicative_expression1449_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MOD_in_multiplicative_expression1453  */
static	ANTLR3_BITWORD FOLLOW_MOD_in_multiplicative_expression1453_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_MOD_in_multiplicative_expression1453	= { FOLLOW_MOD_in_multiplicative_expression1453_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_multiplicative_expression1458  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_multiplicative_expression1458_bits[]	= { ANTLR3_UINT64_LIT(0x0038000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_multiplicative_expression1458	= { FOLLOW_unary_expression_in_multiplicative_expression1458_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_primary_expression_in_unary_expression1503  */
static	ANTLR3_BITWORD FOLLOW_primary_expression_in_unary_expression1503_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_primary_expression_in_unary_expression1503	= { FOLLOW_primary_expression_in_unary_expression1503_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_PLUS_in_unary_expression1517  */
static	ANTLR3_BITWORD FOLLOW_PLUS_in_unary_expression1517_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_PLUS_in_unary_expression1517	= { FOLLOW_PLUS_in_unary_expression1517_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_MINUS_in_unary_expression1521  */
static	ANTLR3_BITWORD FOLLOW_MINUS_in_unary_expression1521_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_MINUS_in_unary_expression1521	= { FOLLOW_MINUS_in_unary_expression1521_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LNOT_in_unary_expression1525  */
static	ANTLR3_BITWORD FOLLOW_LNOT_in_unary_expression1525_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_LNOT_in_unary_expression1525	= { FOLLOW_LNOT_in_unary_expression1525_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_NOT_in_unary_expression1529  */
static	ANTLR3_BITWORD FOLLOW_NOT_in_unary_expression1529_bits[]	= { ANTLR3_UINT64_LIT(0x0006408021168000) };
static  ANTLR3_BITSET_LIST FOLLOW_NOT_in_unary_expression1529	= { FOLLOW_NOT_in_unary_expression1529_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_unary_expression_in_unary_expression1535  */
static	ANTLR3_BITWORD FOLLOW_unary_expression_in_unary_expression1535_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_unary_expression_in_unary_expression1535	= { FOLLOW_unary_expression_in_unary_expression1535_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_attribute_in_primary_expression1562  */
static	ANTLR3_BITWORD FOLLOW_attribute_in_primary_expression1562_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_attribute_in_primary_expression1562	= { FOLLOW_attribute_in_primary_expression1562_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_synthAttribute_in_primary_expression1570  */
static	ANTLR3_BITWORD FOLLOW_synthAttribute_in_primary_expression1570_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_synthAttribute_in_primary_expression1570	= { FOLLOW_synthAttribute_in_primary_expression1570_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_constant_in_primary_expression1578  */
static	ANTLR3_BITWORD FOLLOW_constant_in_primary_expression1578_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_constant_in_primary_expression1578	= { FOLLOW_constant_in_primary_expression1578_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_function_in_primary_expression1586  */
static	ANTLR3_BITWORD FOLLOW_function_in_primary_expression1586_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_function_in_primary_expression1586	= { FOLLOW_function_in_primary_expression1586_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_case_expression_in_primary_expression1594  */
static	ANTLR3_BITWORD FOLLOW_case_expression_in_primary_expression1594_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_case_expression_in_primary_expression1594	= { FOLLOW_case_expression_in_primary_expression1594_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_primary_expression1602  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_primary_expression1602_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_primary_expression1602	= { FOLLOW_LPAREN_in_primary_expression1602_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_primary_expression1605  */
static	ANTLR3_BITWORD FOLLOW_expression_in_primary_expression1605_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_primary_expression1605	= { FOLLOW_expression_in_primary_expression1605_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_primary_expression1607  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_primary_expression1607_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_primary_expression1607	= { FOLLOW_RPAREN_in_primary_expression1607_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_ID_in_function1629  */
static	ANTLR3_BITWORD FOLLOW_ID_in_function1629_bits[]	= { ANTLR3_UINT64_LIT(0x0000000020000000) };
static  ANTLR3_BITSET_LIST FOLLOW_ID_in_function1629	= { FOLLOW_ID_in_function1629_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_LPAREN_in_function1631  */
static	ANTLR3_BITWORD FOLLOW_LPAREN_in_function1631_bits[]	= { ANTLR3_UINT64_LIT(0x000640806117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_LPAREN_in_function1631	= { FOLLOW_LPAREN_in_function1631_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expressionList_in_function1633  */
static	ANTLR3_BITWORD FOLLOW_expressionList_in_function1633_bits[]	= { ANTLR3_UINT64_LIT(0x0000000040000000) };
static  ANTLR3_BITSET_LIST FOLLOW_expressionList_in_function1633	= { FOLLOW_expressionList_in_function1633_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_RPAREN_in_function1635  */
static	ANTLR3_BITWORD FOLLOW_RPAREN_in_function1635_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_RPAREN_in_function1635	= { FOLLOW_RPAREN_in_function1635_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionList1672  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionList1672_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionList1672	= { FOLLOW_expression_in_expressionList1672_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_COMMA_in_expressionList1675  */
static	ANTLR3_BITWORD FOLLOW_COMMA_in_expressionList1675_bits[]	= { ANTLR3_UINT64_LIT(0x000640802117C000) };
static  ANTLR3_BITSET_LIST FOLLOW_COMMA_in_expressionList1675	= { FOLLOW_COMMA_in_expressionList1675_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_expression_in_expressionList1678  */
static	ANTLR3_BITWORD FOLLOW_expression_in_expressionList1678_bits[]	= { ANTLR3_UINT64_LIT(0x0000000004000002) };
static  ANTLR3_BITSET_LIST FOLLOW_expression_in_expressionList1678	= { FOLLOW_expression_in_expressionList1678_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_set_in_constant0  */
static	ANTLR3_BITWORD FOLLOW_set_in_constant0_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_set_in_constant0	= { FOLLOW_set_in_constant0_bits, 1	};
/** Bitset defining follow set for error recovery in rule state: FOLLOW_conditional_expression_in_expression1739  */
static	ANTLR3_BITWORD FOLLOW_conditional_expression_in_expression1739_bits[]	= { ANTLR3_UINT64_LIT(0x0000000000000002) };
static  ANTLR3_BITSET_LIST FOLLOW_conditional_expression_in_expression1739	= { FOLLOW_conditional_expression_in_expression1739_bits, 1	};
     

 
 
/* ==============================================
 * Parsing rules
 */
/** 
 * $ANTLR start ctAttList
 * BaseParser.g:78:1: ctAttList : ( -> | ctAtt ( COMMA ctAtt )* );
 */
static Piggy_BaseParser_ctAttList_return
ctAttList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_ctAttList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA2;
    Piggy_BaseParser_ctAtt_return ctAtt1;
    #undef	RETURN_TYPE_ctAtt1
    #define	RETURN_TYPE_ctAtt1 Piggy_BaseParser_ctAtt_return

    Piggy_BaseParser_ctAtt_return ctAtt3;
    #undef	RETURN_TYPE_ctAtt3
    #define	RETURN_TYPE_ctAtt3 Piggy_BaseParser_ctAtt_return

    pANTLR3_BASE_TREE COMMA2_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA2       = NULL;
    ctAtt1.tree = NULL;
    ctAtt3.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA2_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:79:5: ( -> | ctAtt ( COMMA ctAtt )* )
            
            ANTLR3_UINT32 alt2;

            alt2=2;

            switch ( LA(1) ) 
            {
            case EOF:
            	{
            		alt2=1;
            	}
                break;
            case INT:
            case FLOAT:
            case STRING:
            	{
            		alt2=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 2;
                EXCEPTION->state        = 0;


                goto rulectAttListEx;
            }

            switch (alt2) 
            {
        	case 1:
        	    // BaseParser.g:79:21: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 79:21: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:80:7: ctAtt ( COMMA ctAtt )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_ctAtt_in_ctAttList220);
        	        ctAtt1=ctAtt(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulectAttListEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, ctAtt1.tree);

        	        // BaseParser.g:80:13: ( COMMA ctAtt )*

        	        for (;;)
        	        {
        	            int alt1=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt1=1;
        	            	}
        	                break;

        	            }

        	            switch (alt1) 
        	            {
        	        	case 1:
        	        	    // BaseParser.g:80:14: COMMA ctAtt
        	        	    {
        	        	        COMMA2 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_ctAttList223); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulectAttListEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_ctAtt_in_ctAttList226);
        	        	        ctAtt3=ctAtt(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto rulectAttListEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, ctAtt3.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop1;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop1: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulectAttListEx; /* Prevent compiler warnings */
    rulectAttListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end ctAttList */

/** 
 * $ANTLR start ctAtt
 * BaseParser.g:83:1: ctAtt : ( STRING | INT | FLOAT );
 */
static Piggy_BaseParser_ctAtt_return
ctAtt(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_ctAtt_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set4;

    pANTLR3_BASE_TREE set4_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set4       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set4_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:83:8: ( STRING | INT | FLOAT )
        // BaseParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set4=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == INT || LA(1) == FLOAT || LA(1) == STRING )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set4)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_ctAtt0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_ctAtt0);    goto rulectAttEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulectAttEx; /* Prevent compiler warnings */
    rulectAttEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end ctAtt */

/** 
 * $ANTLR start attListWTypes
 * BaseParser.g:85:1: attListWTypes : ( -> | attWType ( COMMA attWType )* );
 */
static Piggy_BaseParser_attListWTypes_return
attListWTypes(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attListWTypes_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA6;
    Piggy_BaseParser_attWType_return attWType5;
    #undef	RETURN_TYPE_attWType5
    #define	RETURN_TYPE_attWType5 Piggy_BaseParser_attWType_return

    Piggy_BaseParser_attWType_return attWType7;
    #undef	RETURN_TYPE_attWType7
    #define	RETURN_TYPE_attWType7 Piggy_BaseParser_attWType_return

    pANTLR3_BASE_TREE COMMA6_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA6       = NULL;
    attWType5.tree = NULL;
    attWType7.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA6_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:86:5: ( -> | attWType ( COMMA attWType )* )
            
            ANTLR3_UINT32 alt4;

            alt4=2;

            switch ( LA(1) ) 
            {
            case EOF:
            	{
            		alt4=1;
            	}
                break;
            case ID:
            	{
            		alt4=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 4;
                EXCEPTION->state        = 0;


                goto ruleattListWTypesEx;
            }

            switch (alt4) 
            {
        	case 1:
        	    // BaseParser.g:86:21: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 86:21: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:87:7: attWType ( COMMA attWType )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_attWType_in_attListWTypes273);
        	        attWType5=attWType(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattListWTypesEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, attWType5.tree);

        	        // BaseParser.g:87:16: ( COMMA attWType )*

        	        for (;;)
        	        {
        	            int alt3=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt3=1;
        	            	}
        	                break;

        	            }

        	            switch (alt3) 
        	            {
        	        	case 1:
        	        	    // BaseParser.g:87:18: COMMA attWType
        	        	    {
        	        	        COMMA6 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attListWTypes277); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattListWTypesEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_attWType_in_attListWTypes281);
        	        	        attWType7=attWType(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattListWTypesEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, attWType7.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop3;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop3: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleattListWTypesEx; /* Prevent compiler warnings */
    ruleattListWTypesEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attListWTypes */

/** 
 * $ANTLR start attWType
 * BaseParser.g:90:1: attWType : att= ID COLON type= ID -> ^( ATTWT $att $type) ;
 */
static Piggy_BaseParser_attWType_return
attWType(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attWType_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    att;
    pANTLR3_COMMON_TOKEN    type;
    pANTLR3_COMMON_TOKEN    COLON8;

    pANTLR3_BASE_TREE att_tree;
    pANTLR3_BASE_TREE type_tree;
    pANTLR3_BASE_TREE COLON8_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COLON;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    att       = NULL;
    type       = NULL;
    COLON8       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    att_tree   = NULL;
    type_tree   = NULL;
    COLON8_tree   = NULL;

    stream_COLON   = NULL;
    #define CREATE_stream_COLON  if (stream_COLON == NULL) {stream_COLON = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COLON"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        // BaseParser.g:91:5: (att= ID COLON type= ID -> ^( ATTWT $att $type) )
        // BaseParser.g:91:7: att= ID COLON type= ID
        {
            att = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attWType303); 
            if  (HASEXCEPTION())
            {
                goto ruleattWTypeEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, att, NULL);

            COLON8 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_attWType305); 
            if  (HASEXCEPTION())
            {
                goto ruleattWTypeEx;
            }
             
            CREATE_stream_COLON; stream_COLON->add(stream_COLON, COLON8, NULL);

            type = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attWType309); 
            if  (HASEXCEPTION())
            {
                goto ruleattWTypeEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, type, NULL);


             
            /* AST REWRITE
             * elements          : att, type
             * token labels      : att, type
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_att;
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_type;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_att=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token att", att);
            	stream_type=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token type", type);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 91:28: -> ^( ATTWT $att $type)
            	{
            	    // BaseParser.g:91:31: ^( ATTWT $att $type)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTWT, (pANTLR3_UINT8)"ATTWT"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_att == NULL ? NULL : stream_att->nextNode(stream_att));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_type == NULL ? NULL : stream_type->nextNode(stream_type));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_att != NULL) stream_att->free(stream_att); 
            	if (stream_type != NULL) stream_type->free(stream_type); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattWTypeEx; /* Prevent compiler warnings */
    ruleattWTypeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_COLON != NULL) stream_COLON->free(stream_COLON);
        if (stream_ID != NULL) stream_ID->free(stream_ID);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attWType */

/** 
 * $ANTLR start attCList
 * BaseParser.g:94:1: attCList : ( -> | attC ( COMMA attC )* );
 */
static Piggy_BaseParser_attCList_return
attCList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attCList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA10;
    Piggy_BaseParser_attC_return attC9;
    #undef	RETURN_TYPE_attC9
    #define	RETURN_TYPE_attC9 Piggy_BaseParser_attC_return

    Piggy_BaseParser_attC_return attC11;
    #undef	RETURN_TYPE_attC11
    #define	RETURN_TYPE_attC11 Piggy_BaseParser_attC_return

    pANTLR3_BASE_TREE COMMA10_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA10       = NULL;
    attC9.tree = NULL;
    attC11.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA10_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:95:5: ( -> | attC ( COMMA attC )* )
            
            ANTLR3_UINT32 alt6;

            alt6=2;

            switch ( LA(1) ) 
            {
            case EOF:
            	{
            		alt6=1;
            	}
                break;
            case ID:
            	{
            		alt6=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 6;
                EXCEPTION->state        = 0;


                goto ruleattCListEx;
            }

            switch (alt6) 
            {
        	case 1:
        	    // BaseParser.g:95:21: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 95:21: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:96:7: attC ( COMMA attC )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_attC_in_attCList349);
        	        attC9=attC(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleattCListEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, attC9.tree);

        	        // BaseParser.g:96:12: ( COMMA attC )*

        	        for (;;)
        	        {
        	            int alt5=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt5=1;
        	            	}
        	                break;

        	            }

        	            switch (alt5) 
        	            {
        	        	case 1:
        	        	    // BaseParser.g:96:14: COMMA attC
        	        	    {
        	        	        COMMA10 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attCList353); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattCListEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_attC_in_attCList357);
        	        	        attC11=attC(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleattCListEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, attC11.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop5;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop5: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleattCListEx; /* Prevent compiler warnings */
    ruleattCListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attCList */

/** 
 * $ANTLR start attC
 * BaseParser.g:99:1: attC : attCElem -> ^( ATTC attCElem ) ;
 */
static Piggy_BaseParser_attC_return
attC(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attC_return retval;

    pANTLR3_BASE_TREE root_0;

    Piggy_BaseParser_attCElem_return attCElem12;
    #undef	RETURN_TYPE_attCElem12
    #define	RETURN_TYPE_attCElem12 Piggy_BaseParser_attCElem_return

    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_attCElem;
    /* Initialize rule variables
     */


    root_0 = NULL;

    attCElem12.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;


    stream_attCElem   = NULL;
    #define CREATE_stream_attCElem  if (stream_attCElem == NULL) {stream_attCElem = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule attCElem"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:100:5: ( attCElem -> ^( ATTC attCElem ) )
        // BaseParser.g:100:7: attCElem
        {
            FOLLOWPUSH(FOLLOW_attCElem_in_attC377);
            attCElem12=attCElem(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattCEx;
            }

            CREATE_stream_attCElem; stream_attCElem->add(stream_attCElem, attCElem12.tree, NULL);

             
            /* AST REWRITE
             * elements          : attCElem
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 100:16: -> ^( ATTC attCElem )
            	{
            	    // BaseParser.g:100:19: ^( ATTC attCElem )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATTC, (pANTLR3_UINT8)"ATTC"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_attCElem == NULL ? NULL : stream_attCElem->nextTree(stream_attCElem));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattCEx; /* Prevent compiler warnings */
    ruleattCEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_attCElem != NULL) stream_attCElem->free(stream_attCElem);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attC */

/** 
 * $ANTLR start attCElem
 * BaseParser.g:103:10: fragment attCElem : ID ( COLON ID )* ;
 */
static Piggy_BaseParser_attCElem_return
attCElem(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attCElem_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID13;
    pANTLR3_COMMON_TOKEN    COLON14;
    pANTLR3_COMMON_TOKEN    ID15;

    pANTLR3_BASE_TREE ID13_tree;
    pANTLR3_BASE_TREE COLON14_tree;
    pANTLR3_BASE_TREE ID15_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID13       = NULL;
    COLON14       = NULL;
    ID15       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID13_tree   = NULL;
    COLON14_tree   = NULL;
    ID15_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:104:5: ( ID ( COLON ID )* )
        // BaseParser.g:104:7: ID ( COLON ID )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            ID13 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attCElem404); 
            if  (HASEXCEPTION())
            {
                goto ruleattCElemEx;
            }

            ID13_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID13));
            ADAPTOR->addChild(ADAPTOR, root_0, ID13_tree);


            // BaseParser.g:104:10: ( COLON ID )*

            for (;;)
            {
                int alt7=2;
                switch ( LA(1) ) 
                {
                case COLON:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7) 
                {
            	case 1:
            	    // BaseParser.g:104:11: COLON ID
            	    {
            	        COLON14 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_attCElem407); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattCElemEx;
            	        }

            	        ID15 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attCElem410); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattCElemEx;
            	        }

            	        ID15_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID15));
            	        ADAPTOR->addChild(ADAPTOR, root_0, ID15_tree);


            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattCElemEx; /* Prevent compiler warnings */
    ruleattCElemEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attCElem */

/** 
 * $ANTLR start idList
 * BaseParser.g:107:1: idList : ID ( COMMA ID )* ;
 */
static Piggy_BaseParser_idList_return
idList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_idList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID16;
    pANTLR3_COMMON_TOKEN    COMMA17;
    pANTLR3_COMMON_TOKEN    ID18;

    pANTLR3_BASE_TREE ID16_tree;
    pANTLR3_BASE_TREE COMMA17_tree;
    pANTLR3_BASE_TREE ID18_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    ID16       = NULL;
    COMMA17       = NULL;
    ID18       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID16_tree   = NULL;
    COMMA17_tree   = NULL;
    ID18_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:107:12: ( ID ( COMMA ID )* )
        // BaseParser.g:107:17: ID ( COMMA ID )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            ID16 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_idList432); 
            if  (HASEXCEPTION())
            {
                goto ruleidListEx;
            }

            ID16_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID16));
            ADAPTOR->addChild(ADAPTOR, root_0, ID16_tree);


            // BaseParser.g:107:20: ( COMMA ID )*

            for (;;)
            {
                int alt8=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8) 
                {
            	case 1:
            	    // BaseParser.g:107:22: COMMA ID
            	    {
            	        COMMA17 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_idList436); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleidListEx;
            	        }

            	        COMMA17_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, COMMA17));
            	        ADAPTOR->addChild(ADAPTOR, root_0, COMMA17_tree);

            	        ID18 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_idList438); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleidListEx;
            	        }

            	        ID18_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, ID18));
            	        ADAPTOR->addChild(ADAPTOR, root_0, ID18_tree);


            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleidListEx; /* Prevent compiler warnings */
    ruleidListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end idList */

/** 
 * $ANTLR start attributeList
 * BaseParser.g:111:1: attributeList : attribute ( COMMA attribute )* ;
 */
static Piggy_BaseParser_attributeList_return
attributeList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attributeList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA20;
    Piggy_BaseParser_attribute_return attribute19;
    #undef	RETURN_TYPE_attribute19
    #define	RETURN_TYPE_attribute19 Piggy_BaseParser_attribute_return

    Piggy_BaseParser_attribute_return attribute21;
    #undef	RETURN_TYPE_attribute21
    #define	RETURN_TYPE_attribute21 Piggy_BaseParser_attribute_return

    pANTLR3_BASE_TREE COMMA20_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA20       = NULL;
    attribute19.tree = NULL;
    attribute21.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA20_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:111:15: ( attribute ( COMMA attribute )* )
        // BaseParser.g:111:20: attribute ( COMMA attribute )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_attribute_in_attributeList457);
            attribute19=attribute(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleattributeListEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, attribute19.tree);

            // BaseParser.g:111:31: ( COMMA attribute )*

            for (;;)
            {
                int alt9=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9) 
                {
            	case 1:
            	    // BaseParser.g:111:33: COMMA attribute
            	    {
            	        COMMA20 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attributeList462); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattributeListEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_attribute_in_attributeList465);
            	        attribute21=attribute(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattributeListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, attribute21.tree);

            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattributeListEx; /* Prevent compiler warnings */
    ruleattributeListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attributeList */

/** 
 * $ANTLR start attributeEList
 * BaseParser.g:114:1: attributeEList : ( attribute | synthAttribute ) ( COMMA ( attribute | synthAttribute ) )* ;
 */
static Piggy_BaseParser_attributeEList_return
attributeEList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attributeEList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA24;
    Piggy_BaseParser_attribute_return attribute22;
    #undef	RETURN_TYPE_attribute22
    #define	RETURN_TYPE_attribute22 Piggy_BaseParser_attribute_return

    Piggy_BaseParser_synthAttribute_return synthAttribute23;
    #undef	RETURN_TYPE_synthAttribute23
    #define	RETURN_TYPE_synthAttribute23 Piggy_BaseParser_synthAttribute_return

    Piggy_BaseParser_attribute_return attribute25;
    #undef	RETURN_TYPE_attribute25
    #define	RETURN_TYPE_attribute25 Piggy_BaseParser_attribute_return

    Piggy_BaseParser_synthAttribute_return synthAttribute26;
    #undef	RETURN_TYPE_synthAttribute26
    #define	RETURN_TYPE_synthAttribute26 Piggy_BaseParser_synthAttribute_return

    pANTLR3_BASE_TREE COMMA24_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA24       = NULL;
    attribute22.tree = NULL;
    synthAttribute23.tree = NULL;
    attribute25.tree = NULL;
    synthAttribute26.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA24_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:114:16: ( ( attribute | synthAttribute ) ( COMMA ( attribute | synthAttribute ) )* )
        // BaseParser.g:114:21: ( attribute | synthAttribute ) ( COMMA ( attribute | synthAttribute ) )*
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));


            // BaseParser.g:114:21: ( attribute | synthAttribute )
            {
                int alt10=2;
                switch ( LA(1) ) 
                {
                case ID:
                	{
                		switch ( LA(2) ) 
                		{
                		case DOT:
                			{
                				alt10=1;
                			}
                		    break;
                		case COMMA:
                		case RPAREN:
                			{
                				alt10=2;
                			}
                		    break;

                		default:
                		    CONSTRUCTEX();
                		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                		    EXCEPTION->message      = (void *)"";
                		    EXCEPTION->decisionNum  = 10;
                		    EXCEPTION->state        = 1;


                		    goto ruleattributeEListEx;
                		}

                	}
                    break;

                default:
                    CONSTRUCTEX();
                    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                    EXCEPTION->message      = (void *)"";
                    EXCEPTION->decisionNum  = 10;
                    EXCEPTION->state        = 0;


                    goto ruleattributeEListEx;
                }

                switch (alt10) 
                {
            	case 1:
            	    // BaseParser.g:114:22: attribute
            	    {
            	        FOLLOWPUSH(FOLLOW_attribute_in_attributeEList482);
            	        attribute22=attribute(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattributeEListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, attribute22.tree);

            	    }
            	    break;
            	case 2:
            	    // BaseParser.g:114:32: synthAttribute
            	    {
            	        FOLLOWPUSH(FOLLOW_synthAttribute_in_attributeEList484);
            	        synthAttribute23=synthAttribute(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattributeEListEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, synthAttribute23.tree);

            	    }
            	    break;

                }
            }

            // BaseParser.g:114:49: ( COMMA ( attribute | synthAttribute ) )*

            for (;;)
            {
                int alt12=2;
                switch ( LA(1) ) 
                {
                case COMMA:
                	{
                		alt12=1;
                	}
                    break;

                }

                switch (alt12) 
                {
            	case 1:
            	    // BaseParser.g:114:51: COMMA ( attribute | synthAttribute )
            	    {
            	        COMMA24 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_attributeEList490); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleattributeEListEx;
            	        }


            	        // BaseParser.g:114:58: ( attribute | synthAttribute )
            	        {
            	            int alt11=2;
            	            switch ( LA(1) ) 
            	            {
            	            case ID:
            	            	{
            	            		switch ( LA(2) ) 
            	            		{
            	            		case DOT:
            	            			{
            	            				alt11=1;
            	            			}
            	            		    break;
            	            		case COMMA:
            	            		case RPAREN:
            	            			{
            	            				alt11=2;
            	            			}
            	            		    break;

            	            		default:
            	            		    CONSTRUCTEX();
            	            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	            		    EXCEPTION->message      = (void *)"";
            	            		    EXCEPTION->decisionNum  = 11;
            	            		    EXCEPTION->state        = 1;


            	            		    goto ruleattributeEListEx;
            	            		}

            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 11;
            	                EXCEPTION->state        = 0;


            	                goto ruleattributeEListEx;
            	            }

            	            switch (alt11) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:114:59: attribute
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_attribute_in_attributeEList494);
            	        	        attribute25=attribute(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleattributeEListEx;
            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, attribute25.tree);

            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:114:69: synthAttribute
            	        	    {
            	        	        FOLLOWPUSH(FOLLOW_synthAttribute_in_attributeEList496);
            	        	        synthAttribute26=synthAttribute(ctx);

            	        	        FOLLOWPOP();
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleattributeEListEx;
            	        	        }

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, synthAttribute26.tree);

            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattributeEListEx; /* Prevent compiler warnings */
    ruleattributeEListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attributeEList */

/** 
 * $ANTLR start attribute
 * BaseParser.g:116:1: attribute : rel= ID DOT att= ID -> ATT[$att, longName.c_str()] ;
 */
static Piggy_BaseParser_attribute_return
attribute(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_attribute_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    rel;
    pANTLR3_COMMON_TOKEN    att;
    pANTLR3_COMMON_TOKEN    DOT27;

    pANTLR3_BASE_TREE rel_tree;
    pANTLR3_BASE_TREE att_tree;
    pANTLR3_BASE_TREE DOT27_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DOT;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string longName;
    rel       = NULL;
    att       = NULL;
    DOT27       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    rel_tree   = NULL;
    att_tree   = NULL;
    DOT27_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_DOT   = NULL;
    #define CREATE_stream_DOT  if (stream_DOT == NULL) {stream_DOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DOT"); } 

    retval.tree  = NULL;
    {
        // BaseParser.g:118:5: (rel= ID DOT att= ID -> ATT[$att, longName.c_str()] )
        // BaseParser.g:118:11: rel= ID DOT att= ID
        {
            rel = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attribute524); 
            if  (HASEXCEPTION())
            {
                goto ruleattributeEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, rel, NULL);

            DOT27 = (pANTLR3_COMMON_TOKEN) MATCHT(DOT, &FOLLOW_DOT_in_attribute526); 
            if  (HASEXCEPTION())
            {
                goto ruleattributeEx;
            }
             
            CREATE_stream_DOT; stream_DOT->add(stream_DOT, DOT27, NULL);

            att = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_attribute530); 
            if  (HASEXCEPTION())
            {
                goto ruleattributeEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, att, NULL);

            {

                            // check sanity of attribute
                            longName = (char*)(rel->getText(rel))->chars;
                            longName += "_";
                            longName += (char*)(att->getText(att))->chars;
                            AttributeManager& am = AttributeManager::GetAttributeManager();
                            SlotID slot = am.GetAttributeSlot(longName.c_str());
                            WARNINGIF( !slot.IsValid(), "Attribute does not exist");
                        
            }

             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 126:11: -> ATT[$att, longName.c_str()]
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, 
            	    #if 2 == 2
            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ATT, TOKTEXT(att, longName.c_str()))
            	    #else
            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATT, (pANTLR3_UINT8)att, longName.c_str())
            	    #endif
            	    );

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleattributeEx; /* Prevent compiler warnings */
    ruleattributeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_DOT != NULL) stream_DOT->free(stream_DOT);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end attribute */

/** 
 * $ANTLR start synthAttribute
 * BaseParser.g:129:1: synthAttribute : ID -> ATT[$ID, longName.c_str()] ;
 */
static Piggy_BaseParser_synthAttribute_return
synthAttribute(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_synthAttribute_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID28;

    pANTLR3_BASE_TREE ID28_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;

    /* Initialize rule variables
     */


    root_0 = NULL;

    string longName; 
    ID28       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID28_tree   = NULL;

    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 

    retval.tree  = NULL;
    {
        // BaseParser.g:131:5: ( ID -> ATT[$ID, longName.c_str()] )
        // BaseParser.g:131:10: ID
        {
            ID28 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_synthAttribute563); 
            if  (HASEXCEPTION())
            {
                goto rulesynthAttributeEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID28, NULL);

            {

                      longName = qry;
                      longName += "_";
                      longName += (char*)(ID28->getText(ID28))->chars;
                      // check delayed
                      // to check accumulate all atttributes of a query in a list
                    
            }

             
            /* AST REWRITE
             * elements          : 
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 137:7: -> ATT[$ID, longName.c_str()]
            	{
            	    ADAPTOR->addChild(ADAPTOR, root_0, 
            	    #if 2 == 2
            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, ATT, TOKTEXT(ID28, longName.c_str()))
            	    #else
            	    	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, ATT, (pANTLR3_UINT8)ID28, longName.c_str())
            	    #endif
            	    );

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulesynthAttributeEx; /* Prevent compiler warnings */
    rulesynthAttributeEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_ID != NULL) stream_ID->free(stream_ID);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end synthAttribute */

/** 
 * $ANTLR start conditional_expression
 * BaseParser.g:141:1: conditional_expression : logical_or_expression ( QMARK expression COLON expression )? ;
 */
static Piggy_BaseParser_conditional_expression_return
conditional_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_conditional_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    QMARK30;
    pANTLR3_COMMON_TOKEN    COLON32;
    Piggy_BaseParser_logical_or_expression_return logical_or_expression29;
    #undef	RETURN_TYPE_logical_or_expression29
    #define	RETURN_TYPE_logical_or_expression29 Piggy_BaseParser_logical_or_expression_return

    Piggy_BaseParser_expression_return expression31;
    #undef	RETURN_TYPE_expression31
    #define	RETURN_TYPE_expression31 Piggy_BaseParser_expression_return

    Piggy_BaseParser_expression_return expression33;
    #undef	RETURN_TYPE_expression33
    #define	RETURN_TYPE_expression33 Piggy_BaseParser_expression_return

    pANTLR3_BASE_TREE QMARK30_tree;
    pANTLR3_BASE_TREE COLON32_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    QMARK30       = NULL;
    COLON32       = NULL;
    logical_or_expression29.tree = NULL;
    expression31.tree = NULL;
    expression33.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    QMARK30_tree   = NULL;
    COLON32_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:144:5: ( logical_or_expression ( QMARK expression COLON expression )? )
        // BaseParser.g:144:7: logical_or_expression ( QMARK expression COLON expression )?
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_logical_or_expression_in_conditional_expression589);
            logical_or_expression29=logical_or_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleconditional_expressionEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, logical_or_expression29.tree);

            // BaseParser.g:144:29: ( QMARK expression COLON expression )?
            {
                int alt13=2;
                switch ( LA(1) ) 
                {
                    case QMARK:
                    	{
                    		alt13=1;
                    	}
                        break;
                }

                switch (alt13) 
                {
            	case 1:
            	    // BaseParser.g:144:30: QMARK expression COLON expression
            	    {
            	        QMARK30 = (pANTLR3_COMMON_TOKEN) MATCHT(QMARK, &FOLLOW_QMARK_in_conditional_expression592); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }

            	        QMARK30_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, QMARK30));
            	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, QMARK30_tree, root_0));

            	        FOLLOWPUSH(FOLLOW_expression_in_conditional_expression595);
            	        expression31=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, expression31.tree);
            	        COLON32 = (pANTLR3_COMMON_TOKEN) MATCHT(COLON, &FOLLOW_COLON_in_conditional_expression597); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }

            	        FOLLOWPUSH(FOLLOW_expression_in_conditional_expression600);
            	        expression33=expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleconditional_expressionEx;
            	        }

            	        ADAPTOR->addChild(ADAPTOR, root_0, expression33.tree);

            	    }
            	    break;

                }
            }

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconditional_expressionEx; /* Prevent compiler warnings */
    ruleconditional_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end conditional_expression */

/** 
 * $ANTLR start logical_or_expression
 * BaseParser.g:147:1: logical_or_expression : ( logical_and_expression -> logical_and_expression ) (o= LOR e= logical_and_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e) )* ;
 */
static Piggy_BaseParser_logical_or_expression_return
logical_or_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_logical_or_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_logical_and_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_logical_and_expression_return

    Piggy_BaseParser_logical_and_expression_return logical_and_expression34;
    #undef	RETURN_TYPE_logical_and_expression34
    #define	RETURN_TYPE_logical_and_expression34 Piggy_BaseParser_logical_and_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_logical_and_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    logical_and_expression34.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_LOR   = NULL;
    #define CREATE_stream_LOR  if (stream_LOR == NULL) {stream_LOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LOR"); } 
    stream_logical_and_expression   = NULL;
    #define CREATE_stream_logical_and_expression  if (stream_logical_and_expression == NULL) {stream_logical_and_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule logical_and_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:149:5: ( ( logical_and_expression -> logical_and_expression ) (o= LOR e= logical_and_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e) )* )
        // BaseParser.g:149:7: ( logical_and_expression -> logical_and_expression ) (o= LOR e= logical_and_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e) )*
        {
            // BaseParser.g:149:7: ( logical_and_expression -> logical_and_expression )
            // BaseParser.g:149:8: logical_and_expression
            {
                FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression625);
                logical_and_expression34=logical_and_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogical_or_expressionEx;
                }

                CREATE_stream_logical_and_expression; stream_logical_and_expression->add(stream_logical_and_expression, logical_and_expression34.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : logical_and_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 149:31: -> logical_and_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_logical_and_expression == NULL ? NULL : stream_logical_and_expression->nextTree(stream_logical_and_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:149:58: (o= LOR e= logical_and_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e) )*

            for (;;)
            {
                int alt14=2;
                switch ( LA(1) ) 
                {
                case LOR:
                	{
                		alt14=1;
                	}
                    break;

                }

                switch (alt14) 
                {
            	case 1:
            	    // BaseParser.g:150:9: o= LOR e= logical_and_expression
            	    {
            	        o = (pANTLR3_COMMON_TOKEN) MATCHT(LOR, &FOLLOW_LOR_in_logical_or_expression644); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }
            	         
            	        CREATE_stream_LOR; stream_LOR->add(stream_LOR, o, NULL);

            	        FOLLOWPUSH(FOLLOW_logical_and_expression_in_logical_or_expression648);
            	        e=logical_and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_or_expressionEx;
            	        }

            	        CREATE_stream_logical_and_expression; stream_logical_and_expression->add(stream_logical_and_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : logical_or_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 150:40: -> ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e)
            	        	{
            	        	    // BaseParser.g:150:43: ^( OPERATOR[$o, $o.text->chars] $logical_or_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_or_expressionEx; /* Prevent compiler warnings */
    rulelogical_or_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LOR != NULL) stream_LOR->free(stream_LOR);
        if (stream_logical_and_expression != NULL) stream_logical_and_expression->free(stream_logical_and_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end logical_or_expression */

/** 
 * $ANTLR start logical_and_expression
 * BaseParser.g:154:1: logical_and_expression : ( inclusive_or_expression -> inclusive_or_expression ) (o= LAND e= inclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e) )* ;
 */
static Piggy_BaseParser_logical_and_expression_return
logical_and_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_logical_and_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_inclusive_or_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_inclusive_or_expression_return

    Piggy_BaseParser_inclusive_or_expression_return inclusive_or_expression35;
    #undef	RETURN_TYPE_inclusive_or_expression35
    #define	RETURN_TYPE_inclusive_or_expression35 Piggy_BaseParser_inclusive_or_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LAND;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_inclusive_or_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    inclusive_or_expression35.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_LAND   = NULL;
    #define CREATE_stream_LAND  if (stream_LAND == NULL) {stream_LAND = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LAND"); } 
    stream_inclusive_or_expression   = NULL;
    #define CREATE_stream_inclusive_or_expression  if (stream_inclusive_or_expression == NULL) {stream_inclusive_or_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule inclusive_or_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:156:5: ( ( inclusive_or_expression -> inclusive_or_expression ) (o= LAND e= inclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e) )* )
        // BaseParser.g:156:7: ( inclusive_or_expression -> inclusive_or_expression ) (o= LAND e= inclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e) )*
        {
            // BaseParser.g:156:7: ( inclusive_or_expression -> inclusive_or_expression )
            // BaseParser.g:156:8: inclusive_or_expression
            {
                FOLLOWPUSH(FOLLOW_inclusive_or_expression_in_logical_and_expression695);
                inclusive_or_expression35=inclusive_or_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulelogical_and_expressionEx;
                }

                CREATE_stream_inclusive_or_expression; stream_inclusive_or_expression->add(stream_inclusive_or_expression, inclusive_or_expression35.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : inclusive_or_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 156:32: -> inclusive_or_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_inclusive_or_expression == NULL ? NULL : stream_inclusive_or_expression->nextTree(stream_inclusive_or_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:156:60: (o= LAND e= inclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e) )*

            for (;;)
            {
                int alt15=2;
                switch ( LA(1) ) 
                {
                case LAND:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15) 
                {
            	case 1:
            	    // BaseParser.g:157:9: o= LAND e= inclusive_or_expression
            	    {
            	        o = (pANTLR3_COMMON_TOKEN) MATCHT(LAND, &FOLLOW_LAND_in_logical_and_expression714); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }
            	         
            	        CREATE_stream_LAND; stream_LAND->add(stream_LAND, o, NULL);

            	        FOLLOWPUSH(FOLLOW_inclusive_or_expression_in_logical_and_expression718);
            	        e=inclusive_or_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulelogical_and_expressionEx;
            	        }

            	        CREATE_stream_inclusive_or_expression; stream_inclusive_or_expression->add(stream_inclusive_or_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : e, logical_and_expression
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 157:42: -> ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e)
            	        	{
            	        	    // BaseParser.g:157:45: ^( OPERATOR[$o, $o.text->chars] $logical_and_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulelogical_and_expressionEx; /* Prevent compiler warnings */
    rulelogical_and_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LAND != NULL) stream_LAND->free(stream_LAND);
        if (stream_inclusive_or_expression != NULL) stream_inclusive_or_expression->free(stream_inclusive_or_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end logical_and_expression */

/** 
 * $ANTLR start inclusive_or_expression
 * BaseParser.g:161:1: inclusive_or_expression : ( exclusive_or_expression -> exclusive_or_expression ) (o= BOR e= exclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e) )* ;
 */
static Piggy_BaseParser_inclusive_or_expression_return
inclusive_or_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_inclusive_or_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_exclusive_or_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_exclusive_or_expression_return

    Piggy_BaseParser_exclusive_or_expression_return exclusive_or_expression36;
    #undef	RETURN_TYPE_exclusive_or_expression36
    #define	RETURN_TYPE_exclusive_or_expression36 Piggy_BaseParser_exclusive_or_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_exclusive_or_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    exclusive_or_expression36.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_BOR   = NULL;
    #define CREATE_stream_BOR  if (stream_BOR == NULL) {stream_BOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BOR"); } 
    stream_exclusive_or_expression   = NULL;
    #define CREATE_stream_exclusive_or_expression  if (stream_exclusive_or_expression == NULL) {stream_exclusive_or_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule exclusive_or_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:163:5: ( ( exclusive_or_expression -> exclusive_or_expression ) (o= BOR e= exclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e) )* )
        // BaseParser.g:163:7: ( exclusive_or_expression -> exclusive_or_expression ) (o= BOR e= exclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e) )*
        {
            // BaseParser.g:163:7: ( exclusive_or_expression -> exclusive_or_expression )
            // BaseParser.g:163:8: exclusive_or_expression
            {
                FOLLOWPUSH(FOLLOW_exclusive_or_expression_in_inclusive_or_expression765);
                exclusive_or_expression36=exclusive_or_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleinclusive_or_expressionEx;
                }

                CREATE_stream_exclusive_or_expression; stream_exclusive_or_expression->add(stream_exclusive_or_expression, exclusive_or_expression36.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : exclusive_or_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 163:32: -> exclusive_or_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_exclusive_or_expression == NULL ? NULL : stream_exclusive_or_expression->nextTree(stream_exclusive_or_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:163:60: (o= BOR e= exclusive_or_expression -> ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e) )*

            for (;;)
            {
                int alt16=2;
                switch ( LA(1) ) 
                {
                case BOR:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16) 
                {
            	case 1:
            	    // BaseParser.g:164:9: o= BOR e= exclusive_or_expression
            	    {
            	        o = (pANTLR3_COMMON_TOKEN) MATCHT(BOR, &FOLLOW_BOR_in_inclusive_or_expression784); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }
            	         
            	        CREATE_stream_BOR; stream_BOR->add(stream_BOR, o, NULL);

            	        FOLLOWPUSH(FOLLOW_exclusive_or_expression_in_inclusive_or_expression788);
            	        e=exclusive_or_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleinclusive_or_expressionEx;
            	        }

            	        CREATE_stream_exclusive_or_expression; stream_exclusive_or_expression->add(stream_exclusive_or_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : inclusive_or_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 164:41: -> ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e)
            	        	{
            	        	    // BaseParser.g:164:44: ^( OPERATOR[$o, $o.text->chars] $inclusive_or_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop16;	/* break out of the loop */
            	    break;
                }
            }
            loop16: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleinclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleinclusive_or_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BOR != NULL) stream_BOR->free(stream_BOR);
        if (stream_exclusive_or_expression != NULL) stream_exclusive_or_expression->free(stream_exclusive_or_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end inclusive_or_expression */

/** 
 * $ANTLR start exclusive_or_expression
 * BaseParser.g:168:1: exclusive_or_expression : ( and_expression -> and_expression ) (o= XOR e= and_expression -> ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e) )* ;
 */
static Piggy_BaseParser_exclusive_or_expression_return
exclusive_or_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_exclusive_or_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_and_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_and_expression_return

    Piggy_BaseParser_and_expression_return and_expression37;
    #undef	RETURN_TYPE_and_expression37
    #define	RETURN_TYPE_and_expression37 Piggy_BaseParser_and_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_XOR;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_and_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    and_expression37.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_XOR   = NULL;
    #define CREATE_stream_XOR  if (stream_XOR == NULL) {stream_XOR = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token XOR"); } 
    stream_and_expression   = NULL;
    #define CREATE_stream_and_expression  if (stream_and_expression == NULL) {stream_and_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule and_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:170:5: ( ( and_expression -> and_expression ) (o= XOR e= and_expression -> ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e) )* )
        // BaseParser.g:170:7: ( and_expression -> and_expression ) (o= XOR e= and_expression -> ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e) )*
        {
            // BaseParser.g:170:7: ( and_expression -> and_expression )
            // BaseParser.g:170:8: and_expression
            {
                FOLLOWPUSH(FOLLOW_and_expression_in_exclusive_or_expression835);
                and_expression37=and_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleexclusive_or_expressionEx;
                }

                CREATE_stream_and_expression; stream_and_expression->add(stream_and_expression, and_expression37.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : and_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 170:23: -> and_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_and_expression == NULL ? NULL : stream_and_expression->nextTree(stream_and_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:170:42: (o= XOR e= and_expression -> ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e) )*

            for (;;)
            {
                int alt17=2;
                switch ( LA(1) ) 
                {
                case XOR:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17) 
                {
            	case 1:
            	    // BaseParser.g:171:9: o= XOR e= and_expression
            	    {
            	        o = (pANTLR3_COMMON_TOKEN) MATCHT(XOR, &FOLLOW_XOR_in_exclusive_or_expression854); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }
            	         
            	        CREATE_stream_XOR; stream_XOR->add(stream_XOR, o, NULL);

            	        FOLLOWPUSH(FOLLOW_and_expression_in_exclusive_or_expression858);
            	        e=and_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleexclusive_or_expressionEx;
            	        }

            	        CREATE_stream_and_expression; stream_and_expression->add(stream_and_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : exclusive_or_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 171:32: -> ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e)
            	        	{
            	        	    // BaseParser.g:171:35: ^( OPERATOR[$o, $o.text->chars] $exclusive_or_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexclusive_or_expressionEx; /* Prevent compiler warnings */
    ruleexclusive_or_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_XOR != NULL) stream_XOR->free(stream_XOR);
        if (stream_and_expression != NULL) stream_and_expression->free(stream_and_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end exclusive_or_expression */

/** 
 * $ANTLR start and_expression
 * BaseParser.g:175:1: and_expression : ( basic_bool_expression -> basic_bool_expression ) (o= BAND e= basic_bool_expression -> ^( OPERATOR[$o, $o.text->chars] $and_expression $e) )* ;
 */
static Piggy_BaseParser_and_expression_return
and_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_and_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_basic_bool_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_basic_bool_expression_return

    Piggy_BaseParser_basic_bool_expression_return basic_bool_expression38;
    #undef	RETURN_TYPE_basic_bool_expression38
    #define	RETURN_TYPE_basic_bool_expression38 Piggy_BaseParser_basic_bool_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_BAND;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_basic_bool_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    basic_bool_expression38.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_BAND   = NULL;
    #define CREATE_stream_BAND  if (stream_BAND == NULL) {stream_BAND = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token BAND"); } 
    stream_basic_bool_expression   = NULL;
    #define CREATE_stream_basic_bool_expression  if (stream_basic_bool_expression == NULL) {stream_basic_bool_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule basic_bool_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:177:5: ( ( basic_bool_expression -> basic_bool_expression ) (o= BAND e= basic_bool_expression -> ^( OPERATOR[$o, $o.text->chars] $and_expression $e) )* )
        // BaseParser.g:177:7: ( basic_bool_expression -> basic_bool_expression ) (o= BAND e= basic_bool_expression -> ^( OPERATOR[$o, $o.text->chars] $and_expression $e) )*
        {
            // BaseParser.g:177:7: ( basic_bool_expression -> basic_bool_expression )
            // BaseParser.g:177:8: basic_bool_expression
            {
                FOLLOWPUSH(FOLLOW_basic_bool_expression_in_and_expression905);
                basic_bool_expression38=basic_bool_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleand_expressionEx;
                }

                CREATE_stream_basic_bool_expression; stream_basic_bool_expression->add(stream_basic_bool_expression, basic_bool_expression38.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : basic_bool_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 177:30: -> basic_bool_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_basic_bool_expression == NULL ? NULL : stream_basic_bool_expression->nextTree(stream_basic_bool_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:177:56: (o= BAND e= basic_bool_expression -> ^( OPERATOR[$o, $o.text->chars] $and_expression $e) )*

            for (;;)
            {
                int alt18=2;
                switch ( LA(1) ) 
                {
                case BAND:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18) 
                {
            	case 1:
            	    // BaseParser.g:178:9: o= BAND e= basic_bool_expression
            	    {
            	        o = (pANTLR3_COMMON_TOKEN) MATCHT(BAND, &FOLLOW_BAND_in_and_expression924); 
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleand_expressionEx;
            	        }
            	         
            	        CREATE_stream_BAND; stream_BAND->add(stream_BAND, o, NULL);

            	        FOLLOWPUSH(FOLLOW_basic_bool_expression_in_and_expression928);
            	        e=basic_bool_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleand_expressionEx;
            	        }

            	        CREATE_stream_basic_bool_expression; stream_basic_bool_expression->add(stream_basic_bool_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : e, and_expression
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 178:40: -> ^( OPERATOR[$o, $o.text->chars] $and_expression $e)
            	        	{
            	        	    // BaseParser.g:178:43: ^( OPERATOR[$o, $o.text->chars] $and_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleand_expressionEx; /* Prevent compiler warnings */
    ruleand_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_BAND != NULL) stream_BAND->free(stream_BAND);
        if (stream_basic_bool_expression != NULL) stream_basic_bool_expression->free(stream_basic_bool_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end and_expression */

/** 
 * $ANTLR start basic_bool_expression
 * BaseParser.g:182:1: basic_bool_expression : ( equality_expression | match_expression | BOOL_T );
 */
static Piggy_BaseParser_basic_bool_expression_return
basic_bool_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_basic_bool_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    BOOL_T41;
    Piggy_BaseParser_equality_expression_return equality_expression39;
    #undef	RETURN_TYPE_equality_expression39
    #define	RETURN_TYPE_equality_expression39 Piggy_BaseParser_equality_expression_return

    Piggy_BaseParser_match_expression_return match_expression40;
    #undef	RETURN_TYPE_match_expression40
    #define	RETURN_TYPE_match_expression40 Piggy_BaseParser_match_expression_return

    pANTLR3_BASE_TREE BOOL_T41_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    BOOL_T41       = NULL;
    equality_expression39.tree = NULL;
    match_expression40.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    BOOL_T41_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:183:5: ( equality_expression | match_expression | BOOL_T )
            
            ANTLR3_UINT32 alt19;

            alt19=3;

            switch ( LA(1) ) 
            {
            case CASE_DP:
            case ID:
            case INT:
            case FLOAT:
            case STRING:
            case LPAREN:
            case LNOT:
            case NOT:
            case PLUS:
            case MINUS:
            	{
            		alt19=1;
            	}
                break;
            case MATCH_DP:
            	{
            		alt19=2;
            	}
                break;
            case BOOL_T:
            	{
            		alt19=3;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 19;
                EXCEPTION->state        = 0;


                goto rulebasic_bool_expressionEx;
            }

            switch (alt19) 
            {
        	case 1:
        	    // BaseParser.g:183:7: equality_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_equality_expression_in_basic_bool_expression969);
        	        equality_expression39=equality_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebasic_bool_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, equality_expression39.tree);

        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:184:7: match_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_match_expression_in_basic_bool_expression977);
        	        match_expression40=match_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebasic_bool_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, match_expression40.tree);

        	    }
        	    break;
        	case 3:
        	    // BaseParser.g:185:7: BOOL_T
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        BOOL_T41 = (pANTLR3_COMMON_TOKEN) MATCHT(BOOL_T, &FOLLOW_BOOL_T_in_basic_bool_expression985); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto rulebasic_bool_expressionEx;
        	        }

        	        BOOL_T41_tree = (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, BOOL_T41));
        	        ADAPTOR->addChild(ADAPTOR, root_0, BOOL_T41_tree);


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto rulebasic_bool_expressionEx; /* Prevent compiler warnings */
    rulebasic_bool_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end basic_bool_expression */

/** 
 * $ANTLR start match_expression
 * BaseParser.g:188:1: match_expression : MATCH_DP LPAREN expr= expression COMMA patt= STRING RPAREN -> ^( MATCH_DP $patt $expr) ;
 */
static Piggy_BaseParser_match_expression_return
match_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_match_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    patt;
    pANTLR3_COMMON_TOKEN    MATCH_DP42;
    pANTLR3_COMMON_TOKEN    LPAREN43;
    pANTLR3_COMMON_TOKEN    COMMA44;
    pANTLR3_COMMON_TOKEN    RPAREN45;
    Piggy_BaseParser_expression_return expr;
    #undef	RETURN_TYPE_expr
    #define	RETURN_TYPE_expr Piggy_BaseParser_expression_return

    pANTLR3_BASE_TREE patt_tree;
    pANTLR3_BASE_TREE MATCH_DP42_tree;
    pANTLR3_BASE_TREE LPAREN43_tree;
    pANTLR3_BASE_TREE COMMA44_tree;
    pANTLR3_BASE_TREE RPAREN45_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_MATCH_DP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_STRING;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    patt       = NULL;
    MATCH_DP42       = NULL;
    LPAREN43       = NULL;
    COMMA44       = NULL;
    RPAREN45       = NULL;
    expr.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    patt_tree   = NULL;
    MATCH_DP42_tree   = NULL;
    LPAREN43_tree   = NULL;
    COMMA44_tree   = NULL;
    RPAREN45_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_MATCH_DP   = NULL;
    #define CREATE_stream_MATCH_DP  if (stream_MATCH_DP == NULL) {stream_MATCH_DP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token MATCH_DP"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_STRING   = NULL;
    #define CREATE_stream_STRING  if (stream_STRING == NULL) {stream_STRING = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token STRING"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:189:5: ( MATCH_DP LPAREN expr= expression COMMA patt= STRING RPAREN -> ^( MATCH_DP $patt $expr) )
        // BaseParser.g:189:7: MATCH_DP LPAREN expr= expression COMMA patt= STRING RPAREN
        {
            MATCH_DP42 = (pANTLR3_COMMON_TOKEN) MATCHT(MATCH_DP, &FOLLOW_MATCH_DP_in_match_expression1002); 
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }
             
            CREATE_stream_MATCH_DP; stream_MATCH_DP->add(stream_MATCH_DP, MATCH_DP42, NULL);

            LPAREN43 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_match_expression1004); 
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN43, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_match_expression1008);
            expr=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, expr.tree, NULL);
            COMMA44 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_match_expression1010); 
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }
             
            CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA44, NULL);

            patt = (pANTLR3_COMMON_TOKEN) MATCHT(STRING, &FOLLOW_STRING_in_match_expression1014); 
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }
             
            CREATE_stream_STRING; stream_STRING->add(stream_STRING, patt, NULL);

            RPAREN45 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_match_expression1016); 
            if  (HASEXCEPTION())
            {
                goto rulematch_expressionEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN45, NULL);


             
            /* AST REWRITE
             * elements          : expr, MATCH_DP, patt
             * token labels      : patt
             * rule labels       : retval, expr
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_patt;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expr;

            	stream_patt=antlr3RewriteRuleTOKENStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token patt", patt);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_expr=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token expr", expr.tree != NULL ? expr.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 190:5: -> ^( MATCH_DP $patt $expr)
            	{
            	    // BaseParser.g:190:8: ^( MATCH_DP $patt $expr)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_MATCH_DP == NULL ? NULL : stream_MATCH_DP->nextNode(stream_MATCH_DP), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_patt == NULL ? NULL : stream_patt->nextNode(stream_patt));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expr == NULL ? NULL : stream_expr->nextTree(stream_expr));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_patt != NULL) stream_patt->free(stream_patt); 
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_expr != NULL) stream_expr->free(stream_expr);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulematch_expressionEx; /* Prevent compiler warnings */
    rulematch_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_MATCH_DP != NULL) stream_MATCH_DP->free(stream_MATCH_DP);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_STRING != NULL) stream_STRING->free(stream_STRING);
        if (stream_expression != NULL) stream_expression->free(stream_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end match_expression */

/** 
 * $ANTLR start case_expression
 * BaseParser.g:193:1: case_expression : CASE_DP LPAREN test= expression COMMA yes= expression COMMA no= expression RPAREN -> ^( CASE_DP $test $yes $no) ;
 */
static Piggy_BaseParser_case_expression_return
case_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_case_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    CASE_DP46;
    pANTLR3_COMMON_TOKEN    LPAREN47;
    pANTLR3_COMMON_TOKEN    COMMA48;
    pANTLR3_COMMON_TOKEN    COMMA49;
    pANTLR3_COMMON_TOKEN    RPAREN50;
    Piggy_BaseParser_expression_return test;
    #undef	RETURN_TYPE_test
    #define	RETURN_TYPE_test Piggy_BaseParser_expression_return

    Piggy_BaseParser_expression_return yes;
    #undef	RETURN_TYPE_yes
    #define	RETURN_TYPE_yes Piggy_BaseParser_expression_return

    Piggy_BaseParser_expression_return no;
    #undef	RETURN_TYPE_no
    #define	RETURN_TYPE_no Piggy_BaseParser_expression_return

    pANTLR3_BASE_TREE CASE_DP46_tree;
    pANTLR3_BASE_TREE LPAREN47_tree;
    pANTLR3_BASE_TREE COMMA48_tree;
    pANTLR3_BASE_TREE COMMA49_tree;
    pANTLR3_BASE_TREE RPAREN50_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_CASE_DP;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_COMMA;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    CASE_DP46       = NULL;
    LPAREN47       = NULL;
    COMMA48       = NULL;
    COMMA49       = NULL;
    RPAREN50       = NULL;
    test.tree = NULL;
    yes.tree = NULL;
    no.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    CASE_DP46_tree   = NULL;
    LPAREN47_tree   = NULL;
    COMMA48_tree   = NULL;
    COMMA49_tree   = NULL;
    RPAREN50_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_CASE_DP   = NULL;
    #define CREATE_stream_CASE_DP  if (stream_CASE_DP == NULL) {stream_CASE_DP = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token CASE_DP"); } 
    stream_COMMA   = NULL;
    #define CREATE_stream_COMMA  if (stream_COMMA == NULL) {stream_COMMA = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token COMMA"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_expression   = NULL;
    #define CREATE_stream_expression  if (stream_expression == NULL) {stream_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:194:5: ( CASE_DP LPAREN test= expression COMMA yes= expression COMMA no= expression RPAREN -> ^( CASE_DP $test $yes $no) )
        // BaseParser.g:194:7: CASE_DP LPAREN test= expression COMMA yes= expression COMMA no= expression RPAREN
        {
            CASE_DP46 = (pANTLR3_COMMON_TOKEN) MATCHT(CASE_DP, &FOLLOW_CASE_DP_in_case_expression1047); 
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }
             
            CREATE_stream_CASE_DP; stream_CASE_DP->add(stream_CASE_DP, CASE_DP46, NULL);

            LPAREN47 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_case_expression1049); 
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN47, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_case_expression1053);
            test=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, test.tree, NULL);
            COMMA48 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_case_expression1055); 
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }
             
            CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA48, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_case_expression1059);
            yes=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, yes.tree, NULL);
            COMMA49 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_case_expression1061); 
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }
             
            CREATE_stream_COMMA; stream_COMMA->add(stream_COMMA, COMMA49, NULL);

            FOLLOWPUSH(FOLLOW_expression_in_case_expression1065);
            no=expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }

            CREATE_stream_expression; stream_expression->add(stream_expression, no.tree, NULL);
            RPAREN50 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_case_expression1067); 
            if  (HASEXCEPTION())
            {
                goto rulecase_expressionEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN50, NULL);


             
            /* AST REWRITE
             * elements          : yes, no, test, CASE_DP
             * token labels      : 
             * rule labels       : yes, retval, test, no
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_yes;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_test;
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_no;

            	stream_yes=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token yes", yes.tree != NULL ? yes.tree : NULL);
            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	stream_test=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token test", test.tree != NULL ? test.tree : NULL);
            	stream_no=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token no", no.tree != NULL ? no.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 195:9: -> ^( CASE_DP $test $yes $no)
            	{
            	    // BaseParser.g:195:11: ^( CASE_DP $test $yes $no)
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, stream_CASE_DP == NULL ? NULL : stream_CASE_DP->nextNode(stream_CASE_DP), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_test == NULL ? NULL : stream_test->nextTree(stream_test));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_yes == NULL ? NULL : stream_yes->nextTree(stream_yes));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_no == NULL ? NULL : stream_no->nextTree(stream_no));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_yes != NULL) stream_yes->free(stream_yes);
            	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	if (stream_test != NULL) stream_test->free(stream_test);
            	if (stream_no != NULL) stream_no->free(stream_no);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulecase_expressionEx; /* Prevent compiler warnings */
    rulecase_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_CASE_DP != NULL) stream_CASE_DP->free(stream_CASE_DP);
        if (stream_COMMA != NULL) stream_COMMA->free(stream_COMMA);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_expression != NULL) stream_expression->free(stream_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end case_expression */

/** 
 * $ANTLR start equality_expression
 * BaseParser.g:198:1: equality_expression : ( relational_expression -> relational_expression ) ( (o= ISEQUAL | o= NEQUAL ) e= relational_expression -> ^( OPERATOR[$o, $o.text->chars] $equality_expression $e) )* ;
 */
static Piggy_BaseParser_equality_expression_return
equality_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_equality_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_relational_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_relational_expression_return

    Piggy_BaseParser_relational_expression_return relational_expression51;
    #undef	RETURN_TYPE_relational_expression51
    #define	RETURN_TYPE_relational_expression51 Piggy_BaseParser_relational_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NEQUAL;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ISEQUAL;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_relational_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    relational_expression51.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_NEQUAL   = NULL;
    #define CREATE_stream_NEQUAL  if (stream_NEQUAL == NULL) {stream_NEQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NEQUAL"); } 
    stream_ISEQUAL   = NULL;
    #define CREATE_stream_ISEQUAL  if (stream_ISEQUAL == NULL) {stream_ISEQUAL = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ISEQUAL"); } 
    stream_relational_expression   = NULL;
    #define CREATE_stream_relational_expression  if (stream_relational_expression == NULL) {stream_relational_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule relational_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:200:5: ( ( relational_expression -> relational_expression ) ( (o= ISEQUAL | o= NEQUAL ) e= relational_expression -> ^( OPERATOR[$o, $o.text->chars] $equality_expression $e) )* )
        // BaseParser.g:200:7: ( relational_expression -> relational_expression ) ( (o= ISEQUAL | o= NEQUAL ) e= relational_expression -> ^( OPERATOR[$o, $o.text->chars] $equality_expression $e) )*
        {
            // BaseParser.g:200:7: ( relational_expression -> relational_expression )
            // BaseParser.g:200:8: relational_expression
            {
                FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression1112);
                relational_expression51=relational_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleequality_expressionEx;
                }

                CREATE_stream_relational_expression; stream_relational_expression->add(stream_relational_expression, relational_expression51.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : relational_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 200:30: -> relational_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_relational_expression == NULL ? NULL : stream_relational_expression->nextTree(stream_relational_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:200:56: ( (o= ISEQUAL | o= NEQUAL ) e= relational_expression -> ^( OPERATOR[$o, $o.text->chars] $equality_expression $e) )*

            for (;;)
            {
                int alt21=2;
                switch ( LA(1) ) 
                {
                case ISEQUAL:
                case NEQUAL:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21) 
                {
            	case 1:
            	    // BaseParser.g:201:9: (o= ISEQUAL | o= NEQUAL ) e= relational_expression
            	    {

            	        // BaseParser.g:201:9: (o= ISEQUAL | o= NEQUAL )
            	        {
            	            int alt20=2;
            	            switch ( LA(1) ) 
            	            {
            	            case ISEQUAL:
            	            	{
            	            		alt20=1;
            	            	}
            	                break;
            	            case NEQUAL:
            	            	{
            	            		alt20=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 20;
            	                EXCEPTION->state        = 0;


            	                goto ruleequality_expressionEx;
            	            }

            	            switch (alt20) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:201:10: o= ISEQUAL
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(ISEQUAL, &FOLLOW_ISEQUAL_in_equality_expression1132); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_ISEQUAL; stream_ISEQUAL->add(stream_ISEQUAL, o, NULL);


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:201:20: o= NEQUAL
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(NEQUAL, &FOLLOW_NEQUAL_in_equality_expression1136); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleequality_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_NEQUAL; stream_NEQUAL->add(stream_NEQUAL, o, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_relational_expression_in_equality_expression1141);
            	        e=relational_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleequality_expressionEx;
            	        }

            	        CREATE_stream_relational_expression; stream_relational_expression->add(stream_relational_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : equality_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 201:54: -> ^( OPERATOR[$o, $o.text->chars] $equality_expression $e)
            	        	{
            	        	    // BaseParser.g:201:57: ^( OPERATOR[$o, $o.text->chars] $equality_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleequality_expressionEx; /* Prevent compiler warnings */
    ruleequality_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_NEQUAL != NULL) stream_NEQUAL->free(stream_NEQUAL);
        if (stream_ISEQUAL != NULL) stream_ISEQUAL->free(stream_ISEQUAL);
        if (stream_relational_expression != NULL) stream_relational_expression->free(stream_relational_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end equality_expression */

/** 
 * $ANTLR start relational_expression
 * BaseParser.g:205:1: relational_expression : ( shift_expression -> shift_expression ) ( (o= LS | o= GT | o= LE | o= GE ) e= shift_expression -> ^( OPERATOR[$o, $o.text->chars] $relational_expression $e) )* ;
 */
static Piggy_BaseParser_relational_expression_return
relational_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_relational_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_shift_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_shift_expression_return

    Piggy_BaseParser_shift_expression_return shift_expression52;
    #undef	RETURN_TYPE_shift_expression52
    #define	RETURN_TYPE_shift_expression52 Piggy_BaseParser_shift_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_GT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_GE;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_shift_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    shift_expression52.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_GT   = NULL;
    #define CREATE_stream_GT  if (stream_GT == NULL) {stream_GT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token GT"); } 
    stream_GE   = NULL;
    #define CREATE_stream_GE  if (stream_GE == NULL) {stream_GE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token GE"); } 
    stream_LS   = NULL;
    #define CREATE_stream_LS  if (stream_LS == NULL) {stream_LS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LS"); } 
    stream_LE   = NULL;
    #define CREATE_stream_LE  if (stream_LE == NULL) {stream_LE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LE"); } 
    stream_shift_expression   = NULL;
    #define CREATE_stream_shift_expression  if (stream_shift_expression == NULL) {stream_shift_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule shift_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:207:5: ( ( shift_expression -> shift_expression ) ( (o= LS | o= GT | o= LE | o= GE ) e= shift_expression -> ^( OPERATOR[$o, $o.text->chars] $relational_expression $e) )* )
        // BaseParser.g:207:7: ( shift_expression -> shift_expression ) ( (o= LS | o= GT | o= LE | o= GE ) e= shift_expression -> ^( OPERATOR[$o, $o.text->chars] $relational_expression $e) )*
        {
            // BaseParser.g:207:7: ( shift_expression -> shift_expression )
            // BaseParser.g:207:8: shift_expression
            {
                FOLLOWPUSH(FOLLOW_shift_expression_in_relational_expression1188);
                shift_expression52=shift_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulerelational_expressionEx;
                }

                CREATE_stream_shift_expression; stream_shift_expression->add(stream_shift_expression, shift_expression52.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : shift_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 207:25: -> shift_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_shift_expression == NULL ? NULL : stream_shift_expression->nextTree(stream_shift_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:207:46: ( (o= LS | o= GT | o= LE | o= GE ) e= shift_expression -> ^( OPERATOR[$o, $o.text->chars] $relational_expression $e) )*

            for (;;)
            {
                int alt23=2;
                switch ( LA(1) ) 
                {
                case LS:
                case GT:
                case LE:
                case GE:
                	{
                		alt23=1;
                	}
                    break;

                }

                switch (alt23) 
                {
            	case 1:
            	    // BaseParser.g:208:9: (o= LS | o= GT | o= LE | o= GE ) e= shift_expression
            	    {

            	        // BaseParser.g:208:9: (o= LS | o= GT | o= LE | o= GE )
            	        {
            	            int alt22=4;
            	            switch ( LA(1) ) 
            	            {
            	            case LS:
            	            	{
            	            		alt22=1;
            	            	}
            	                break;
            	            case GT:
            	            	{
            	            		alt22=2;
            	            	}
            	                break;
            	            case LE:
            	            	{
            	            		alt22=3;
            	            	}
            	                break;
            	            case GE:
            	            	{
            	            		alt22=4;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 22;
            	                EXCEPTION->state        = 0;


            	                goto rulerelational_expressionEx;
            	            }

            	            switch (alt22) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:208:10: o= LS
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(LS, &FOLLOW_LS_in_relational_expression1208); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_LS; stream_LS->add(stream_LS, o, NULL);


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:208:15: o= GT
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(GT, &FOLLOW_GT_in_relational_expression1212); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_GT; stream_GT->add(stream_GT, o, NULL);


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // BaseParser.g:208:20: o= LE
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(LE, &FOLLOW_LE_in_relational_expression1216); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_LE; stream_LE->add(stream_LE, o, NULL);


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // BaseParser.g:208:25: o= GE
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(GE, &FOLLOW_GE_in_relational_expression1220); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulerelational_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_GE; stream_GE->add(stream_GE, o, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_shift_expression_in_relational_expression1225);
            	        e=shift_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulerelational_expressionEx;
            	        }

            	        CREATE_stream_shift_expression; stream_shift_expression->add(stream_shift_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : e, relational_expression
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 208:50: -> ^( OPERATOR[$o, $o.text->chars] $relational_expression $e)
            	        	{
            	        	    // BaseParser.g:208:53: ^( OPERATOR[$o, $o.text->chars] $relational_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop23;	/* break out of the loop */
            	    break;
                }
            }
            loop23: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulerelational_expressionEx; /* Prevent compiler warnings */
    rulerelational_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_GT != NULL) stream_GT->free(stream_GT);
        if (stream_GE != NULL) stream_GE->free(stream_GE);
        if (stream_LS != NULL) stream_LS->free(stream_LS);
        if (stream_LE != NULL) stream_LE->free(stream_LE);
        if (stream_shift_expression != NULL) stream_shift_expression->free(stream_shift_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end relational_expression */

/** 
 * $ANTLR start shift_expression
 * BaseParser.g:212:1: shift_expression : ( additive_expression -> additive_expression ) ( (o= SLEFT | o= SRIGHT ) e= additive_expression -> ^( OPERATOR[$o, $o.text->chars] $shift_expression $e) )* ;
 */
static Piggy_BaseParser_shift_expression_return
shift_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_shift_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_additive_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_additive_expression_return

    Piggy_BaseParser_additive_expression_return additive_expression53;
    #undef	RETURN_TYPE_additive_expression53
    #define	RETURN_TYPE_additive_expression53 Piggy_BaseParser_additive_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SLEFT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_SRIGHT;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_additive_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    additive_expression53.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_SLEFT   = NULL;
    #define CREATE_stream_SLEFT  if (stream_SLEFT == NULL) {stream_SLEFT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SLEFT"); } 
    stream_SRIGHT   = NULL;
    #define CREATE_stream_SRIGHT  if (stream_SRIGHT == NULL) {stream_SRIGHT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token SRIGHT"); } 
    stream_additive_expression   = NULL;
    #define CREATE_stream_additive_expression  if (stream_additive_expression == NULL) {stream_additive_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule additive_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:214:5: ( ( additive_expression -> additive_expression ) ( (o= SLEFT | o= SRIGHT ) e= additive_expression -> ^( OPERATOR[$o, $o.text->chars] $shift_expression $e) )* )
        // BaseParser.g:214:7: ( additive_expression -> additive_expression ) ( (o= SLEFT | o= SRIGHT ) e= additive_expression -> ^( OPERATOR[$o, $o.text->chars] $shift_expression $e) )*
        {
            // BaseParser.g:214:7: ( additive_expression -> additive_expression )
            // BaseParser.g:214:8: additive_expression
            {
                FOLLOWPUSH(FOLLOW_additive_expression_in_shift_expression1272);
                additive_expression53=additive_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleshift_expressionEx;
                }

                CREATE_stream_additive_expression; stream_additive_expression->add(stream_additive_expression, additive_expression53.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : additive_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 214:28: -> additive_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_additive_expression == NULL ? NULL : stream_additive_expression->nextTree(stream_additive_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:214:52: ( (o= SLEFT | o= SRIGHT ) e= additive_expression -> ^( OPERATOR[$o, $o.text->chars] $shift_expression $e) )*

            for (;;)
            {
                int alt25=2;
                switch ( LA(1) ) 
                {
                case SLEFT:
                case SRIGHT:
                	{
                		alt25=1;
                	}
                    break;

                }

                switch (alt25) 
                {
            	case 1:
            	    // BaseParser.g:215:9: (o= SLEFT | o= SRIGHT ) e= additive_expression
            	    {

            	        // BaseParser.g:215:9: (o= SLEFT | o= SRIGHT )
            	        {
            	            int alt24=2;
            	            switch ( LA(1) ) 
            	            {
            	            case SLEFT:
            	            	{
            	            		alt24=1;
            	            	}
            	                break;
            	            case SRIGHT:
            	            	{
            	            		alt24=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 24;
            	                EXCEPTION->state        = 0;


            	                goto ruleshift_expressionEx;
            	            }

            	            switch (alt24) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:215:10: o= SLEFT
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(SLEFT, &FOLLOW_SLEFT_in_shift_expression1292); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshift_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_SLEFT; stream_SLEFT->add(stream_SLEFT, o, NULL);


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:215:18: o= SRIGHT
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(SRIGHT, &FOLLOW_SRIGHT_in_shift_expression1296); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleshift_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_SRIGHT; stream_SRIGHT->add(stream_SRIGHT, o, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_additive_expression_in_shift_expression1301);
            	        e=additive_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleshift_expressionEx;
            	        }

            	        CREATE_stream_additive_expression; stream_additive_expression->add(stream_additive_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : shift_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 215:50: -> ^( OPERATOR[$o, $o.text->chars] $shift_expression $e)
            	        	{
            	        	    // BaseParser.g:215:53: ^( OPERATOR[$o, $o.text->chars] $shift_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop25;	/* break out of the loop */
            	    break;
                }
            }
            loop25: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleshift_expressionEx; /* Prevent compiler warnings */
    ruleshift_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_SLEFT != NULL) stream_SLEFT->free(stream_SLEFT);
        if (stream_SRIGHT != NULL) stream_SRIGHT->free(stream_SRIGHT);
        if (stream_additive_expression != NULL) stream_additive_expression->free(stream_additive_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end shift_expression */

/** 
 * $ANTLR start additive_expression
 * BaseParser.g:219:2: additive_expression : ( multiplicative_expression -> multiplicative_expression ) ( (o= PLUS | o= MINUS ) e= multiplicative_expression -> ^( OPERATOR[$o, $o.text->chars] $additive_expression $e) )* ;
 */
static Piggy_BaseParser_additive_expression_return
additive_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_additive_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_multiplicative_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_multiplicative_expression_return

    Piggy_BaseParser_multiplicative_expression_return multiplicative_expression54;
    #undef	RETURN_TYPE_multiplicative_expression54
    #define	RETURN_TYPE_multiplicative_expression54 Piggy_BaseParser_multiplicative_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PLUS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_MINUS;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_multiplicative_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    multiplicative_expression54.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_PLUS   = NULL;
    #define CREATE_stream_PLUS  if (stream_PLUS == NULL) {stream_PLUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PLUS"); } 
    stream_MINUS   = NULL;
    #define CREATE_stream_MINUS  if (stream_MINUS == NULL) {stream_MINUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token MINUS"); } 
    stream_multiplicative_expression   = NULL;
    #define CREATE_stream_multiplicative_expression  if (stream_multiplicative_expression == NULL) {stream_multiplicative_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule multiplicative_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:221:5: ( ( multiplicative_expression -> multiplicative_expression ) ( (o= PLUS | o= MINUS ) e= multiplicative_expression -> ^( OPERATOR[$o, $o.text->chars] $additive_expression $e) )* )
        // BaseParser.g:221:7: ( multiplicative_expression -> multiplicative_expression ) ( (o= PLUS | o= MINUS ) e= multiplicative_expression -> ^( OPERATOR[$o, $o.text->chars] $additive_expression $e) )*
        {
            // BaseParser.g:221:7: ( multiplicative_expression -> multiplicative_expression )
            // BaseParser.g:221:8: multiplicative_expression
            {
                FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression1349);
                multiplicative_expression54=multiplicative_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto ruleadditive_expressionEx;
                }

                CREATE_stream_multiplicative_expression; stream_multiplicative_expression->add(stream_multiplicative_expression, multiplicative_expression54.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : multiplicative_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 221:34: -> multiplicative_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_multiplicative_expression == NULL ? NULL : stream_multiplicative_expression->nextTree(stream_multiplicative_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:221:64: ( (o= PLUS | o= MINUS ) e= multiplicative_expression -> ^( OPERATOR[$o, $o.text->chars] $additive_expression $e) )*

            for (;;)
            {
                int alt27=2;
                switch ( LA(1) ) 
                {
                case PLUS:
                case MINUS:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27) 
                {
            	case 1:
            	    // BaseParser.g:222:9: (o= PLUS | o= MINUS ) e= multiplicative_expression
            	    {

            	        // BaseParser.g:222:9: (o= PLUS | o= MINUS )
            	        {
            	            int alt26=2;
            	            switch ( LA(1) ) 
            	            {
            	            case PLUS:
            	            	{
            	            		alt26=1;
            	            	}
            	                break;
            	            case MINUS:
            	            	{
            	            		alt26=2;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 26;
            	                EXCEPTION->state        = 0;


            	                goto ruleadditive_expressionEx;
            	            }

            	            switch (alt26) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:222:10: o= PLUS
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_additive_expression1369); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_PLUS; stream_PLUS->add(stream_PLUS, o, NULL);


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:222:17: o= MINUS
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(MINUS, &FOLLOW_MINUS_in_additive_expression1373); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto ruleadditive_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_MINUS; stream_MINUS->add(stream_MINUS, o, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_multiplicative_expression_in_additive_expression1378);
            	        e=multiplicative_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto ruleadditive_expressionEx;
            	        }

            	        CREATE_stream_multiplicative_expression; stream_multiplicative_expression->add(stream_multiplicative_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : additive_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 222:54: -> ^( OPERATOR[$o, $o.text->chars] $additive_expression $e)
            	        	{
            	        	    // BaseParser.g:222:57: ^( OPERATOR[$o, $o.text->chars] $additive_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop27;	/* break out of the loop */
            	    break;
                }
            }
            loop27: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleadditive_expressionEx; /* Prevent compiler warnings */
    ruleadditive_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_PLUS != NULL) stream_PLUS->free(stream_PLUS);
        if (stream_MINUS != NULL) stream_MINUS->free(stream_MINUS);
        if (stream_multiplicative_expression != NULL) stream_multiplicative_expression->free(stream_multiplicative_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end additive_expression */

/** 
 * $ANTLR start multiplicative_expression
 * BaseParser.g:226:1: multiplicative_expression : ( unary_expression -> unary_expression ) ( (o= TIMES | o= DIVIDE | o= MOD ) e= unary_expression -> ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e) )* ;
 */
static Piggy_BaseParser_multiplicative_expression_return
multiplicative_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_multiplicative_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_unary_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_unary_expression_return

    Piggy_BaseParser_unary_expression_return unary_expression55;
    #undef	RETURN_TYPE_unary_expression55
    #define	RETURN_TYPE_unary_expression55 Piggy_BaseParser_unary_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_TIMES;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_MOD;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_DIVIDE;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unary_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    unary_expression55.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_TIMES   = NULL;
    #define CREATE_stream_TIMES  if (stream_TIMES == NULL) {stream_TIMES = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token TIMES"); } 
    stream_MOD   = NULL;
    #define CREATE_stream_MOD  if (stream_MOD == NULL) {stream_MOD = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token MOD"); } 
    stream_DIVIDE   = NULL;
    #define CREATE_stream_DIVIDE  if (stream_DIVIDE == NULL) {stream_DIVIDE = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token DIVIDE"); } 
    stream_unary_expression   = NULL;
    #define CREATE_stream_unary_expression  if (stream_unary_expression == NULL) {stream_unary_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unary_expression"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:228:5: ( ( unary_expression -> unary_expression ) ( (o= TIMES | o= DIVIDE | o= MOD ) e= unary_expression -> ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e) )* )
        // BaseParser.g:228:7: ( unary_expression -> unary_expression ) ( (o= TIMES | o= DIVIDE | o= MOD ) e= unary_expression -> ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e) )*
        {
            // BaseParser.g:228:7: ( unary_expression -> unary_expression )
            // BaseParser.g:228:8: unary_expression
            {
                FOLLOWPUSH(FOLLOW_unary_expression_in_multiplicative_expression1425);
                unary_expression55=unary_expression(ctx);

                FOLLOWPOP();
                if  (HASEXCEPTION())
                {
                    goto rulemultiplicative_expressionEx;
                }

                CREATE_stream_unary_expression; stream_unary_expression->add(stream_unary_expression, unary_expression55.tree, NULL);

                 
                /* AST REWRITE
                 * elements          : unary_expression
                 * token labels      : 
                 * rule labels       : retval
                 * token list labels : 
                 * rule list labels  : 
                 */
                {
                	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

                	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

                	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
                	retval.tree    = root_0;
                	// 228:25: -> unary_expression
                	{
                	    ADAPTOR->addChild(ADAPTOR, root_0, stream_unary_expression == NULL ? NULL : stream_unary_expression->nextTree(stream_unary_expression));

                	}

                	retval.tree = root_0; // set result root
                	if (stream_retval != NULL) stream_retval->free(stream_retval);


                }
            }


            // BaseParser.g:228:46: ( (o= TIMES | o= DIVIDE | o= MOD ) e= unary_expression -> ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e) )*

            for (;;)
            {
                int alt29=2;
                switch ( LA(1) ) 
                {
                case TIMES:
                case DIVIDE:
                case MOD:
                	{
                		alt29=1;
                	}
                    break;

                }

                switch (alt29) 
                {
            	case 1:
            	    // BaseParser.g:229:9: (o= TIMES | o= DIVIDE | o= MOD ) e= unary_expression
            	    {

            	        // BaseParser.g:229:9: (o= TIMES | o= DIVIDE | o= MOD )
            	        {
            	            int alt28=3;
            	            switch ( LA(1) ) 
            	            {
            	            case TIMES:
            	            	{
            	            		alt28=1;
            	            	}
            	                break;
            	            case DIVIDE:
            	            	{
            	            		alt28=2;
            	            	}
            	                break;
            	            case MOD:
            	            	{
            	            		alt28=3;
            	            	}
            	                break;

            	            default:
            	                CONSTRUCTEX();
            	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            	                EXCEPTION->message      = (void *)"";
            	                EXCEPTION->decisionNum  = 28;
            	                EXCEPTION->state        = 0;


            	                goto rulemultiplicative_expressionEx;
            	            }

            	            switch (alt28) 
            	            {
            	        	case 1:
            	        	    // BaseParser.g:229:10: o= TIMES
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(TIMES, &FOLLOW_TIMES_in_multiplicative_expression1445); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicative_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_TIMES; stream_TIMES->add(stream_TIMES, o, NULL);


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // BaseParser.g:229:18: o= DIVIDE
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(DIVIDE, &FOLLOW_DIVIDE_in_multiplicative_expression1449); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicative_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_DIVIDE; stream_DIVIDE->add(stream_DIVIDE, o, NULL);


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // BaseParser.g:229:27: o= MOD
            	        	    {
            	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(MOD, &FOLLOW_MOD_in_multiplicative_expression1453); 
            	        	        if  (HASEXCEPTION())
            	        	        {
            	        	            goto rulemultiplicative_expressionEx;
            	        	        }
            	        	         
            	        	        CREATE_stream_MOD; stream_MOD->add(stream_MOD, o, NULL);


            	        	    }
            	        	    break;

            	            }
            	        }
            	        FOLLOWPUSH(FOLLOW_unary_expression_in_multiplicative_expression1458);
            	        e=unary_expression(ctx);

            	        FOLLOWPOP();
            	        if  (HASEXCEPTION())
            	        {
            	            goto rulemultiplicative_expressionEx;
            	        }

            	        CREATE_stream_unary_expression; stream_unary_expression->add(stream_unary_expression, e.tree, NULL);

            	         
            	        /* AST REWRITE
            	         * elements          : multiplicative_expression, e
            	         * token labels      : 
            	         * rule labels       : retval, e
            	         * token list labels : 
            	         * rule list labels  : 
            	         */
            	        {
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
            	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

            	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
            	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

            	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	retval.tree    = root_0;
            	        	// 229:53: -> ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e)
            	        	{
            	        	    // BaseParser.g:229:56: ^( OPERATOR[$o, $o.text->chars] $multiplicative_expression $e)
            	        	    {
            	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
            	        	        #if 2 == 2
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, OPERATOR, TOKTEXT(o, (o->getText(o))->chars))
            	        	        #else
            	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, OPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
            	        	        #endif
            	        	        , root_1));

            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_retval == NULL ? NULL : stream_retval->nextTree(stream_retval));
            	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

            	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	        	    }

            	        	}

            	        	retval.tree = root_0; // set result root
            	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
            	        	if (stream_e != NULL) stream_e->free(stream_e);


            	        }
            	    }
            	    break;

            	default:
            	    goto loop29;	/* break out of the loop */
            	    break;
                }
            }
            loop29: ; /* Jump out to here if this rule does not match */


        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulemultiplicative_expressionEx; /* Prevent compiler warnings */
    rulemultiplicative_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_TIMES != NULL) stream_TIMES->free(stream_TIMES);
        if (stream_MOD != NULL) stream_MOD->free(stream_MOD);
        if (stream_DIVIDE != NULL) stream_DIVIDE->free(stream_DIVIDE);
        if (stream_unary_expression != NULL) stream_unary_expression->free(stream_unary_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end multiplicative_expression */

/** 
 * $ANTLR start unary_expression
 * BaseParser.g:234:1: unary_expression : ( primary_expression | (o= PLUS | o= MINUS | o= LNOT | o= NOT ) e= unary_expression -> ^( UOPERATOR[$o, $o.text->chars] $e) );
 */
static Piggy_BaseParser_unary_expression_return
unary_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_unary_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    o;
    Piggy_BaseParser_unary_expression_return e;
    #undef	RETURN_TYPE_e
    #define	RETURN_TYPE_e Piggy_BaseParser_unary_expression_return

    Piggy_BaseParser_primary_expression_return primary_expression56;
    #undef	RETURN_TYPE_primary_expression56
    #define	RETURN_TYPE_primary_expression56 Piggy_BaseParser_primary_expression_return

    pANTLR3_BASE_TREE o_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LNOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_PLUS;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_NOT;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_MINUS;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_unary_expression;
    /* Initialize rule variables
     */


    root_0 = NULL;

    o       = NULL;
    e.tree = NULL;
    primary_expression56.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    o_tree   = NULL;

    stream_LNOT   = NULL;
    #define CREATE_stream_LNOT  if (stream_LNOT == NULL) {stream_LNOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LNOT"); } 
    stream_PLUS   = NULL;
    #define CREATE_stream_PLUS  if (stream_PLUS == NULL) {stream_PLUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token PLUS"); } 
    stream_NOT   = NULL;
    #define CREATE_stream_NOT  if (stream_NOT == NULL) {stream_NOT = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token NOT"); } 
    stream_MINUS   = NULL;
    #define CREATE_stream_MINUS  if (stream_MINUS == NULL) {stream_MINUS = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token MINUS"); } 
    stream_unary_expression   = NULL;
    #define CREATE_stream_unary_expression  if (stream_unary_expression == NULL) {stream_unary_expression = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule unary_expression"); }

    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:235:5: ( primary_expression | (o= PLUS | o= MINUS | o= LNOT | o= NOT ) e= unary_expression -> ^( UOPERATOR[$o, $o.text->chars] $e) )
            
            ANTLR3_UINT32 alt31;

            alt31=2;

            switch ( LA(1) ) 
            {
            case CASE_DP:
            case ID:
            case INT:
            case FLOAT:
            case STRING:
            case LPAREN:
            	{
            		alt31=1;
            	}
                break;
            case LNOT:
            case NOT:
            case PLUS:
            case MINUS:
            	{
            		alt31=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 31;
                EXCEPTION->state        = 0;


                goto ruleunary_expressionEx;
            }

            switch (alt31) 
            {
        	case 1:
        	    // BaseParser.g:235:10: primary_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_primary_expression_in_unary_expression1503);
        	        primary_expression56=primary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, primary_expression56.tree);

        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:236:10: (o= PLUS | o= MINUS | o= LNOT | o= NOT ) e= unary_expression
        	    {

        	        // BaseParser.g:236:10: (o= PLUS | o= MINUS | o= LNOT | o= NOT )
        	        {
        	            int alt30=4;
        	            switch ( LA(1) ) 
        	            {
        	            case PLUS:
        	            	{
        	            		alt30=1;
        	            	}
        	                break;
        	            case MINUS:
        	            	{
        	            		alt30=2;
        	            	}
        	                break;
        	            case LNOT:
        	            	{
        	            		alt30=3;
        	            	}
        	                break;
        	            case NOT:
        	            	{
        	            		alt30=4;
        	            	}
        	                break;

        	            default:
        	                CONSTRUCTEX();
        	                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        	                EXCEPTION->message      = (void *)"";
        	                EXCEPTION->decisionNum  = 30;
        	                EXCEPTION->state        = 0;


        	                goto ruleunary_expressionEx;
        	            }

        	            switch (alt30) 
        	            {
        	        	case 1:
        	        	    // BaseParser.g:236:11: o= PLUS
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(PLUS, &FOLLOW_PLUS_in_unary_expression1517); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_PLUS; stream_PLUS->add(stream_PLUS, o, NULL);


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // BaseParser.g:236:18: o= MINUS
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(MINUS, &FOLLOW_MINUS_in_unary_expression1521); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_MINUS; stream_MINUS->add(stream_MINUS, o, NULL);


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // BaseParser.g:236:26: o= LNOT
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(LNOT, &FOLLOW_LNOT_in_unary_expression1525); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_LNOT; stream_LNOT->add(stream_LNOT, o, NULL);


        	        	    }
        	        	    break;
        	        	case 4:
        	        	    // BaseParser.g:236:33: o= NOT
        	        	    {
        	        	        o = (pANTLR3_COMMON_TOKEN) MATCHT(NOT, &FOLLOW_NOT_in_unary_expression1529); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleunary_expressionEx;
        	        	        }
        	        	         
        	        	        CREATE_stream_NOT; stream_NOT->add(stream_NOT, o, NULL);


        	        	    }
        	        	    break;

        	            }
        	        }
        	        FOLLOWPUSH(FOLLOW_unary_expression_in_unary_expression1535);
        	        e=unary_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleunary_expressionEx;
        	        }

        	        CREATE_stream_unary_expression; stream_unary_expression->add(stream_unary_expression, e.tree, NULL);

        	         
        	        /* AST REWRITE
        	         * elements          : e
        	         * token labels      : 
        	         * rule labels       : retval, e
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_e;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);
        	        	stream_e=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token e", e.tree != NULL ? e.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 236:60: -> ^( UOPERATOR[$o, $o.text->chars] $e)
        	        	{
        	        	    // BaseParser.g:236:63: ^( UOPERATOR[$o, $o.text->chars] $e)
        	        	    {
        	        	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, 
        	        	        #if 2 == 2
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeTokenText(ADAPTOR, UOPERATOR, TOKTEXT(o, (o->getText(o))->chars))
        	        	        #else
        	        	        	(pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, UOPERATOR, (pANTLR3_UINT8)o, (o->getText(o))->chars)
        	        	        #endif
        	        	        , root_1));

        	        	        ADAPTOR->addChild(ADAPTOR, root_1, stream_e == NULL ? NULL : stream_e->nextTree(stream_e));

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
        	        	    }

        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);
        	        	if (stream_e != NULL) stream_e->free(stream_e);


        	        }
        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleunary_expressionEx; /* Prevent compiler warnings */
    ruleunary_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_LNOT != NULL) stream_LNOT->free(stream_LNOT);
        if (stream_PLUS != NULL) stream_PLUS->free(stream_PLUS);
        if (stream_NOT != NULL) stream_NOT->free(stream_NOT);
        if (stream_MINUS != NULL) stream_MINUS->free(stream_MINUS);
        if (stream_unary_expression != NULL) stream_unary_expression->free(stream_unary_expression);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end unary_expression */

/** 
 * $ANTLR start primary_expression
 * BaseParser.g:239:1: primary_expression : ( attribute | synthAttribute | constant | function | case_expression | LPAREN expression RPAREN );
 */
static Piggy_BaseParser_primary_expression_return
primary_expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_primary_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    LPAREN62;
    pANTLR3_COMMON_TOKEN    RPAREN64;
    Piggy_BaseParser_attribute_return attribute57;
    #undef	RETURN_TYPE_attribute57
    #define	RETURN_TYPE_attribute57 Piggy_BaseParser_attribute_return

    Piggy_BaseParser_synthAttribute_return synthAttribute58;
    #undef	RETURN_TYPE_synthAttribute58
    #define	RETURN_TYPE_synthAttribute58 Piggy_BaseParser_synthAttribute_return

    Piggy_BaseParser_constant_return constant59;
    #undef	RETURN_TYPE_constant59
    #define	RETURN_TYPE_constant59 Piggy_BaseParser_constant_return

    Piggy_BaseParser_function_return function60;
    #undef	RETURN_TYPE_function60
    #define	RETURN_TYPE_function60 Piggy_BaseParser_function_return

    Piggy_BaseParser_case_expression_return case_expression61;
    #undef	RETURN_TYPE_case_expression61
    #define	RETURN_TYPE_case_expression61 Piggy_BaseParser_case_expression_return

    Piggy_BaseParser_expression_return expression63;
    #undef	RETURN_TYPE_expression63
    #define	RETURN_TYPE_expression63 Piggy_BaseParser_expression_return

    pANTLR3_BASE_TREE LPAREN62_tree;
    pANTLR3_BASE_TREE RPAREN64_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    LPAREN62       = NULL;
    RPAREN64       = NULL;
    attribute57.tree = NULL;
    synthAttribute58.tree = NULL;
    constant59.tree = NULL;
    function60.tree = NULL;
    case_expression61.tree = NULL;
    expression63.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    LPAREN62_tree   = NULL;
    RPAREN64_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:240:5: ( attribute | synthAttribute | constant | function | case_expression | LPAREN expression RPAREN )
            
            ANTLR3_UINT32 alt32;

            alt32=6;

            switch ( LA(1) ) 
            {
            case ID:
            	{
            		switch ( LA(2) ) 
            		{
            		case DOT:
            			{
            				alt32=1;
            			}
            		    break;
            		case LPAREN:
            			{
            				alt32=4;
            			}
            		    break;
            		case SEMICOLON:
            		case COMMA:
            		case COLON:
            		case RPAREN:
            		case QMARK:
            		case LAND:
            		case LOR:
            		case BAND:
            		case BOR:
            		case XOR:
            		case ISEQUAL:
            		case NEQUAL:
            		case LS:
            		case GT:
            		case LE:
            		case GE:
            		case SLEFT:
            		case SRIGHT:
            		case PLUS:
            		case MINUS:
            		case TIMES:
            		case DIVIDE:
            		case MOD:
            		case AS:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    CONSTRUCTEX();
            		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            		    EXCEPTION->message      = (void *)"";
            		    EXCEPTION->decisionNum  = 32;
            		    EXCEPTION->state        = 1;


            		    goto ruleprimary_expressionEx;
            		}

            	}
                break;
            case INT:
            case FLOAT:
            case STRING:
            	{
            		alt32=3;
            	}
                break;
            case CASE_DP:
            	{
            		alt32=5;
            	}
                break;
            case LPAREN:
            	{
            		alt32=6;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 32;
                EXCEPTION->state        = 0;


                goto ruleprimary_expressionEx;
            }

            switch (alt32) 
            {
        	case 1:
        	    // BaseParser.g:240:7: attribute
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_attribute_in_primary_expression1562);
        	        attribute57=attribute(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, attribute57.tree);

        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:241:7: synthAttribute
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_synthAttribute_in_primary_expression1570);
        	        synthAttribute58=synthAttribute(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, synthAttribute58.tree);

        	    }
        	    break;
        	case 3:
        	    // BaseParser.g:242:7: constant
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_constant_in_primary_expression1578);
        	        constant59=constant(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, constant59.tree);

        	    }
        	    break;
        	case 4:
        	    // BaseParser.g:243:7: function
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_function_in_primary_expression1586);
        	        function60=function(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, function60.tree);

        	    }
        	    break;
        	case 5:
        	    // BaseParser.g:244:7: case_expression
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_case_expression_in_primary_expression1594);
        	        case_expression61=case_expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, case_expression61.tree);

        	    }
        	    break;
        	case 6:
        	    // BaseParser.g:245:7: LPAREN expression RPAREN
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        LPAREN62 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_primary_expression1602); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        FOLLOWPUSH(FOLLOW_expression_in_primary_expression1605);
        	        expression63=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression63.tree);
        	        RPAREN64 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_primary_expression1607); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleprimary_expressionEx;
        	        }


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleprimary_expressionEx; /* Prevent compiler warnings */
    ruleprimary_expressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end primary_expression */

/** 
 * $ANTLR start function
 * BaseParser.g:249:1: function : ID LPAREN expressionList RPAREN -> ^( FUNCTION ID expressionList ) ;
 */
static Piggy_BaseParser_function_return
function(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_function_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    ID65;
    pANTLR3_COMMON_TOKEN    LPAREN66;
    pANTLR3_COMMON_TOKEN    RPAREN68;
    Piggy_BaseParser_expressionList_return expressionList67;
    #undef	RETURN_TYPE_expressionList67
    #define	RETURN_TYPE_expressionList67 Piggy_BaseParser_expressionList_return

    pANTLR3_BASE_TREE ID65_tree;
    pANTLR3_BASE_TREE LPAREN66_tree;
    pANTLR3_BASE_TREE RPAREN68_tree;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_RPAREN;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_ID;
    pANTLR3_REWRITE_RULE_TOKEN_STREAM stream_LPAREN;
    pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_expressionList;
    /* Initialize rule variables
     */


    root_0 = NULL;

    ID65       = NULL;
    LPAREN66       = NULL;
    RPAREN68       = NULL;
    expressionList67.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    ID65_tree   = NULL;
    LPAREN66_tree   = NULL;
    RPAREN68_tree   = NULL;

    stream_RPAREN   = NULL;
    #define CREATE_stream_RPAREN  if (stream_RPAREN == NULL) {stream_RPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token RPAREN"); } 
    stream_ID   = NULL;
    #define CREATE_stream_ID  if (stream_ID == NULL) {stream_ID = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token ID"); } 
    stream_LPAREN   = NULL;
    #define CREATE_stream_LPAREN  if (stream_LPAREN == NULL) {stream_LPAREN = antlr3RewriteRuleTOKENStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"token LPAREN"); } 
    stream_expressionList   = NULL;
    #define CREATE_stream_expressionList  if (stream_expressionList == NULL) {stream_expressionList = antlr3RewriteRuleSubtreeStreamNewAE(ADAPTOR, RECOGNIZER, (pANTLR3_UINT8)"rule expressionList"); }

    retval.tree  = NULL;
    {
        // BaseParser.g:250:5: ( ID LPAREN expressionList RPAREN -> ^( FUNCTION ID expressionList ) )
        // BaseParser.g:250:10: ID LPAREN expressionList RPAREN
        {
            ID65 = (pANTLR3_COMMON_TOKEN) MATCHT(ID, &FOLLOW_ID_in_function1629); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_ID; stream_ID->add(stream_ID, ID65, NULL);

            LPAREN66 = (pANTLR3_COMMON_TOKEN) MATCHT(LPAREN, &FOLLOW_LPAREN_in_function1631); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_LPAREN; stream_LPAREN->add(stream_LPAREN, LPAREN66, NULL);

            FOLLOWPUSH(FOLLOW_expressionList_in_function1633);
            expressionList67=expressionList(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }

            CREATE_stream_expressionList; stream_expressionList->add(stream_expressionList, expressionList67.tree, NULL);
            RPAREN68 = (pANTLR3_COMMON_TOKEN) MATCHT(RPAREN, &FOLLOW_RPAREN_in_function1635); 
            if  (HASEXCEPTION())
            {
                goto rulefunctionEx;
            }
             
            CREATE_stream_RPAREN; stream_RPAREN->add(stream_RPAREN, RPAREN68, NULL);


             
            /* AST REWRITE
             * elements          : ID, expressionList
             * token labels      : 
             * rule labels       : retval
             * token list labels : 
             * rule list labels  : 
             */
            {
            	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

            	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

            	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	retval.tree    = root_0;
            	// 250:42: -> ^( FUNCTION ID expressionList )
            	{
            	    // BaseParser.g:250:45: ^( FUNCTION ID expressionList )
            	    {
            	        pANTLR3_BASE_TREE root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
            	        root_1 = (pANTLR3_BASE_TREE)(ADAPTOR->becomeRoot(ADAPTOR, (pANTLR3_BASE_TREE)ADAPTOR->createTypeText(ADAPTOR, FUNCTION, (pANTLR3_UINT8)"FUNCTION"), root_1));

            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_ID == NULL ? NULL : stream_ID->nextNode(stream_ID));
            	        ADAPTOR->addChild(ADAPTOR, root_1, stream_expressionList == NULL ? NULL : stream_expressionList->nextTree(stream_expressionList));

            	        ADAPTOR->addChild(ADAPTOR, root_0, root_1);
            	    }

            	}

            	retval.tree = root_0; // set result root
            	if (stream_retval != NULL) stream_retval->free(stream_retval);


            }
        }

    }
    

    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);
        if (stream_RPAREN != NULL) stream_RPAREN->free(stream_RPAREN);
        if (stream_ID != NULL) stream_ID->free(stream_ID);
        if (stream_LPAREN != NULL) stream_LPAREN->free(stream_LPAREN);
        if (stream_expressionList != NULL) stream_expressionList->free(stream_expressionList);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end function */

/** 
 * $ANTLR start expressionList
 * BaseParser.g:253:1: expressionList : ( -> | expression ( COMMA expression )* );
 */
static Piggy_BaseParser_expressionList_return
expressionList(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_expressionList_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    COMMA70;
    Piggy_BaseParser_expression_return expression69;
    #undef	RETURN_TYPE_expression69
    #define	RETURN_TYPE_expression69 Piggy_BaseParser_expression_return

    Piggy_BaseParser_expression_return expression71;
    #undef	RETURN_TYPE_expression71
    #define	RETURN_TYPE_expression71 Piggy_BaseParser_expression_return

    pANTLR3_BASE_TREE COMMA70_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    COMMA70       = NULL;
    expression69.tree = NULL;
    expression71.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    COMMA70_tree   = NULL;


    retval.tree  = NULL;
    {
        {
            //  BaseParser.g:254:5: ( -> | expression ( COMMA expression )* )
            
            ANTLR3_UINT32 alt34;

            alt34=2;

            switch ( LA(1) ) 
            {
            case SEMICOLON:
            case RPAREN:
            case AS:
            	{
            		alt34=1;
            	}
                break;
            case MATCH_DP:
            case CASE_DP:
            case BOOL_T:
            case ID:
            case INT:
            case FLOAT:
            case STRING:
            case LPAREN:
            case LNOT:
            case NOT:
            case PLUS:
            case MINUS:
            	{
            		alt34=2;
            	}
                break;

            default:
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
                EXCEPTION->message      = (void *)"";
                EXCEPTION->decisionNum  = 34;
                EXCEPTION->state        = 0;


                goto ruleexpressionListEx;
            }

            switch (alt34) 
            {
        	case 1:
        	    // BaseParser.g:254:20: 
        	    {
        	         
        	        /* AST REWRITE
        	         * elements          : 
        	         * token labels      : 
        	         * rule labels       : retval
        	         * token list labels : 
        	         * rule list labels  : 
        	         */
        	        {
        	        	pANTLR3_REWRITE_RULE_SUBTREE_STREAM stream_retval;

        	        	stream_retval=antlr3RewriteRuleSubtreeStreamNewAEE(ADAPTOR,  RECOGNIZER, (pANTLR3_UINT8)"token retval", retval.tree != NULL ? retval.tree : NULL);

        	        	root_0			    = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));
        	        	retval.tree    = root_0;
        	        	// 254:20: ->
        	        	{
        	        	    root_0 = NULL; /* <-- rewriteEmptyAlt()) */
        	        	}

        	        	retval.tree = root_0; // set result root
        	        	if (stream_retval != NULL) stream_retval->free(stream_retval);


        	        }
        	    }
        	    break;
        	case 2:
        	    // BaseParser.g:255:7: expression ( COMMA expression )*
        	    {
        	        root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

        	        FOLLOWPUSH(FOLLOW_expression_in_expressionList1672);
        	        expression69=expression(ctx);

        	        FOLLOWPOP();
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleexpressionListEx;
        	        }

        	        ADAPTOR->addChild(ADAPTOR, root_0, expression69.tree);

        	        // BaseParser.g:255:18: ( COMMA expression )*

        	        for (;;)
        	        {
        	            int alt33=2;
        	            switch ( LA(1) ) 
        	            {
        	            case COMMA:
        	            	{
        	            		alt33=1;
        	            	}
        	                break;

        	            }

        	            switch (alt33) 
        	            {
        	        	case 1:
        	        	    // BaseParser.g:255:19: COMMA expression
        	        	    {
        	        	        COMMA70 = (pANTLR3_COMMON_TOKEN) MATCHT(COMMA, &FOLLOW_COMMA_in_expressionList1675); 
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionListEx;
        	        	        }

        	        	        FOLLOWPUSH(FOLLOW_expression_in_expressionList1678);
        	        	        expression71=expression(ctx);

        	        	        FOLLOWPOP();
        	        	        if  (HASEXCEPTION())
        	        	        {
        	        	            goto ruleexpressionListEx;
        	        	        }

        	        	        ADAPTOR->addChild(ADAPTOR, root_0, expression71.tree);

        	        	    }
        	        	    break;

        	        	default:
        	        	    goto loop33;	/* break out of the loop */
        	        	    break;
        	            }
        	        }
        	        loop33: ; /* Jump out to here if this rule does not match */


        	    }
        	    break;

            }
        }
    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionListEx; /* Prevent compiler warnings */
    ruleexpressionListEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end expressionList */

/** 
 * $ANTLR start constant
 * BaseParser.g:258:1: constant : ( INT | STRING | FLOAT );
 */
static Piggy_BaseParser_constant_return
constant(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_constant_return retval;

    pANTLR3_BASE_TREE root_0;

    pANTLR3_COMMON_TOKEN    set72;

    pANTLR3_BASE_TREE set72_tree;

    /* Initialize rule variables
     */


    root_0 = NULL;

    set72       = NULL;
    retval.start = LT(1); retval.stop = retval.start;

    set72_tree   = NULL;


    retval.tree  = NULL;
    {
        // BaseParser.g:259:5: ( INT | STRING | FLOAT )
        // BaseParser.g:
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            set72=(pANTLR3_COMMON_TOKEN)LT(1);
            if ( LA(1) == INT || LA(1) == FLOAT || LA(1) == STRING )
            {
                CONSUME();
                ADAPTOR->addChild(ADAPTOR, root_0, (pANTLR3_BASE_TREE)(ADAPTOR->create(ADAPTOR, set72)));
                PERRORRECOVERY=ANTLR3_FALSE;
            }
            else 
            {
                CONSTRUCTEX();
                EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
                EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;
                EXCEPTION->expectingSet = &FOLLOW_set_in_constant0;
                RECOVERFROMMISMATCHEDSET(&FOLLOW_set_in_constant0);    goto ruleconstantEx;
            }


        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end constant */

/** 
 * $ANTLR start expression
 * BaseParser.g:264:1: expression : conditional_expression ;
 */
static Piggy_BaseParser_expression_return
expression(pPiggy_BaseParser ctx)
{   
    Piggy_BaseParser_expression_return retval;

    pANTLR3_BASE_TREE root_0;

    Piggy_BaseParser_conditional_expression_return conditional_expression73;
    #undef	RETURN_TYPE_conditional_expression73
    #define	RETURN_TYPE_conditional_expression73 Piggy_BaseParser_conditional_expression_return


    /* Initialize rule variables
     */


    root_0 = NULL;

    conditional_expression73.tree = NULL;
    retval.start = LT(1); retval.stop = retval.start;



    retval.tree  = NULL;
    {
        // BaseParser.g:265:5: ( conditional_expression )
        // BaseParser.g:265:10: conditional_expression
        {
            root_0 = (pANTLR3_BASE_TREE)(ADAPTOR->nilNode(ADAPTOR));

            FOLLOWPUSH(FOLLOW_conditional_expression_in_expression1739);
            conditional_expression73=conditional_expression(ctx);

            FOLLOWPOP();
            if  (HASEXCEPTION())
            {
                goto ruleexpressionEx;
            }

            ADAPTOR->addChild(ADAPTOR, root_0, conditional_expression73.tree);

        }

    }
    

    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;
    retval.stop = LT(-1);

    	retval.stop = LT(-1);
    	retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->rulePostProcessing(ADAPTOR, root_0));
    	ADAPTOR->setTokenBoundaries(ADAPTOR, retval.tree, retval.start, retval.stop);

            if (HASEXCEPTION())
            {
                PREPORTERROR();
                PRECOVER();
                retval.tree = (pANTLR3_BASE_TREE)(ADAPTOR->errorNode(ADAPTOR, INPUT, retval.start, LT(-1), EXCEPTION));
            }


    return retval;
}
/* $ANTLR end expression */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

 
 



/* End of code
 * =============================================================================
 */
