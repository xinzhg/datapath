//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : BaseLexer.g
 *     -                            On : 2012-06-14 15:15:13
 *     -                 for the lexer : DataPath_BaseLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "DataPath_BaseLexer.h"
/* ----------------------------------------- */


/** String literals used by DataPath_BaseLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x66, 0x69, 0x6C, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x46, 0x69, 0x6C, 0x74, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x46, 0x49, 0x4C, 0x54, 0x45, 0x52,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x6A, 0x6F, 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x4A, 0x6F, 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x4A, 0x4F, 0x49, 0x4E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x67, 0x6C, 0x61,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x47, 0x6C, 0x61,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x47, 0x4C, 0x41,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x70, 0x72, 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x50, 0x72, 0x69, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x50, 0x52, 0x49, 0x4E, 0x54,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6F, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4F, 0x52,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x53,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x74, 0x65, 0x78, 0x74, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x54, 0x65, 0x78, 0x74, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x54, 0x65, 0x78, 0x74, 0x4C, 0x6F, 0x61, 0x64, 0x65, 0x72,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x54, 0x45, 0x58, 0x54, 0x4C, 0x4F, 0x41, 0x44, 0x45, 0x52,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x66, 0x69, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x46, 0x69, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x46, 0x49, 0x4C, 0x45,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x6D, 0x61, 0x74, 0x63, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x4D, 0x61, 0x74, 0x63, 0x68,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x4D, 0x41, 0x54, 0x43, 0x48,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x63, 0x61, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x43, 0x61, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x43, 0x41, 0x53, 0x45,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x74, 0x72, 0x75, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_38[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_39[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_40[]  = { 0x26, 0x26,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_41[]  = { 0x7C, 0x7C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_42[]  = { 0x3D, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_43[]  = { 0x21, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_44[]  = { 0x3C, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_45[]  = { 0x3E, 0x3D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_46[]  = { 0x3C, 0x3C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_47[]  = { 0x3E, 0x3E,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pDataPath_BaseLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pDataPath_BaseLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pDataPath_BaseLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pDataPath_BaseLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mFILTER    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mJOIN    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mGLA    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mPRINT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mAGGREGATE    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mEQUAL    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mSEPARATOR    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mATTRIBUTES    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mTEXTLOADER    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mFILE    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mMATCH_DP    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mCASE_DP    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mBOOL_T    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mID    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mINT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mFLOAT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mWS    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mSTRING    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mSEMICOLON    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mCOMMA    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mCOLON    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mDOT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLPAREN    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mRPAREN    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLSQ    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mRSQ    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mQMARK    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLAND    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLOR    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mBAND    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mBOR    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mXOR    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLNOT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mISEQUAL    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mNEQUAL    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLS    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mGT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mLE    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mGE    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mNOT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mSLEFT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mSRIGHT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mPLUS    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mMINUS    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mTIMES    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mDIVIDE    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mMOD    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mEXPONENT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mHEX_DIGIT    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mESC_SEQ    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mOCTAL_ESC    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mUNICODE_ESC    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mOP    (pDataPath_BaseLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pDataPath_BaseLexer ctx);
static void	DataPath_BaseLexerFree(pDataPath_BaseLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
DataPath_BaseLexerFree  (pDataPath_BaseLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

static void
DataPath_BaseLexerReset (pDataPath_BaseLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "BaseLexer.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called DataPath_BaseLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pDataPath_BaseLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pDataPath_BaseLexer DataPath_BaseLexerNew         
(pANTLR3_INPUT_STREAM instream, pDataPathLexer gDataPath)
{
	// See if we can create a new lexer with the standard constructor
	//
	return DataPath_BaseLexerNewSSD(instream, NULL, gDataPath);
}

/** \brief Create a new lexer called DataPath_BaseLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pDataPath_BaseLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pDataPath_BaseLexer DataPath_BaseLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state, pDataPathLexer gDataPath)
{
    pDataPath_BaseLexer ctx; // Context structure we will build and return

    ctx = (pDataPath_BaseLexer) ANTLR3_CALLOC(1, sizeof(DataPath_BaseLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in DataPath_BaseLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our DataPath_BaseLexer interface
     */
    ctx->mFILTER	= mFILTER;
    ctx->mJOIN	= mJOIN;
    ctx->mGLA	= mGLA;
    ctx->mPRINT	= mPRINT;
    ctx->mAGGREGATE	= mAGGREGATE;
    ctx->mEQUAL	= mEQUAL;
    ctx->mSEPARATOR	= mSEPARATOR;
    ctx->mATTRIBUTES	= mATTRIBUTES;
    ctx->mTEXTLOADER	= mTEXTLOADER;
    ctx->mFILE	= mFILE;
    ctx->mMATCH_DP	= mMATCH_DP;
    ctx->mCASE_DP	= mCASE_DP;
    ctx->mBOOL_T	= mBOOL_T;
    ctx->mID	= mID;
    ctx->mINT	= mINT;
    ctx->mFLOAT	= mFLOAT;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mWS	= mWS;
    ctx->mSTRING	= mSTRING;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mCOMMA	= mCOMMA;
    ctx->mCOLON	= mCOLON;
    ctx->mDOT	= mDOT;
    ctx->mLPAREN	= mLPAREN;
    ctx->mRPAREN	= mRPAREN;
    ctx->mLSQ	= mLSQ;
    ctx->mRSQ	= mRSQ;
    ctx->mQMARK	= mQMARK;
    ctx->mLAND	= mLAND;
    ctx->mLOR	= mLOR;
    ctx->mBAND	= mBAND;
    ctx->mBOR	= mBOR;
    ctx->mXOR	= mXOR;
    ctx->mLNOT	= mLNOT;
    ctx->mISEQUAL	= mISEQUAL;
    ctx->mNEQUAL	= mNEQUAL;
    ctx->mLS	= mLS;
    ctx->mGT	= mGT;
    ctx->mLE	= mLE;
    ctx->mGE	= mGE;
    ctx->mNOT	= mNOT;
    ctx->mSLEFT	= mSLEFT;
    ctx->mSRIGHT	= mSRIGHT;
    ctx->mPLUS	= mPLUS;
    ctx->mMINUS	= mMINUS;
    ctx->mTIMES	= mTIMES;
    ctx->mDIVIDE	= mDIVIDE;
    ctx->mMOD	= mMOD;
    ctx->mEXPONENT	= mEXPONENT;
    ctx->mHEX_DIGIT	= mHEX_DIGIT;
    ctx->mESC_SEQ	= mESC_SEQ;
    ctx->mOCTAL_ESC	= mOCTAL_ESC;
    ctx->mUNICODE_ESC	= mUNICODE_ESC;
    ctx->mOP	= mOP;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= DataPath_BaseLexerFree;
    ctx->reset          = DataPath_BaseLexerReset;

    
	// Install the pointers back to lexers that will delegate us to perform certain functions
	// for them.
	//
	ctx->gDataPath			= gDataPath;    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}

/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    40:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'f' | 'L' )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( 'f' | 'L' )? | ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )? );
 */
static const ANTLR3_INT32 dfa25_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR3_INT32 dfa25_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR3_INT32 dfa25_special[5] =
    {	
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa25_T_empty	    NULL

static const ANTLR3_INT32 dfa25_T0[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };static const ANTLR3_INT32 dfa25_T1[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa25_transitions[] =
{
    dfa25_T1, dfa25_T0, dfa25_T_empty, dfa25_T_empty, dfa25_T_empty	
};


/* Declare tracking structure for Cyclic DFA 25
 */
static
ANTLR3_CYCLIC_DFA cdfa25
    =	{
	    25,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"40:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'f' | 'L' )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( 'f' | 'L' )? | ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )? );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa25_eot,	    /* EOT table			    */
	    dfa25_eof,	    /* EOF table			    */
	    dfa25_min,	    /* Minimum tokens for each state    */
	    dfa25_max,	    /* Maximum tokens for each state    */
	    dfa25_accept,	/* Accept table			    */
	    dfa25_special,	/* Special transition states	    */
	    dfa25_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 25
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( FILTER | JOIN | GLA | PRINT | AGGREGATE | EQUAL | SEPARATOR | ATTRIBUTES | TEXTLOADER | FILE | MATCH_DP | CASE_DP | BOOL_T | ID | INT | FLOAT | COMMENT | WS | STRING | SEMICOLON | COMMA | COLON | DOT | LPAREN | RPAREN | LSQ | RSQ | QMARK | LAND | LOR | BAND | BOR | XOR | LNOT | ISEQUAL | NEQUAL | LS | GT | LE | GE | NOT | SLEFT | SRIGHT | PLUS | MINUS | TIMES | DIVIDE | MOD );
 */
static const ANTLR3_INT32 dfa38_eot[257] =
    {
	-1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 65, 20, 20, 20, 20, 20, 20, 
	20, 20, -1, 79, 81, 83, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 87, 
	-1, -1, 89, 92, 95, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, 20, 20, 138, 138, 138, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 162, 20, 20, 162, 20, 162, 166, 166, 166, -1, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 180, 20, 20, 20, 20, 20, 187, 187, 
	187, 20, -1, 180, 20, 20, -1, 191, 191, 191, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, -1, 20, 20, 20, 205, 205, 205, -1, 206, 206, 206, -1, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 246, 20, 246, 246, 20, 20, 250, 250, 250, 20, 20, 20, 20, -1, 
	255, 255, 255, -1, 256, 256, 256, 256, -1, -1
    };
static const ANTLR3_INT32 dfa38_eof[257] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR3_INT32 dfa38_min[257] =
    {
	9, 97, 73, 111, 79, 108, 76, 114, 82, 103, 71, 61, 101, 69, 101, 69, 97, 
	65, 97, 65, -1, 46, 48, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, 
	124, -1, -1, 61, 60, 61, -1, -1, -1, -1, 108, 108, 108, 76, 105, 105, 73, 
	97, 97, 65, 105, 105, 73, 103, 116, 103, 71, 116, 84, -1, -1, 112, 112, 
	80, 120, 117, 120, 88, 116, 116, 84, 115, 115, 83, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 101, 115, 101, 69, 110, 
	110, 78, 48, 48, 48, 110, 110, 78, 114, 114, 114, 82, 114, 82, 97, 97, 
	65, 116, 101, 116, 84, 99, 99, 67, 101, 101, 69, 101, 48, 101, 101, 48, 
	69, 48, 48, 48, 48, -1, 116, 116, 84, 101, 105, 101, 69, 105, 73, 114, 
	114, 82, 108, 48, 76, 76, 104, 104, 72, 48, 48, 48, 114, -1, 48, 114, 82, 
	-1, 48, 48, 48, 103, 98, 103, 71, 98, 66, 97, 97, 65, 111, -1, 111, 111, 
	79, 48, 48, 48, -1, 48, 48, 48, -1, 97, 117, 97, 65, 117, 85, 116, 116, 
	84, 97, 97, 97, 65, -1, -1, 116, 116, 116, 84, 116, 84, 111, 111, 79, 100, 
	100, 100, 68, 101, 101, 101, 69, 101, 69, 114, 114, 82, 101, 101, 101, 
	69, 48, 115, 48, 48, 115, 83, 48, 48, 48, 114, 114, 114, 82, -1, 48, 48, 
	48, -1, 48, 48, 48, 48, -1, -1
    };
static const ANTLR3_INT32 dfa38_max[257] =
    {
	126, 105, 105, 111, 111, 108, 108, 114, 114, 116, 116, 61, 101, 101, 114, 
	101, 97, 97, 97, 97, -1, 101, 57, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 38, 124, -1, -1, 61, 61, 62, -1, -1, -1, -1, 108, 108, 108, 76, 105, 
	105, 73, 97, 97, 65, 105, 105, 73, 103, 116, 103, 71, 116, 84, -1, -1, 
	112, 112, 80, 120, 117, 120, 88, 116, 116, 84, 115, 115, 83, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116, 115, 116, 
	84, 110, 110, 78, 122, 122, 122, 110, 110, 78, 114, 114, 114, 82, 114, 
	82, 97, 97, 65, 116, 101, 116, 84, 99, 99, 67, 101, 101, 69, 101, 122, 
	101, 101, 122, 69, 122, 122, 122, 122, -1, 116, 116, 84, 101, 105, 101, 
	69, 105, 73, 114, 114, 82, 108, 122, 108, 76, 104, 104, 72, 122, 122, 122, 
	114, -1, 122, 114, 82, -1, 122, 122, 122, 103, 98, 103, 71, 98, 66, 97, 
	97, 65, 111, -1, 111, 111, 79, 122, 122, 122, -1, 122, 122, 122, -1, 97, 
	117, 97, 65, 117, 85, 116, 116, 84, 97, 97, 97, 65, -1, -1, 116, 116, 116, 
	84, 116, 84, 111, 111, 79, 100, 100, 100, 68, 101, 101, 101, 69, 101, 69, 
	114, 114, 82, 101, 101, 101, 69, 122, 115, 122, 122, 115, 83, 122, 122, 
	122, 114, 114, 114, 82, -1, 122, 122, 122, -1, 122, 122, 122, 122, -1, 
	-1
    };
static const ANTLR3_INT32 dfa38_accept[257] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 14, -1, -1, -1, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, -1, -1, 
	33, 34, -1, -1, -1, 44, 45, 46, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 6, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 15, 16, 23, 17, 47, 29, 31, 30, 32, 36, 41, 
	39, 42, 37, 40, 43, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	10, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	13, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, 11, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 7, -1, -1, 
	-1, -1, 8, 9
    };
static const ANTLR3_INT32 dfa38_special[257] =
    {	
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
#define dfa38_T_empty	    NULL

static const ANTLR3_INT32 dfa38_T0[] =
    {
	186
    };static const ANTLR3_INT32 dfa38_T1[] =
    {
	58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59
    };static const ANTLR3_INT32 dfa38_T2[] =
    {
	46, -1, -1, -1, -1, -1, -1, -1, 45
    };static const ANTLR3_INT32 dfa38_T3[] =
    {
	125
    };static const ANTLR3_INT32 dfa38_T4[] =
    {
	158
    };static const ANTLR3_INT32 dfa38_T5[] =
    {
	126
    };static const ANTLR3_INT32 dfa38_T6[] =
    {
	159
    };static const ANTLR3_INT32 dfa38_T7[] =
    {
	155
    };static const ANTLR3_INT32 dfa38_T8[] =
    {
	122
    };static const ANTLR3_INT32 dfa38_T9[] =
    {
	93, 94
    };static const ANTLR3_INT32 dfa38_T10[] =
    {
	184
    };static const ANTLR3_INT32 dfa38_T11[] =
    {
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, -1, -1, -1, -1, 20, -1, 20, 20, 20, 20, 20, 
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 
	20, 20, 20
    };static const ANTLR3_INT32 dfa38_T12[] =
    {
	156
    };static const ANTLR3_INT32 dfa38_T13[] =
    {
	123
    };static const ANTLR3_INT32 dfa38_T14[] =
    {
	185
    };static const ANTLR3_INT32 dfa38_T15[] =
    {
	157
    };static const ANTLR3_INT32 dfa38_T16[] =
    {
	124
    };static const ANTLR3_INT32 dfa38_T17[] =
    {
	245
    };static const ANTLR3_INT32 dfa38_T18[] =
    {
	232
    };static const ANTLR3_INT32 dfa38_T19[] =
    {
	219
    };static const ANTLR3_INT32 dfa38_T20[] =
    {
	204
    };static const ANTLR3_INT32 dfa38_T21[] =
    {
	254
    };static const ANTLR3_INT32 dfa38_T22[] =
    {
	91, 90
    };static const ANTLR3_INT32 dfa38_T23[] =
    {
	57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56
    };static const ANTLR3_INT32 dfa38_T24[] =
    {
	163
    };static const ANTLR3_INT32 dfa38_T25[] =
    {
	97
    };static const ANTLR3_INT32 dfa38_T26[] =
    {
	130
    };static const ANTLR3_INT32 dfa38_T27[] =
    {
	76
    };static const ANTLR3_INT32 dfa38_T28[] =
    {
	160
    };static const ANTLR3_INT32 dfa38_T29[] =
    {
	127
    };static const ANTLR3_INT32 dfa38_T30[] =
    {
	152
    };static const ANTLR3_INT32 dfa38_T31[] =
    {
	119
    };static const ANTLR3_INT32 dfa38_T32[] =
    {
	98
    };static const ANTLR3_INT32 dfa38_T33[] =
    {
	132, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131
    };static const ANTLR3_INT32 dfa38_T34[] =
    {
	129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 128
    };static const ANTLR3_INT32 dfa38_T35[] =
    {
	80, -1, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 80
    };static const ANTLR3_INT32 dfa38_T36[] =
    {
	48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47
    };static const ANTLR3_INT32 dfa38_T37[] =
    {
	96
    };static const ANTLR3_INT32 dfa38_T38[] =
    {
	61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, 62
    };static const ANTLR3_INT32 dfa38_T39[] =
    {
	88
    };static const ANTLR3_INT32 dfa38_T40[] =
    {
	68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67
    };static const ANTLR3_INT32 dfa38_T41[] =
    {
	72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71
    };static const ANTLR3_INT32 dfa38_T42[] =
    {
	134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 133
    };static const ANTLR3_INT32 dfa38_T43[] =
    {
	99
    };static const ANTLR3_INT32 dfa38_T44[] =
    {
	86
    };static const ANTLR3_INT32 dfa38_T45[] =
    {
	189
    };static const ANTLR3_INT32 dfa38_T46[] =
    {
	190
    };static const ANTLR3_INT32 dfa38_T47[] =
    {
	165
    };static const ANTLR3_INT32 dfa38_T48[] =
    {
	66
    };static const ANTLR3_INT32 dfa38_T49[] =
    {
	100
    };static const ANTLR3_INT32 dfa38_T50[] =
    {
	135
    };static const ANTLR3_INT32 dfa38_T51[] =
    {
	136
    };static const ANTLR3_INT32 dfa38_T52[] =
    {
	101
    };static const ANTLR3_INT32 dfa38_T53[] =
    {
	102
    };static const ANTLR3_INT32 dfa38_T54[] =
    {
	137
    };static const ANTLR3_INT32 dfa38_T55[] =
    {
	161
    };static const ANTLR3_INT32 dfa38_T56[] =
    {
	188
    };static const ANTLR3_INT32 dfa38_T57[] =
    {
	24, 24, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 24, 38, 25, -1, -1, 44, 34, 25, 29, 30, 43, 41, 27, 
	42, 22, 23, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 28, 26, 39, 11, 40, 
	33, -1, 10, 20, 19, 20, 20, 2, 6, 20, 20, 4, 20, 20, 17, 20, 20, 8, 20, 
	20, 13, 15, 20, 20, 20, 20, 20, 20, 31, -1, 32, 36, 20, -1, 9, 20, 18, 
	20, 20, 1, 5, 20, 20, 3, 20, 20, 16, 20, 20, 7, 20, 20, 12, 14, 20, 20, 
	20, 20, 20, 20, -1, 35, -1, 37
    };static const ANTLR3_INT32 dfa38_T58[] =
    {
	164
    };static const ANTLR3_INT32 dfa38_T59[] =
    {
	169
    };static const ANTLR3_INT32 dfa38_T60[] =
    {
	141
    };static const ANTLR3_INT32 dfa38_T61[] =
    {
	108
    };static const ANTLR3_INT32 dfa38_T62[] =
    {
	192
    };static const ANTLR3_INT32 dfa38_T63[] =
    {
	170
    };static const ANTLR3_INT32 dfa38_T64[] =
    {
	142
    };static const ANTLR3_INT32 dfa38_T65[] =
    {
	109
    };static const ANTLR3_INT32 dfa38_T66[] =
    {
	55
    };static const ANTLR3_INT32 dfa38_T67[] =
    {
	111
    };static const ANTLR3_INT32 dfa38_T68[] =
    {
	144
    };static const ANTLR3_INT32 dfa38_T69[] =
    {
	233
    };static const ANTLR3_INT32 dfa38_T70[] =
    {
	207
    };static const ANTLR3_INT32 dfa38_T71[] =
    {
	220
    };static const ANTLR3_INT32 dfa38_T72[] =
    {
	235
    };static const ANTLR3_INT32 dfa38_T73[] =
    {
	209
    };static const ANTLR3_INT32 dfa38_T74[] =
    {
	222
    };static const ANTLR3_INT32 dfa38_T75[] =
    {
	172
    };static const ANTLR3_INT32 dfa38_T76[] =
    {
	194
    };static const ANTLR3_INT32 dfa38_T77[] =
    {
	103
    };static const ANTLR3_INT32 dfa38_T78[] =
    {
	153
    };static const ANTLR3_INT32 dfa38_T79[] =
    {
	120
    };static const ANTLR3_INT32 dfa38_T80[] =
    {
	105
    };static const ANTLR3_INT32 dfa38_T81[] =
    {
	49
    };static const ANTLR3_INT32 dfa38_T82[] =
    {
	182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 181
    };static const ANTLR3_INT32 dfa38_T83[] =
    {
	104
    };static const ANTLR3_INT32 dfa38_T84[] =
    {
	106
    };static const ANTLR3_INT32 dfa38_T85[] =
    {
	139
    };static const ANTLR3_INT32 dfa38_T86[] =
    {
	167
    };static const ANTLR3_INT32 dfa38_T87[] =
    {
	82, -1, -1, -1, -1, 82
    };static const ANTLR3_INT32 dfa38_T88[] =
    {
	84
    };static const ANTLR3_INT32 dfa38_T89[] =
    {
	140
    };static const ANTLR3_INT32 dfa38_T90[] =
    {
	168
    };static const ANTLR3_INT32 dfa38_T91[] =
    {
	52
    };static const ANTLR3_INT32 dfa38_T92[] =
    {
	107
    };static const ANTLR3_INT32 dfa38_T93[] =
    {
	200
    };static const ANTLR3_INT32 dfa38_T94[] =
    {
	215
    };static const ANTLR3_INT32 dfa38_T95[] =
    {
	150
    };static const ANTLR3_INT32 dfa38_T96[] =
    {
	178
    };static const ANTLR3_INT32 dfa38_T97[] =
    {
	228
    };static const ANTLR3_INT32 dfa38_T98[] =
    {
	241
    };static const ANTLR3_INT32 dfa38_T99[] =
    {
	227
    };static const ANTLR3_INT32 dfa38_T100[] =
    {
	240
    };static const ANTLR3_INT32 dfa38_T101[] =
    {
	199
    };static const ANTLR3_INT32 dfa38_T102[] =
    {
	214
    };static const ANTLR3_INT32 dfa38_T103[] =
    {
	117
    };static const ANTLR3_INT32 dfa38_T104[] =
    {
	221
    };static const ANTLR3_INT32 dfa38_T105[] =
    {
	208
    };static const ANTLR3_INT32 dfa38_T106[] =
    {
	193
    };static const ANTLR3_INT32 dfa38_T107[] =
    {
	73
    };static const ANTLR3_INT32 dfa38_T108[] =
    {
	171
    };static const ANTLR3_INT32 dfa38_T109[] =
    {
	247
    };static const ANTLR3_INT32 dfa38_T110[] =
    {
	234
    };static const ANTLR3_INT32 dfa38_T111[] =
    {
	54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53
    };static const ANTLR3_INT32 dfa38_T112[] =
    {
	78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 77
    };static const ANTLR3_INT32 dfa38_T113[] =
    {
	143
    };static const ANTLR3_INT32 dfa38_T114[] =
    {
	110
    };static const ANTLR3_INT32 dfa38_T115[] =
    {
	112
    };static const ANTLR3_INT32 dfa38_T116[] =
    {
	145
    };static const ANTLR3_INT32 dfa38_T117[] =
    {
	173
    };static const ANTLR3_INT32 dfa38_T118[] =
    {
	195
    };static const ANTLR3_INT32 dfa38_T119[] =
    {
	210
    };static const ANTLR3_INT32 dfa38_T120[] =
    {
	223
    };static const ANTLR3_INT32 dfa38_T121[] =
    {
	236
    };static const ANTLR3_INT32 dfa38_T122[] =
    {
	51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50
    };static const ANTLR3_INT32 dfa38_T123[] =
    {
	239
    };static const ANTLR3_INT32 dfa38_T124[] =
    {
	226
    };static const ANTLR3_INT32 dfa38_T125[] =
    {
	116
    };static const ANTLR3_INT32 dfa38_T126[] =
    {
	177
    };static const ANTLR3_INT32 dfa38_T127[] =
    {
	149
    };static const ANTLR3_INT32 dfa38_T128[] =
    {
	115
    };static const ANTLR3_INT32 dfa38_T129[] =
    {
	176
    };static const ANTLR3_INT32 dfa38_T130[] =
    {
	148
    };static const ANTLR3_INT32 dfa38_T131[] =
    {
	213
    };static const ANTLR3_INT32 dfa38_T132[] =
    {
	198
    };static const ANTLR3_INT32 dfa38_T133[] =
    {
	252
    };static const ANTLR3_INT32 dfa38_T134[] =
    {
	69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70
    };static const ANTLR3_INT32 dfa38_T135[] =
    {
	230
    };static const ANTLR3_INT32 dfa38_T136[] =
    {
	243
    };static const ANTLR3_INT32 dfa38_T137[] =
    {
	202
    };static const ANTLR3_INT32 dfa38_T138[] =
    {
	217
    };static const ANTLR3_INT32 dfa38_T139[] =
    {
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80
    };static const ANTLR3_INT32 dfa38_T140[] =
    {
	242
    };static const ANTLR3_INT32 dfa38_T141[] =
    {
	251
    };static const ANTLR3_INT32 dfa38_T142[] =
    {
	64
    };static const ANTLR3_INT32 dfa38_T143[] =
    {
	216
    };static const ANTLR3_INT32 dfa38_T144[] =
    {
	229
    };static const ANTLR3_INT32 dfa38_T145[] =
    {
	183
    };static const ANTLR3_INT32 dfa38_T146[] =
    {
	154
    };static const ANTLR3_INT32 dfa38_T147[] =
    {
	121
    };static const ANTLR3_INT32 dfa38_T148[] =
    {
	253
    };static const ANTLR3_INT32 dfa38_T149[] =
    {
	244
    };static const ANTLR3_INT32 dfa38_T150[] =
    {
	231
    };static const ANTLR3_INT32 dfa38_T151[] =
    {
	218
    };static const ANTLR3_INT32 dfa38_T152[] =
    {
	203
    };static const ANTLR3_INT32 dfa38_T153[] =
    {
	114
    };static const ANTLR3_INT32 dfa38_T154[] =
    {
	147
    };static const ANTLR3_INT32 dfa38_T155[] =
    {
	175
    };static const ANTLR3_INT32 dfa38_T156[] =
    {
	197
    };static const ANTLR3_INT32 dfa38_T157[] =
    {
	248
    };static const ANTLR3_INT32 dfa38_T158[] =
    {
	196
    };static const ANTLR3_INT32 dfa38_T159[] =
    {
	211
    };static const ANTLR3_INT32 dfa38_T160[] =
    {
	224
    };static const ANTLR3_INT32 dfa38_T161[] =
    {
	237
    };static const ANTLR3_INT32 dfa38_T162[] =
    {
	113
    };static const ANTLR3_INT32 dfa38_T163[] =
    {
	146
    };static const ANTLR3_INT32 dfa38_T164[] =
    {
	174
    };static const ANTLR3_INT32 dfa38_T165[] =
    {
	151
    };static const ANTLR3_INT32 dfa38_T166[] =
    {
	118
    };static const ANTLR3_INT32 dfa38_T167[] =
    {
	201
    };static const ANTLR3_INT32 dfa38_T168[] =
    {
	179
    };static const ANTLR3_INT32 dfa38_T169[] =
    {
	75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74
    };static const ANTLR3_INT32 dfa38_T170[] =
    {
	225
    };static const ANTLR3_INT32 dfa38_T171[] =
    {
	212
    };static const ANTLR3_INT32 dfa38_T172[] =
    {
	249
    };static const ANTLR3_INT32 dfa38_T173[] =
    {
	238
    };

/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR3_INT32 * const dfa38_transitions[] =
{
    dfa38_T57, dfa38_T2, dfa38_T36, dfa38_T81, dfa38_T122, dfa38_T91, dfa38_T111, 
    dfa38_T66, dfa38_T23, dfa38_T1, dfa38_T38, dfa38_T142, dfa38_T48, dfa38_T40, 
    dfa38_T134, dfa38_T41, dfa38_T107, dfa38_T169, dfa38_T27, dfa38_T112, 
    dfa38_T_empty, dfa38_T35, dfa38_T139, dfa38_T87, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T88, dfa38_T44, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T39, dfa38_T22, dfa38_T9, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T37, dfa38_T25, dfa38_T32, dfa38_T43, 
    dfa38_T49, dfa38_T52, dfa38_T53, dfa38_T77, dfa38_T83, dfa38_T80, dfa38_T84, 
    dfa38_T92, dfa38_T61, dfa38_T65, dfa38_T114, dfa38_T67, dfa38_T115, 
    dfa38_T162, dfa38_T153, dfa38_T_empty, dfa38_T_empty, dfa38_T128, dfa38_T125, 
    dfa38_T103, dfa38_T166, dfa38_T31, dfa38_T79, dfa38_T147, dfa38_T8, 
    dfa38_T13, dfa38_T16, dfa38_T3, dfa38_T5, dfa38_T29, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T_empty, dfa38_T34, dfa38_T26, dfa38_T33, dfa38_T42, dfa38_T50, 
    dfa38_T51, dfa38_T54, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T85, dfa38_T89, 
    dfa38_T60, dfa38_T64, dfa38_T113, dfa38_T68, dfa38_T116, dfa38_T163, 
    dfa38_T154, dfa38_T130, dfa38_T127, dfa38_T95, dfa38_T165, dfa38_T30, 
    dfa38_T78, dfa38_T146, dfa38_T7, dfa38_T12, dfa38_T15, dfa38_T4, dfa38_T6, 
    dfa38_T28, dfa38_T55, dfa38_T11, dfa38_T24, dfa38_T58, dfa38_T11, dfa38_T47, 
    dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T_empty, dfa38_T86, 
    dfa38_T90, dfa38_T59, dfa38_T63, dfa38_T108, dfa38_T75, dfa38_T117, 
    dfa38_T164, dfa38_T155, dfa38_T129, dfa38_T126, dfa38_T96, dfa38_T168, 
    dfa38_T11, dfa38_T82, dfa38_T145, dfa38_T10, dfa38_T14, dfa38_T0, dfa38_T11, 
    dfa38_T11, dfa38_T11, dfa38_T56, dfa38_T_empty, dfa38_T11, dfa38_T45, 
    dfa38_T46, dfa38_T_empty, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T62, 
    dfa38_T106, dfa38_T76, dfa38_T118, dfa38_T158, dfa38_T156, dfa38_T132, 
    dfa38_T101, dfa38_T93, dfa38_T167, dfa38_T_empty, dfa38_T137, dfa38_T152, 
    dfa38_T20, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T_empty, dfa38_T11, 
    dfa38_T11, dfa38_T11, dfa38_T_empty, dfa38_T70, dfa38_T105, dfa38_T73, 
    dfa38_T119, dfa38_T159, dfa38_T171, dfa38_T131, dfa38_T102, dfa38_T94, 
    dfa38_T143, dfa38_T138, dfa38_T151, dfa38_T19, dfa38_T_empty, dfa38_T_empty, 
    dfa38_T71, dfa38_T104, dfa38_T74, dfa38_T120, dfa38_T160, dfa38_T170, 
    dfa38_T124, dfa38_T99, dfa38_T97, dfa38_T144, dfa38_T135, dfa38_T150, 
    dfa38_T18, dfa38_T69, dfa38_T110, dfa38_T72, dfa38_T121, dfa38_T161, 
    dfa38_T173, dfa38_T123, dfa38_T100, dfa38_T98, dfa38_T140, dfa38_T136, 
    dfa38_T149, dfa38_T17, dfa38_T11, dfa38_T109, dfa38_T11, dfa38_T11, 
    dfa38_T157, dfa38_T172, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T141, 
    dfa38_T133, dfa38_T148, dfa38_T21, dfa38_T_empty, dfa38_T11, dfa38_T11, 
    dfa38_T11, dfa38_T_empty, dfa38_T11, dfa38_T11, dfa38_T11, dfa38_T11, 
    dfa38_T_empty, dfa38_T_empty	
};


/* Declare tracking structure for Cyclic DFA 38
 */
static
ANTLR3_CYCLIC_DFA cdfa38
    =	{
	    38,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const pANTLR3_UCHAR)"1:1: Tokens : ( FILTER | JOIN | GLA | PRINT | AGGREGATE | EQUAL | SEPARATOR | ATTRIBUTES | TEXTLOADER | FILE | MATCH_DP | CASE_DP | BOOL_T | ID | INT | FLOAT | COMMENT | WS | STRING | SEMICOLON | COMMA | COLON | DOT | LPAREN | RPAREN | LSQ | RSQ | QMARK | LAND | LOR | BAND | BOR | XOR | LNOT | ISEQUAL | NEQUAL | LS | GT | LE | GE | NOT | SLEFT | SRIGHT | PLUS | MINUS | TIMES | DIVIDE | MOD );",	
	    (CDFA_SPECIAL_FUNC) antlr3dfaspecialStateTransition,	/* Default special state transition function	*/
	    antlr3dfaspecialTransition,		/* DFA specialTransition is currently just a default function in the runtime */
	    antlr3dfapredict,			/* DFA simulator function is in the runtime */
	    dfa38_eot,	    /* EOT table			    */
	    dfa38_eof,	    /* EOF table			    */
	    dfa38_min,	    /* Minimum tokens for each state    */
	    dfa38_max,	    /* Maximum tokens for each state    */
	    dfa38_accept,	/* Accept table			    */
	    dfa38_special,	/* Special transition states	    */
	    dfa38_transitions	/* Table of transition tables	    */

	};	    
/* End of Cyclic DFA 38
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */ 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 4:9: ( 'filter' | 'Filter' | 'FILTER' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FILTER
 *
 * Looks to match the characters the constitute the token FILTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFILTER(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FILTER;
       
    
    {
        //  BaseLexer.g:4:9: ( 'filter' | 'Filter' | 'FILTER' )
        
        ANTLR3_UINT32 alt1;

        alt1=3;

        switch ( LA(1) ) 
        {
        case 'f':
        	{
        		alt1=1;
        	}
            break;
        case 'F':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'i':
        			{
        				alt1=2;
        			}
        		    break;
        		case 'I':
        			{
        				alt1=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 1;
        		    EXCEPTION->state        = 2;


        		    goto ruleFILTEREx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 1;
            EXCEPTION->state        = 0;


            goto ruleFILTEREx;
        }

        switch (alt1) 
        {
    	case 1:
    	    // BaseLexer.g:4:13: 'filter'
    	    {
    	        MATCHS(lit_1); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILTEREx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:4:24: 'Filter'
    	    {
    	        MATCHS(lit_2); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILTEREx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:4:35: 'FILTER'
    	    {
    	        MATCHS(lit_3); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILTEREx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFILTEREx; /* Prevent compiler warnings */
    ruleFILTEREx: ;

}
// $ANTLR end FILTER

//   Comes from: 5:9: ( 'join' | 'Join' | 'JOIN' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start JOIN
 *
 * Looks to match the characters the constitute the token JOIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mJOIN(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = JOIN;
       
    
    {
        //  BaseLexer.g:5:9: ( 'join' | 'Join' | 'JOIN' )
        
        ANTLR3_UINT32 alt2;

        alt2=3;

        switch ( LA(1) ) 
        {
        case 'j':
        	{
        		alt2=1;
        	}
            break;
        case 'J':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				alt2=2;
        			}
        		    break;
        		case 'O':
        			{
        				alt2=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 2;
        		    EXCEPTION->state        = 2;


        		    goto ruleJOINEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state        = 0;


            goto ruleJOINEx;
        }

        switch (alt2) 
        {
    	case 1:
    	    // BaseLexer.g:5:13: 'join'
    	    {
    	        MATCHS(lit_4); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleJOINEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:5:22: 'Join'
    	    {
    	        MATCHS(lit_5); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleJOINEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:5:31: 'JOIN'
    	    {
    	        MATCHS(lit_6); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleJOINEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleJOINEx; /* Prevent compiler warnings */
    ruleJOINEx: ;

}
// $ANTLR end JOIN

//   Comes from: 6:9: ( 'gla' | 'Gla' | 'GLA' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GLA
 *
 * Looks to match the characters the constitute the token GLA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGLA(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GLA;
       
    
    {
        //  BaseLexer.g:6:9: ( 'gla' | 'Gla' | 'GLA' )
        
        ANTLR3_UINT32 alt3;

        alt3=3;

        switch ( LA(1) ) 
        {
        case 'g':
        	{
        		alt3=1;
        	}
            break;
        case 'G':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'l':
        			{
        				alt3=2;
        			}
        		    break;
        		case 'L':
        			{
        				alt3=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 3;
        		    EXCEPTION->state        = 2;


        		    goto ruleGLAEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 3;
            EXCEPTION->state        = 0;


            goto ruleGLAEx;
        }

        switch (alt3) 
        {
    	case 1:
    	    // BaseLexer.g:6:13: 'gla'
    	    {
    	        MATCHS(lit_7); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleGLAEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:6:21: 'Gla'
    	    {
    	        MATCHS(lit_8); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleGLAEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:6:29: 'GLA'
    	    {
    	        MATCHS(lit_9); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleGLAEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleGLAEx; /* Prevent compiler warnings */
    ruleGLAEx: ;

}
// $ANTLR end GLA

//   Comes from: 7:9: ( 'print' | 'Print' | 'PRINT' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PRINT
 *
 * Looks to match the characters the constitute the token PRINT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPRINT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PRINT;
       
    
    {
        //  BaseLexer.g:7:9: ( 'print' | 'Print' | 'PRINT' )
        
        ANTLR3_UINT32 alt4;

        alt4=3;

        switch ( LA(1) ) 
        {
        case 'p':
        	{
        		alt4=1;
        	}
            break;
        case 'P':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				alt4=2;
        			}
        		    break;
        		case 'R':
        			{
        				alt4=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 4;
        		    EXCEPTION->state        = 2;


        		    goto rulePRINTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 4;
            EXCEPTION->state        = 0;


            goto rulePRINTEx;
        }

        switch (alt4) 
        {
    	case 1:
    	    // BaseLexer.g:7:13: 'print'
    	    {
    	        MATCHS(lit_10); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto rulePRINTEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:7:23: 'Print'
    	    {
    	        MATCHS(lit_11); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto rulePRINTEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:7:33: 'PRINT'
    	    {
    	        MATCHS(lit_12); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto rulePRINTEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePRINTEx; /* Prevent compiler warnings */
    rulePRINTEx: ;

}
// $ANTLR end PRINT

//   Comes from: 8:11: ( 'aggregate' | 'Aggregate' | 'AGGREGATE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AGGREGATE
 *
 * Looks to match the characters the constitute the token AGGREGATE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAGGREGATE(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AGGREGATE;
       
    
    {
        //  BaseLexer.g:8:11: ( 'aggregate' | 'Aggregate' | 'AGGREGATE' )
        
        ANTLR3_UINT32 alt5;

        alt5=3;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		alt5=1;
        	}
            break;
        case 'A':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'g':
        			{
        				alt5=2;
        			}
        		    break;
        		case 'G':
        			{
        				alt5=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 5;
        		    EXCEPTION->state        = 2;


        		    goto ruleAGGREGATEEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 5;
            EXCEPTION->state        = 0;


            goto ruleAGGREGATEEx;
        }

        switch (alt5) 
        {
    	case 1:
    	    // BaseLexer.g:8:13: 'aggregate'
    	    {
    	        MATCHS(lit_13); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleAGGREGATEEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:8:27: 'Aggregate'
    	    {
    	        MATCHS(lit_14); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleAGGREGATEEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:8:41: 'AGGREGATE'
    	    {
    	        MATCHS(lit_15); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleAGGREGATEEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleAGGREGATEEx; /* Prevent compiler warnings */
    ruleAGGREGATEEx: ;

}
// $ANTLR end AGGREGATE

//   Comes from: 10:9: ( '=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EQUAL
 *
 * Looks to match the characters the constitute the token EQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEQUAL(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EQUAL;
       
    
    // BaseLexer.g:10:9: ( '=' )
    // BaseLexer.g:10:13: '='
    {
        MATCHC('='); 
        if  (HASEXCEPTION())
        {
            goto ruleEQUALEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEQUALEx; /* Prevent compiler warnings */
    ruleEQUALEx: ;

}
// $ANTLR end EQUAL

//   Comes from: 12:11: ( 'separator' | 'Separator' | 'SEPARATOR' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEPARATOR
 *
 * Looks to match the characters the constitute the token SEPARATOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEPARATOR(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEPARATOR;
       
    
    {
        //  BaseLexer.g:12:11: ( 'separator' | 'Separator' | 'SEPARATOR' )
        
        ANTLR3_UINT32 alt6;

        alt6=3;

        switch ( LA(1) ) 
        {
        case 's':
        	{
        		alt6=1;
        	}
            break;
        case 'S':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				alt6=2;
        			}
        		    break;
        		case 'E':
        			{
        				alt6=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 6;
        		    EXCEPTION->state        = 2;


        		    goto ruleSEPARATOREx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 6;
            EXCEPTION->state        = 0;


            goto ruleSEPARATOREx;
        }

        switch (alt6) 
        {
    	case 1:
    	    // BaseLexer.g:12:13: 'separator'
    	    {
    	        MATCHS(lit_16); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSEPARATOREx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:12:27: 'Separator'
    	    {
    	        MATCHS(lit_17); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSEPARATOREx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:12:41: 'SEPARATOR'
    	    {
    	        MATCHS(lit_18); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSEPARATOREx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEPARATOREx; /* Prevent compiler warnings */
    ruleSEPARATOREx: ;

}
// $ANTLR end SEPARATOR

//   Comes from: 13:12: ( 'attributes' | 'Attributes' | 'ATTRIBUTES' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ATTRIBUTES
 *
 * Looks to match the characters the constitute the token ATTRIBUTES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mATTRIBUTES(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ATTRIBUTES;
       
    
    {
        //  BaseLexer.g:13:12: ( 'attributes' | 'Attributes' | 'ATTRIBUTES' )
        
        ANTLR3_UINT32 alt7;

        alt7=3;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		alt7=1;
        	}
            break;
        case 'A':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				alt7=2;
        			}
        		    break;
        		case 'T':
        			{
        				alt7=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 7;
        		    EXCEPTION->state        = 2;


        		    goto ruleATTRIBUTESEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 7;
            EXCEPTION->state        = 0;


            goto ruleATTRIBUTESEx;
        }

        switch (alt7) 
        {
    	case 1:
    	    // BaseLexer.g:13:14: 'attributes'
    	    {
    	        MATCHS(lit_19); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleATTRIBUTESEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:13:29: 'Attributes'
    	    {
    	        MATCHS(lit_20); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleATTRIBUTESEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:13:44: 'ATTRIBUTES'
    	    {
    	        MATCHS(lit_21); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleATTRIBUTESEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleATTRIBUTESEx; /* Prevent compiler warnings */
    ruleATTRIBUTESEx: ;

}
// $ANTLR end ATTRIBUTES

//   Comes from: 14:12: ( 'textloader' | 'Textloader' | 'TextLoader' | 'TEXTLOADER' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TEXTLOADER
 *
 * Looks to match the characters the constitute the token TEXTLOADER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTEXTLOADER(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TEXTLOADER;
       
    
    {
        //  BaseLexer.g:14:12: ( 'textloader' | 'Textloader' | 'TextLoader' | 'TEXTLOADER' )
        
        ANTLR3_UINT32 alt8;

        alt8=4;

        switch ( LA(1) ) 
        {
        case 't':
        	{
        		alt8=1;
        	}
            break;
        case 'T':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'x':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										alt8=2;
        									}
        								    break;
        								case 'L':
        									{
        										alt8=3;
        									}
        								    break;

        								default:
        								    CONSTRUCTEX();
        								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        								    EXCEPTION->message      = (void *)"";
        								    EXCEPTION->decisionNum  = 8;
        								    EXCEPTION->state        = 6;


        								    goto ruleTEXTLOADEREx;
        								}

        							}
        						    break;

        						default:
        						    CONSTRUCTEX();
        						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        						    EXCEPTION->message      = (void *)"";
        						    EXCEPTION->decisionNum  = 8;
        						    EXCEPTION->state        = 5;


        						    goto ruleTEXTLOADEREx;
        						}

        					}
        				    break;

        				default:
        				    CONSTRUCTEX();
        				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        				    EXCEPTION->message      = (void *)"";
        				    EXCEPTION->decisionNum  = 8;
        				    EXCEPTION->state        = 3;


        				    goto ruleTEXTLOADEREx;
        				}

        			}
        		    break;
        		case 'E':
        			{
        				alt8=4;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 8;
        		    EXCEPTION->state        = 2;


        		    goto ruleTEXTLOADEREx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 8;
            EXCEPTION->state        = 0;


            goto ruleTEXTLOADEREx;
        }

        switch (alt8) 
        {
    	case 1:
    	    // BaseLexer.g:14:14: 'textloader'
    	    {
    	        MATCHS(lit_22); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTEXTLOADEREx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:14:29: 'Textloader'
    	    {
    	        MATCHS(lit_23); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTEXTLOADEREx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:14:44: 'TextLoader'
    	    {
    	        MATCHS(lit_24); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTEXTLOADEREx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // BaseLexer.g:14:59: 'TEXTLOADER'
    	    {
    	        MATCHS(lit_25); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTEXTLOADEREx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTEXTLOADEREx; /* Prevent compiler warnings */
    ruleTEXTLOADEREx: ;

}
// $ANTLR end TEXTLOADER

//   Comes from: 15:6: ( 'file' | 'File' | 'FILE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FILE
 *
 * Looks to match the characters the constitute the token FILE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFILE(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FILE;
       
    
    {
        //  BaseLexer.g:15:6: ( 'file' | 'File' | 'FILE' )
        
        ANTLR3_UINT32 alt9;

        alt9=3;

        switch ( LA(1) ) 
        {
        case 'f':
        	{
        		alt9=1;
        	}
            break;
        case 'F':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'i':
        			{
        				alt9=2;
        			}
        		    break;
        		case 'I':
        			{
        				alt9=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 9;
        		    EXCEPTION->state        = 2;


        		    goto ruleFILEEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 9;
            EXCEPTION->state        = 0;


            goto ruleFILEEx;
        }

        switch (alt9) 
        {
    	case 1:
    	    // BaseLexer.g:15:8: 'file'
    	    {
    	        MATCHS(lit_26); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILEEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:15:17: 'File'
    	    {
    	        MATCHS(lit_27); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILEEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:15:26: 'FILE'
    	    {
    	        MATCHS(lit_28); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFILEEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFILEEx; /* Prevent compiler warnings */
    ruleFILEEx: ;

}
// $ANTLR end FILE

//   Comes from: 23:10: ( 'match' | 'Match' | 'MATCH' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MATCH_DP
 *
 * Looks to match the characters the constitute the token MATCH_DP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMATCH_DP(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MATCH_DP;
       
    
    {
        //  BaseLexer.g:23:10: ( 'match' | 'Match' | 'MATCH' )
        
        ANTLR3_UINT32 alt10;

        alt10=3;

        switch ( LA(1) ) 
        {
        case 'm':
        	{
        		alt10=1;
        	}
            break;
        case 'M':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				alt10=2;
        			}
        		    break;
        		case 'A':
        			{
        				alt10=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 10;
        		    EXCEPTION->state        = 2;


        		    goto ruleMATCH_DPEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 10;
            EXCEPTION->state        = 0;


            goto ruleMATCH_DPEx;
        }

        switch (alt10) 
        {
    	case 1:
    	    // BaseLexer.g:23:12: 'match'
    	    {
    	        MATCHS(lit_29); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleMATCH_DPEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:23:22: 'Match'
    	    {
    	        MATCHS(lit_30); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleMATCH_DPEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:23:32: 'MATCH'
    	    {
    	        MATCHS(lit_31); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleMATCH_DPEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleMATCH_DPEx; /* Prevent compiler warnings */
    ruleMATCH_DPEx: ;

}
// $ANTLR end MATCH_DP

//   Comes from: 28:9: ( 'case' | 'Case' | 'CASE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CASE_DP
 *
 * Looks to match the characters the constitute the token CASE_DP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCASE_DP(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CASE_DP;
       
    
    {
        //  BaseLexer.g:28:9: ( 'case' | 'Case' | 'CASE' )
        
        ANTLR3_UINT32 alt11;

        alt11=3;

        switch ( LA(1) ) 
        {
        case 'c':
        	{
        		alt11=1;
        	}
            break;
        case 'C':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				alt11=2;
        			}
        		    break;
        		case 'A':
        			{
        				alt11=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 11;
        		    EXCEPTION->state        = 2;


        		    goto ruleCASE_DPEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 11;
            EXCEPTION->state        = 0;


            goto ruleCASE_DPEx;
        }

        switch (alt11) 
        {
    	case 1:
    	    // BaseLexer.g:28:13: 'case'
    	    {
    	        MATCHS(lit_32); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCASE_DPEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:28:22: 'Case'
    	    {
    	        MATCHS(lit_33); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCASE_DPEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:28:31: 'CASE'
    	    {
    	        MATCHS(lit_34); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCASE_DPEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCASE_DPEx; /* Prevent compiler warnings */
    ruleCASE_DPEx: ;

}
// $ANTLR end CASE_DP

//   Comes from: 32:8: ( 'true' | 'false' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BOOL_T
 *
 * Looks to match the characters the constitute the token BOOL_T
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBOOL_T(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BOOL_T;
       
    
    {
        //  BaseLexer.g:32:8: ( 'true' | 'false' )
        
        ANTLR3_UINT32 alt12;

        alt12=2;

        switch ( LA(1) ) 
        {
        case 't':
        	{
        		alt12=1;
        	}
            break;
        case 'f':
        	{
        		alt12=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 12;
            EXCEPTION->state        = 0;


            goto ruleBOOL_TEx;
        }

        switch (alt12) 
        {
    	case 1:
    	    // BaseLexer.g:32:10: 'true'
    	    {
    	        MATCHS(lit_35); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOL_TEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:32:19: 'false'
    	    {
    	        MATCHS(lit_36); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBOOL_TEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBOOL_TEx; /* Prevent compiler warnings */
    ruleBOOL_TEx: ;

}
// $ANTLR end BOOL_T

//   Comes from: 34:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;
       
    
    // BaseLexer.g:34:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // BaseLexer.g:34:9: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDEx;
        }


        // BaseLexer.g:34:33: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt13=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt13=1;
            	}
                break;

            }

            switch (alt13) 
            {
        	case 1:
        	    // BaseLexer.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop13;	/* break out of the loop */
        	    break;
            }
        }
        loop13: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 37:5: ( ( '0' .. '9' )+ ( 'L' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INT
 *
 * Looks to match the characters the constitute the token INT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INT;
       
    
    // BaseLexer.g:37:5: ( ( '0' .. '9' )+ ( 'L' )? )
    // BaseLexer.g:37:9: ( '0' .. '9' )+ ( 'L' )?
    {
        // BaseLexer.g:37:9: ( '0' .. '9' )+
        {
            int cnt14=0;

            for (;;)
            {
                int alt14=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt14=1;
        		}
        	    break;

        	}

        	switch (alt14) 
        	{
        	    case 1:
        	        // BaseLexer.g:37:9: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt14 >= 1 )
        		{
        		    goto loop14;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleINTEx;
        	}
        	cnt14++;
            }
            loop14: ;	/* Jump to here if this rule does not match */
        }

        // BaseLexer.g:37:19: ( 'L' )?
        {
            int alt15=2;
            switch ( LA(1) ) 
            {
                case 'L':
                	{
                		alt15=1;
                	}
                    break;
            }

            switch (alt15) 
            {
        	case 1:
        	    // BaseLexer.g:37:19: 'L'
        	    {
        	        MATCHC('L'); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleINTEx;
        	        }


        	    }
        	    break;

            }
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTEx; /* Prevent compiler warnings */
    ruleINTEx: ;

}
// $ANTLR end INT

//   Comes from: 41:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'f' | 'L' )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( 'f' | 'L' )? | ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FLOAT
 *
 * Looks to match the characters the constitute the token FLOAT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFLOAT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FLOAT;
       
    
    {
        //  BaseLexer.g:41:5: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'f' | 'L' )? | '.' ( '0' .. '9' )+ ( EXPONENT )? ( 'f' | 'L' )? | ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )? )
        
        ANTLR3_UINT32 alt25;

        alt25=3;

        alt25 = cdfa25.predict(ctx, RECOGNIZER, ISTREAM, &cdfa25);
        if  (HASEXCEPTION())
        {
            goto ruleFLOATEx;
        }

        switch (alt25) 
        {
    	case 1:
    	    // BaseLexer.g:41:9: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? ( 'f' | 'L' )?
    	    {
    	        // BaseLexer.g:41:9: ( '0' .. '9' )+
    	        {
    	            int cnt16=0;

    	            for (;;)
    	            {
    	                int alt16=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt16=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt16) 
    	        	{
    	        	    case 1:
    	        	        // BaseLexer.g:41:10: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt16 >= 1 )
    	        		{
    	        		    goto loop16;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt16++;
    	            }
    	            loop16: ;	/* Jump to here if this rule does not match */
    	        }
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // BaseLexer.g:41:25: ( '0' .. '9' )*

    	        for (;;)
    	        {
    	            int alt17=2;
    	            switch ( LA(1) ) 
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt17=1;
    	            	}
    	                break;

    	            }

    	            switch (alt17) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:41:26: '0' .. '9'
    	        	    {
    	        	        MATCHRANGE('0', '9'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop17;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop17: ; /* Jump out to here if this rule does not match */


    	        // BaseLexer.g:41:37: ( EXPONENT )?
    	        {
    	            int alt18=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt18=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt18) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:41:37: EXPONENT
    	        	    {
    	        	        /* 41:37: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // BaseLexer.g:41:47: ( 'f' | 'L' )?
    	        {
    	            int alt19=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'L':
    	                case 'f':
    	                	{
    	                		alt19=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt19) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:
    	        	    {
    	        	        if ( LA(1) == 'L' || LA(1) == 'f' )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:42:9: '.' ( '0' .. '9' )+ ( EXPONENT )? ( 'f' | 'L' )?
    	    {
    	        MATCHC('.'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }

    	        // BaseLexer.g:42:13: ( '0' .. '9' )+
    	        {
    	            int cnt20=0;

    	            for (;;)
    	            {
    	                int alt20=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt20=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt20) 
    	        	{
    	        	    case 1:
    	        	        // BaseLexer.g:42:14: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt20 >= 1 )
    	        		{
    	        		    goto loop20;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt20++;
    	            }
    	            loop20: ;	/* Jump to here if this rule does not match */
    	        }

    	        // BaseLexer.g:42:25: ( EXPONENT )?
    	        {
    	            int alt21=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt21=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt21) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:42:25: EXPONENT
    	        	    {
    	        	        /* 42:25: EXPONENT */
    	        	        mEXPONENT(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	        // BaseLexer.g:42:35: ( 'f' | 'L' )?
    	        {
    	            int alt22=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'L':
    	                case 'f':
    	                	{
    	                		alt22=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt22) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:
    	        	    {
    	        	        if ( LA(1) == 'L' || LA(1) == 'f' )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:43:9: ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )?
    	    {
    	        // BaseLexer.g:43:9: ( '0' .. '9' )+
    	        {
    	            int cnt23=0;

    	            for (;;)
    	            {
    	                int alt23=2;
    	        	switch ( LA(1) ) 
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt23=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt23) 
    	        	{
    	        	    case 1:
    	        	        // BaseLexer.g:43:10: '0' .. '9'
    	        	        {
    	        	            MATCHRANGE('0', '9'); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:
    	        	    
    	        		if ( cnt23 >= 1 )
    	        		{
    	        		    goto loop23;
    	        		}
    	        		/* mismatchedSetEx()
    	        		 */
    	        		CONSTRUCTEX();
    	        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
    	        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt23++;
    	            }
    	            loop23: ;	/* Jump to here if this rule does not match */
    	        }
    	        /* 43:9: ( '0' .. '9' )+ EXPONENT ( 'f' | 'L' )? */
    	        mEXPONENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        // BaseLexer.g:43:30: ( 'f' | 'L' )?
    	        {
    	            int alt24=2;
    	            switch ( LA(1) ) 
    	            {
    	                case 'L':
    	                case 'f':
    	                	{
    	                		alt24=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt24) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:
    	        	    {
    	        	        if ( LA(1) == 'L' || LA(1) == 'f' )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFLOATEx; /* Prevent compiler warnings */
    ruleFLOATEx: ;

}
// $ANTLR end FLOAT

//   Comes from: 47:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    {
        //  BaseLexer.g:47:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
        
        ANTLR3_UINT32 alt29;

        alt29=2;

        switch ( LA(1) ) 
        {
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '/':
        			{
        				alt29=1;
        			}
        		    break;
        		case '*':
        			{
        				alt29=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 29;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 29;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;
        }

        switch (alt29) 
        {
    	case 1:
    	    // BaseLexer.g:47:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    	    {
    	        MATCHS(lit_37); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // BaseLexer.g:47:14: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt26=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA26_0 = LA(1);
    	                if ( (((LA26_0 >= 0x0000) && (LA26_0 <= '\t')) || ((LA26_0 >= 0x000B) && (LA26_0 <= '\f')) || ((LA26_0 >= 0x000E) && (LA26_0 <= 0xFFFF)))) 
    	                {
    	                    alt26=1;
    	                }

    	            }
    	            switch (alt26) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:47:14: ~ ( '\\n' | '\\r' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop26;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop26: ; /* Jump out to here if this rule does not match */


    	        // BaseLexer.g:47:28: ( '\\r' )?
    	        {
    	            int alt27=2;
    	            switch ( LA(1) ) 
    	            {
    	                case '\r':
    	                	{
    	                		alt27=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt27) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:47:28: '\\r'
    	        	    {
    	        	        MATCHC('\r'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }
    	        MATCHC('\n'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }

    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:48:9: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_38); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // BaseLexer.g:48:14: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt28=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA28_0 = LA(1);
    	                if ( (LA28_0 == '*')) 
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA28_1 = LA(2);
    	                        if ( (LA28_1 == '/')) 
    	                        {
    	                            alt28=2;
    	                        }
    	                        else if ( (((LA28_1 >= 0x0000) && (LA28_1 <= '.')) || ((LA28_1 >= '0') && (LA28_1 <= 0xFFFF)))) 
    	                        {
    	                            alt28=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA28_0 >= 0x0000) && (LA28_0 <= ')')) || ((LA28_0 >= '+') && (LA28_0 <= 0xFFFF)))) 
    	                {
    	                    alt28=1;
    	                }

    	            }
    	            switch (alt28) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:48:42: .
    	        	    {
    	        	        MATCHANY(); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop28;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop28: ; /* Jump out to here if this rule does not match */

    	        MATCHS(lit_39); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            LEXSTATE->channel=HIDDEN;
    	        }

    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 51:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // BaseLexer.g:51:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    // BaseLexer.g:51:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
            LEXSTATE->channel=HIDDEN;
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

//   Comes from: 59:5: ( '\\'' ( ESC_SEQ | ~ ( '\\'' | '\\\\' ) )* '\\'' | '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRING
 *
 * Looks to match the characters the constitute the token STRING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRING(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRING;
       
    
    {
        //  BaseLexer.g:59:5: ( '\\'' ( ESC_SEQ | ~ ( '\\'' | '\\\\' ) )* '\\'' | '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"' )
        
        ANTLR3_UINT32 alt32;

        alt32=2;

        switch ( LA(1) ) 
        {
        case '\'':
        	{
        		alt32=1;
        	}
            break;
        case '"':
        	{
        		alt32=2;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 32;
            EXCEPTION->state        = 0;


            goto ruleSTRINGEx;
        }

        switch (alt32) 
        {
    	case 1:
    	    // BaseLexer.g:59:8: '\\'' ( ESC_SEQ | ~ ( '\\'' | '\\\\' ) )* '\\''
    	    {
    	        MATCHC('\''); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // BaseLexer.g:59:13: ( ESC_SEQ | ~ ( '\\'' | '\\\\' ) )*

    	        for (;;)
    	        {
    	            int alt30=3;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA30_0 = LA(1);
    	                if ( (LA30_0 == '\\')) 
    	                {
    	                    alt30=1;
    	                }
    	                else if ( (((LA30_0 >= 0x0000) && (LA30_0 <= '&')) || ((LA30_0 >= '(') && (LA30_0 <= '[')) || ((LA30_0 >= ']') && (LA30_0 <= 0xFFFF)))) 
    	                {
    	                    alt30=2;
    	                }

    	            }
    	            switch (alt30) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:59:15: ESC_SEQ
    	        	    {
    	        	        /* 59:15: ESC_SEQ */
    	        	        mESC_SEQ(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleSTRINGEx;
    	        	        }


    	        	    }
    	        	    break;
    	        	case 2:
    	        	    // BaseLexer.g:59:25: ~ ( '\\'' | '\\\\' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '&')) || ((LA(1) >= '(') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleSTRINGEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop30;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop30: ; /* Jump out to here if this rule does not match */

    	        MATCHC('\''); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:60:8: '\"' ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )* '\"'
    	    {
    	        MATCHC('"'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	        // BaseLexer.g:60:12: ( ESC_SEQ | ~ ( '\\\\' | '\"' ) )*

    	        for (;;)
    	        {
    	            int alt31=3;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA31_0 = LA(1);
    	                if ( (LA31_0 == '\\')) 
    	                {
    	                    alt31=1;
    	                }
    	                else if ( (((LA31_0 >= 0x0000) && (LA31_0 <= '!')) || ((LA31_0 >= '#') && (LA31_0 <= '[')) || ((LA31_0 >= ']') && (LA31_0 <= 0xFFFF)))) 
    	                {
    	                    alt31=2;
    	                }

    	            }
    	            switch (alt31) 
    	            {
    	        	case 1:
    	        	    // BaseLexer.g:60:14: ESC_SEQ
    	        	    {
    	        	        /* 60:14: ESC_SEQ */
    	        	        mESC_SEQ(ctx ); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleSTRINGEx;
    	        	        }


    	        	    }
    	        	    break;
    	        	case 2:
    	        	    // BaseLexer.g:60:24: ~ ( '\\\\' | '\"' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '!')) || ((LA(1) >= '#') && (LA(1) <= '[')) || ((LA(1) >= ']') && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleSTRINGEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop31;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop31: ; /* Jump out to here if this rule does not match */

    	        MATCHC('"'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTRINGEx;
    	        }


    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRINGEx; /* Prevent compiler warnings */
    ruleSTRINGEx: ;

}
// $ANTLR end STRING

//   Comes from: 63:11: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;
       
    
    // BaseLexer.g:63:11: ( ';' )
    // BaseLexer.g:63:13: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

//   Comes from: 64:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;
       
    
    // BaseLexer.g:64:7: ( ',' )
    // BaseLexer.g:64:9: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 65:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;
       
    
    // BaseLexer.g:65:7: ( ':' )
    // BaseLexer.g:65:9: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 66:5: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOT;
       
    
    // BaseLexer.g:66:5: ( '.' )
    // BaseLexer.g:66:7: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleDOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 67:8: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LPAREN
 *
 * Looks to match the characters the constitute the token LPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLPAREN(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LPAREN;
       
    
    // BaseLexer.g:67:8: ( '(' )
    // BaseLexer.g:67:10: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleLPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLPARENEx; /* Prevent compiler warnings */
    ruleLPARENEx: ;

}
// $ANTLR end LPAREN

//   Comes from: 68:8: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RPAREN
 *
 * Looks to match the characters the constitute the token RPAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRPAREN(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RPAREN;
       
    
    // BaseLexer.g:68:8: ( ')' )
    // BaseLexer.g:68:10: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleRPARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRPARENEx; /* Prevent compiler warnings */
    ruleRPARENEx: ;

}
// $ANTLR end RPAREN

//   Comes from: 69:5: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LSQ
 *
 * Looks to match the characters the constitute the token LSQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLSQ(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LSQ;
       
    
    // BaseLexer.g:69:5: ( '[' )
    // BaseLexer.g:69:7: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleLSQEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLSQEx; /* Prevent compiler warnings */
    ruleLSQEx: ;

}
// $ANTLR end LSQ

//   Comes from: 70:5: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RSQ
 *
 * Looks to match the characters the constitute the token RSQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRSQ(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RSQ;
       
    
    // BaseLexer.g:70:5: ( ']' )
    // BaseLexer.g:70:7: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleRSQEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRSQEx; /* Prevent compiler warnings */
    ruleRSQEx: ;

}
// $ANTLR end RSQ

//   Comes from: 71:7: ( '?' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start QMARK
 *
 * Looks to match the characters the constitute the token QMARK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mQMARK(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = QMARK;
       
    
    // BaseLexer.g:71:7: ( '?' )
    // BaseLexer.g:71:9: '?'
    {
        MATCHC('?'); 
        if  (HASEXCEPTION())
        {
            goto ruleQMARKEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleQMARKEx; /* Prevent compiler warnings */
    ruleQMARKEx: ;

}
// $ANTLR end QMARK

//   Comes from: 74:6: ( '&&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LAND
 *
 * Looks to match the characters the constitute the token LAND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLAND(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LAND;
       
    
    // BaseLexer.g:74:6: ( '&&' )
    // BaseLexer.g:74:8: '&&'
    {
        MATCHS(lit_40); 
        if  (HASEXCEPTION())
        {
            goto ruleLANDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLANDEx; /* Prevent compiler warnings */
    ruleLANDEx: ;

}
// $ANTLR end LAND

//   Comes from: 75:5: ( '||' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOR
 *
 * Looks to match the characters the constitute the token LOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLOR(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LOR;
       
    
    // BaseLexer.g:75:5: ( '||' )
    // BaseLexer.g:75:7: '||'
    {
        MATCHS(lit_41); 
        if  (HASEXCEPTION())
        {
            goto ruleLOREx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLOREx; /* Prevent compiler warnings */
    ruleLOREx: ;

}
// $ANTLR end LOR

//   Comes from: 76:6: ( '&' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BAND
 *
 * Looks to match the characters the constitute the token BAND
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBAND(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BAND;
       
    
    // BaseLexer.g:76:6: ( '&' )
    // BaseLexer.g:76:8: '&'
    {
        MATCHC('&'); 
        if  (HASEXCEPTION())
        {
            goto ruleBANDEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBANDEx; /* Prevent compiler warnings */
    ruleBANDEx: ;

}
// $ANTLR end BAND

//   Comes from: 77:5: ( '|' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BOR
 *
 * Looks to match the characters the constitute the token BOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBOR(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BOR;
       
    
    // BaseLexer.g:77:5: ( '|' )
    // BaseLexer.g:77:7: '|'
    {
        MATCHC('|'); 
        if  (HASEXCEPTION())
        {
            goto ruleBOREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBOREx; /* Prevent compiler warnings */
    ruleBOREx: ;

}
// $ANTLR end BOR

//   Comes from: 78:5: ( '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start XOR
 *
 * Looks to match the characters the constitute the token XOR
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mXOR(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = XOR;
       
    
    // BaseLexer.g:78:5: ( '^' )
    // BaseLexer.g:78:7: '^'
    {
        MATCHC('^'); 
        if  (HASEXCEPTION())
        {
            goto ruleXOREx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleXOREx; /* Prevent compiler warnings */
    ruleXOREx: ;

}
// $ANTLR end XOR

//   Comes from: 79:6: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LNOT
 *
 * Looks to match the characters the constitute the token LNOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLNOT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LNOT;
       
    
    // BaseLexer.g:79:6: ( '~' )
    // BaseLexer.g:79:8: '~'
    {
        MATCHC('~'); 
        if  (HASEXCEPTION())
        {
            goto ruleLNOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLNOTEx; /* Prevent compiler warnings */
    ruleLNOTEx: ;

}
// $ANTLR end LNOT

//   Comes from: 82:9: ( '==' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ISEQUAL
 *
 * Looks to match the characters the constitute the token ISEQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mISEQUAL(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ISEQUAL;
       
    
    // BaseLexer.g:82:9: ( '==' )
    // BaseLexer.g:82:11: '=='
    {
        MATCHS(lit_42); 
        if  (HASEXCEPTION())
        {
            goto ruleISEQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleISEQUALEx; /* Prevent compiler warnings */
    ruleISEQUALEx: ;

}
// $ANTLR end ISEQUAL

//   Comes from: 83:8: ( '!=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NEQUAL
 *
 * Looks to match the characters the constitute the token NEQUAL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNEQUAL(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NEQUAL;
       
    
    // BaseLexer.g:83:8: ( '!=' )
    // BaseLexer.g:83:10: '!='
    {
        MATCHS(lit_43); 
        if  (HASEXCEPTION())
        {
            goto ruleNEQUALEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNEQUALEx; /* Prevent compiler warnings */
    ruleNEQUALEx: ;

}
// $ANTLR end NEQUAL

//   Comes from: 84:4: ( '<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LS
 *
 * Looks to match the characters the constitute the token LS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLS(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LS;
       
    
    // BaseLexer.g:84:4: ( '<' )
    // BaseLexer.g:84:6: '<'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleLSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLSEx; /* Prevent compiler warnings */
    ruleLSEx: ;

}
// $ANTLR end LS

//   Comes from: 85:4: ( '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GT
 *
 * Looks to match the characters the constitute the token GT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GT;
       
    
    // BaseLexer.g:85:4: ( '>' )
    // BaseLexer.g:85:6: '>'
    {
        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleGTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleGTEx; /* Prevent compiler warnings */
    ruleGTEx: ;

}
// $ANTLR end GT

//   Comes from: 86:4: ( '<=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LE
 *
 * Looks to match the characters the constitute the token LE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLE(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LE;
       
    
    // BaseLexer.g:86:4: ( '<=' )
    // BaseLexer.g:86:6: '<='
    {
        MATCHS(lit_44); 
        if  (HASEXCEPTION())
        {
            goto ruleLEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLEEx; /* Prevent compiler warnings */
    ruleLEEx: ;

}
// $ANTLR end LE

//   Comes from: 87:4: ( '>=' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start GE
 *
 * Looks to match the characters the constitute the token GE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mGE(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = GE;
       
    
    // BaseLexer.g:87:4: ( '>=' )
    // BaseLexer.g:87:6: '>='
    {
        MATCHS(lit_45); 
        if  (HASEXCEPTION())
        {
            goto ruleGEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleGEEx; /* Prevent compiler warnings */
    ruleGEEx: ;

}
// $ANTLR end GE

//   Comes from: 88:5: ( '!' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NOT
 *
 * Looks to match the characters the constitute the token NOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNOT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NOT;
       
    
    // BaseLexer.g:88:5: ( '!' )
    // BaseLexer.g:88:7: '!'
    {
        MATCHC('!'); 
        if  (HASEXCEPTION())
        {
            goto ruleNOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNOTEx; /* Prevent compiler warnings */
    ruleNOTEx: ;

}
// $ANTLR end NOT

//   Comes from: 91:7: ( '<<' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SLEFT
 *
 * Looks to match the characters the constitute the token SLEFT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSLEFT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SLEFT;
       
    
    // BaseLexer.g:91:7: ( '<<' )
    // BaseLexer.g:91:9: '<<'
    {
        MATCHS(lit_46); 
        if  (HASEXCEPTION())
        {
            goto ruleSLEFTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSLEFTEx; /* Prevent compiler warnings */
    ruleSLEFTEx: ;

}
// $ANTLR end SLEFT

//   Comes from: 92:8: ( '>>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SRIGHT
 *
 * Looks to match the characters the constitute the token SRIGHT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSRIGHT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SRIGHT;
       
    
    // BaseLexer.g:92:8: ( '>>' )
    // BaseLexer.g:92:10: '>>'
    {
        MATCHS(lit_47); 
        if  (HASEXCEPTION())
        {
            goto ruleSRIGHTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSRIGHTEx; /* Prevent compiler warnings */
    ruleSRIGHTEx: ;

}
// $ANTLR end SRIGHT

//   Comes from: 93:6: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPLUS(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PLUS;
       
    
    // BaseLexer.g:93:6: ( '+' )
    // BaseLexer.g:93:8: '+'
    {
        MATCHC('+'); 
        if  (HASEXCEPTION())
        {
            goto rulePLUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 94:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINUS
 *
 * Looks to match the characters the constitute the token MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMINUS(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MINUS;
       
    
    // BaseLexer.g:94:7: ( '-' )
    // BaseLexer.g:94:9: '-'
    {
        MATCHC('-'); 
        if  (HASEXCEPTION())
        {
            goto ruleMINUSEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleMINUSEx; /* Prevent compiler warnings */
    ruleMINUSEx: ;

}
// $ANTLR end MINUS

//   Comes from: 95:7: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TIMES
 *
 * Looks to match the characters the constitute the token TIMES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTIMES(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TIMES;
       
    
    // BaseLexer.g:95:7: ( '*' )
    // BaseLexer.g:95:9: '*'
    {
        MATCHC('*'); 
        if  (HASEXCEPTION())
        {
            goto ruleTIMESEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTIMESEx; /* Prevent compiler warnings */
    ruleTIMESEx: ;

}
// $ANTLR end TIMES

//   Comes from: 96:8: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIVIDE
 *
 * Looks to match the characters the constitute the token DIVIDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDIVIDE(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DIVIDE;
       
    
    // BaseLexer.g:96:8: ( '/' )
    // BaseLexer.g:96:10: '/'
    {
        MATCHC('/'); 
        if  (HASEXCEPTION())
        {
            goto ruleDIVIDEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDIVIDEEx; /* Prevent compiler warnings */
    ruleDIVIDEEx: ;

}
// $ANTLR end DIVIDE

//   Comes from: 97:5: ( '%' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MOD
 *
 * Looks to match the characters the constitute the token MOD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mMOD(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = MOD;
       
    
    // BaseLexer.g:97:5: ( '%' )
    // BaseLexer.g:97:7: '%'
    {
        MATCHC('%'); 
        if  (HASEXCEPTION())
        {
            goto ruleMODEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleMODEx; /* Prevent compiler warnings */
    ruleMODEx: ;

}
// $ANTLR end MOD

//   Comes from: 100:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXPONENT
 *
 * Looks to match the characters the constitute the token EXPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXPONENT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // BaseLexer.g:100:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
    // BaseLexer.g:100:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
    {
        if ( LA(1) == 'E' || LA(1) == 'e' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleEXPONENTEx;
        }


        // BaseLexer.g:100:22: ( '+' | '-' )?
        {
            int alt33=2;
            switch ( LA(1) ) 
            {
                case '+':
                case '-':
                	{
                		alt33=1;
                	}
                    break;
            }

            switch (alt33) 
            {
        	case 1:
        	    // BaseLexer.g:
        	    {
        	        if ( LA(1) == '+' || LA(1) == '-' )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }
        // BaseLexer.g:100:33: ( '0' .. '9' )+
        {
            int cnt34=0;

            for (;;)
            {
                int alt34=2;
        	switch ( LA(1) ) 
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt34=1;
        		}
        	    break;

        	}

        	switch (alt34) 
        	{
        	    case 1:
        	        // BaseLexer.g:100:34: '0' .. '9'
        	        {
        	            MATCHRANGE('0', '9'); 
        	            if  (HASEXCEPTION())
        	            {
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:
        	    
        		if ( cnt34 >= 1 )
        		{
        		    goto loop34;
        		}
        		/* mismatchedSetEx()
        		 */
        		CONSTRUCTEX();
        		EXCEPTION->type = ANTLR3_EARLY_EXIT_EXCEPTION;
        		EXCEPTION->name = (void *)ANTLR3_EARLY_EXIT_NAME;


        		goto ruleEXPONENTEx;
        	}
        	cnt34++;
            }
            loop34: ;	/* Jump to here if this rule does not match */
        }

    }



    // This is where rules clean up and exit
    //
    goto ruleEXPONENTEx; /* Prevent compiler warnings */
    ruleEXPONENTEx: ;

}
// $ANTLR end EXPONENT

//   Comes from: 103:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start HEX_DIGIT
 *
 * Looks to match the characters the constitute the token HEX_DIGIT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mHEX_DIGIT(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // BaseLexer.g:103:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    // BaseLexer.g:103:13: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
    {
        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'F')) || ((LA(1) >= 'a') && (LA(1) <= 'f')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleHEX_DIGITEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleHEX_DIGITEx; /* Prevent compiler warnings */
    ruleHEX_DIGITEx: ;

}
// $ANTLR end HEX_DIGIT

//   Comes from: 107:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ESC_SEQ
 *
 * Looks to match the characters the constitute the token ESC_SEQ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mESC_SEQ(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  BaseLexer.g:107:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
        
        ANTLR3_UINT32 alt35;

        alt35=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt35=1;
        			}
        		    break;
        		case 'u':
        			{
        				alt35=2;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt35=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 35;
        		    EXCEPTION->state        = 1;


        		    goto ruleESC_SEQEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 35;
            EXCEPTION->state        = 0;


            goto ruleESC_SEQEx;
        }

        switch (alt35) 
        {
    	case 1:
    	    // BaseLexer.g:107:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }

    	        if ( LA(1) == '"' || LA(1) == '\'' || LA(1) == '\\' || LA(1) == 'b' || LA(1) == 'f' || LA(1) == 'n' || LA(1) == 'r' || LA(1) == 't' )
    	        {
    	            CONSUME();

    	        }
    	        else 
    	        {
    	            CONSTRUCTEX();
    	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	            LRECOVER();    goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:108:9: UNICODE_ESC
    	    {
    	        /* 108:9: UNICODE_ESC */
    	        mUNICODE_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:109:9: OCTAL_ESC
    	    {
    	        /* 109:9: OCTAL_ESC */
    	        mOCTAL_ESC(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleESC_SEQEx; /* Prevent compiler warnings */
    ruleESC_SEQEx: ;

}
// $ANTLR end ESC_SEQ

//   Comes from: 114:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OCTAL_ESC
 *
 * Looks to match the characters the constitute the token OCTAL_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOCTAL_ESC(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  BaseLexer.g:114:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
        
        ANTLR3_UINT32 alt36;

        alt36=3;

        switch ( LA(1) ) 
        {
        case '\\':
        	{
        		switch ( LA(2) ) 
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( LA(4) ) 
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt36=1;
        							}
        						    break;

        						default:
        						    alt36=2;}

        					}
        				    break;

        				default:
        				    alt36=3;}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt36=2;
        					}
        				    break;

        				default:
        				    alt36=3;}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 36;
        		    EXCEPTION->state        = 1;


        		    goto ruleOCTAL_ESCEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 36;
            EXCEPTION->state        = 0;


            goto ruleOCTAL_ESCEx;
        }

        switch (alt36) 
        {
    	case 1:
    	    // BaseLexer.g:114:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // BaseLexer.g:114:14: ( '0' .. '3' )
    	        // BaseLexer.g:114:15: '0' .. '3'
    	        {
    	            MATCHRANGE('0', '3'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // BaseLexer.g:114:25: ( '0' .. '7' )
    	        // BaseLexer.g:114:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // BaseLexer.g:114:36: ( '0' .. '7' )
    	        // BaseLexer.g:114:37: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:115:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // BaseLexer.g:115:14: ( '0' .. '7' )
    	        // BaseLexer.g:115:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }

    	        // BaseLexer.g:115:25: ( '0' .. '7' )
    	        // BaseLexer.g:115:26: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:116:9: '\\\\' ( '0' .. '7' )
    	    {
    	        MATCHC('\\'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }

    	        // BaseLexer.g:116:14: ( '0' .. '7' )
    	        // BaseLexer.g:116:15: '0' .. '7'
    	        {
    	            MATCHRANGE('0', '7'); 
    	            if  (HASEXCEPTION())
    	            {
    	                goto ruleOCTAL_ESCEx;
    	            }


    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleOCTAL_ESCEx; /* Prevent compiler warnings */
    ruleOCTAL_ESCEx: ;

}
// $ANTLR end OCTAL_ESC

//   Comes from: 121:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start UNICODE_ESC
 *
 * Looks to match the characters the constitute the token UNICODE_ESC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUNICODE_ESC(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    // BaseLexer.g:121:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    // BaseLexer.g:121:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    {
        MATCHC('\\'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        MATCHC('u'); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 121:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 121:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 121:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }

        /* 121:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT */
        mHEX_DIGIT(ctx ); 
        if  (HASEXCEPTION())
        {
            goto ruleUNICODE_ESCEx;
        }


    }



    // This is where rules clean up and exit
    //
    goto ruleUNICODE_ESCEx; /* Prevent compiler warnings */
    ruleUNICODE_ESCEx: ;

}
// $ANTLR end UNICODE_ESC

//   Comes from: 126:2: ( '+' | '-' | '*' | '/' | '%' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '<<' | '>>' | '!' | '~' | '^' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OP
 *
 * Looks to match the characters the constitute the token OP
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOP(pDataPath_BaseLexer ctx)
{
	ANTLR3_UINT32	_type;

        
    {
        //  BaseLexer.g:126:2: ( '+' | '-' | '*' | '/' | '%' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '<<' | '>>' | '!' | '~' | '^' )
        
        ANTLR3_UINT32 alt37;

        alt37=16;

        switch ( LA(1) ) 
        {
        case '+':
        	{
        		alt37=1;
        	}
            break;
        case '-':
        	{
        		alt37=2;
        	}
            break;
        case '*':
        	{
        		alt37=3;
        	}
            break;
        case '/':
        	{
        		alt37=4;
        	}
            break;
        case '%':
        	{
        		alt37=5;
        	}
            break;
        case '<':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt37=8;
        			}
        		    break;
        		case '<':
        			{
        				alt37=12;
        			}
        		    break;

        		default:
        		    alt37=6;}

        	}
            break;
        case '>':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt37=9;
        			}
        		    break;
        		case '>':
        			{
        				alt37=13;
        			}
        		    break;

        		default:
        		    alt37=7;}

        	}
            break;
        case '=':
        	{
        		alt37=10;
        	}
            break;
        case '!':
        	{
        		switch ( LA(2) ) 
        		{
        		case '=':
        			{
        				alt37=11;
        			}
        		    break;

        		default:
        		    alt37=14;}

        	}
            break;
        case '~':
        	{
        		alt37=15;
        	}
            break;
        case '^':
        	{
        		alt37=16;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 37;
            EXCEPTION->state        = 0;


            goto ruleOPEx;
        }

        switch (alt37) 
        {
    	case 1:
    	    // BaseLexer.g:126:4: '+'
    	    {
    	        MATCHC('+'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:126:8: '-'
    	    {
    	        MATCHC('-'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:126:12: '*'
    	    {
    	        MATCHC('*'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // BaseLexer.g:126:16: '/'
    	    {
    	        MATCHC('/'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // BaseLexer.g:126:20: '%'
    	    {
    	        MATCHC('%'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // BaseLexer.g:126:24: '<'
    	    {
    	        MATCHC('<'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // BaseLexer.g:126:28: '>'
    	    {
    	        MATCHC('>'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // BaseLexer.g:126:32: '<='
    	    {
    	        MATCHS(lit_44); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // BaseLexer.g:126:37: '>='
    	    {
    	        MATCHS(lit_45); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // BaseLexer.g:126:42: '=='
    	    {
    	        MATCHS(lit_42); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // BaseLexer.g:126:47: '!='
    	    {
    	        MATCHS(lit_43); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // BaseLexer.g:126:52: '<<'
    	    {
    	        MATCHS(lit_46); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // BaseLexer.g:126:57: '>>'
    	    {
    	        MATCHS(lit_47); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // BaseLexer.g:126:62: '!'
    	    {
    	        MATCHC('!'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // BaseLexer.g:126:66: '~'
    	    {
    	        MATCHC('~'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // BaseLexer.g:126:70: '^'
    	    {
    	        MATCHC('^'); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleOPEx;
    	        }


    	    }
    	    break;

        }
    }


    // This is where rules clean up and exit
    //
    goto ruleOPEx; /* Prevent compiler warnings */
    ruleOPEx: ;

}
// $ANTLR end OP

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pDataPath_BaseLexer ctx)
{
    {
        //  BaseLexer.g:1:8: ( FILTER | JOIN | GLA | PRINT | AGGREGATE | EQUAL | SEPARATOR | ATTRIBUTES | TEXTLOADER | FILE | MATCH_DP | CASE_DP | BOOL_T | ID | INT | FLOAT | COMMENT | WS | STRING | SEMICOLON | COMMA | COLON | DOT | LPAREN | RPAREN | LSQ | RSQ | QMARK | LAND | LOR | BAND | BOR | XOR | LNOT | ISEQUAL | NEQUAL | LS | GT | LE | GE | NOT | SLEFT | SRIGHT | PLUS | MINUS | TIMES | DIVIDE | MOD )
        
        ANTLR3_UINT32 alt38;

        alt38=48;

        alt38 = cdfa38.predict(ctx, RECOGNIZER, ISTREAM, &cdfa38);
        if  (HASEXCEPTION())
        {
            goto ruleTokensEx;
        }

        switch (alt38) 
        {
    	case 1:
    	    // BaseLexer.g:1:10: FILTER
    	    {
    	        /* 1:10: FILTER */
    	        mFILTER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // BaseLexer.g:1:17: JOIN
    	    {
    	        /* 1:17: JOIN */
    	        mJOIN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // BaseLexer.g:1:22: GLA
    	    {
    	        /* 1:22: GLA */
    	        mGLA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // BaseLexer.g:1:26: PRINT
    	    {
    	        /* 1:26: PRINT */
    	        mPRINT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // BaseLexer.g:1:32: AGGREGATE
    	    {
    	        /* 1:32: AGGREGATE */
    	        mAGGREGATE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // BaseLexer.g:1:42: EQUAL
    	    {
    	        /* 1:42: EQUAL */
    	        mEQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // BaseLexer.g:1:48: SEPARATOR
    	    {
    	        /* 1:48: SEPARATOR */
    	        mSEPARATOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // BaseLexer.g:1:58: ATTRIBUTES
    	    {
    	        /* 1:58: ATTRIBUTES */
    	        mATTRIBUTES(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // BaseLexer.g:1:69: TEXTLOADER
    	    {
    	        /* 1:69: TEXTLOADER */
    	        mTEXTLOADER(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // BaseLexer.g:1:80: FILE
    	    {
    	        /* 1:80: FILE */
    	        mFILE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // BaseLexer.g:1:85: MATCH_DP
    	    {
    	        /* 1:85: MATCH_DP */
    	        mMATCH_DP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // BaseLexer.g:1:94: CASE_DP
    	    {
    	        /* 1:94: CASE_DP */
    	        mCASE_DP(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // BaseLexer.g:1:102: BOOL_T
    	    {
    	        /* 1:102: BOOL_T */
    	        mBOOL_T(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // BaseLexer.g:1:109: ID
    	    {
    	        /* 1:109: ID */
    	        mID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // BaseLexer.g:1:112: INT
    	    {
    	        /* 1:112: INT */
    	        mINT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // BaseLexer.g:1:116: FLOAT
    	    {
    	        /* 1:116: FLOAT */
    	        mFLOAT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // BaseLexer.g:1:122: COMMENT
    	    {
    	        /* 1:122: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // BaseLexer.g:1:130: WS
    	    {
    	        /* 1:130: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // BaseLexer.g:1:133: STRING
    	    {
    	        /* 1:133: STRING */
    	        mSTRING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // BaseLexer.g:1:140: SEMICOLON
    	    {
    	        /* 1:140: SEMICOLON */
    	        mSEMICOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // BaseLexer.g:1:150: COMMA
    	    {
    	        /* 1:150: COMMA */
    	        mCOMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // BaseLexer.g:1:156: COLON
    	    {
    	        /* 1:156: COLON */
    	        mCOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // BaseLexer.g:1:162: DOT
    	    {
    	        /* 1:162: DOT */
    	        mDOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // BaseLexer.g:1:166: LPAREN
    	    {
    	        /* 1:166: LPAREN */
    	        mLPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // BaseLexer.g:1:173: RPAREN
    	    {
    	        /* 1:173: RPAREN */
    	        mRPAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // BaseLexer.g:1:180: LSQ
    	    {
    	        /* 1:180: LSQ */
    	        mLSQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // BaseLexer.g:1:184: RSQ
    	    {
    	        /* 1:184: RSQ */
    	        mRSQ(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // BaseLexer.g:1:188: QMARK
    	    {
    	        /* 1:188: QMARK */
    	        mQMARK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // BaseLexer.g:1:194: LAND
    	    {
    	        /* 1:194: LAND */
    	        mLAND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // BaseLexer.g:1:199: LOR
    	    {
    	        /* 1:199: LOR */
    	        mLOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // BaseLexer.g:1:203: BAND
    	    {
    	        /* 1:203: BAND */
    	        mBAND(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // BaseLexer.g:1:208: BOR
    	    {
    	        /* 1:208: BOR */
    	        mBOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // BaseLexer.g:1:212: XOR
    	    {
    	        /* 1:212: XOR */
    	        mXOR(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // BaseLexer.g:1:216: LNOT
    	    {
    	        /* 1:216: LNOT */
    	        mLNOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 35:
    	    // BaseLexer.g:1:221: ISEQUAL
    	    {
    	        /* 1:221: ISEQUAL */
    	        mISEQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 36:
    	    // BaseLexer.g:1:229: NEQUAL
    	    {
    	        /* 1:229: NEQUAL */
    	        mNEQUAL(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 37:
    	    // BaseLexer.g:1:236: LS
    	    {
    	        /* 1:236: LS */
    	        mLS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 38:
    	    // BaseLexer.g:1:239: GT
    	    {
    	        /* 1:239: GT */
    	        mGT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 39:
    	    // BaseLexer.g:1:242: LE
    	    {
    	        /* 1:242: LE */
    	        mLE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 40:
    	    // BaseLexer.g:1:245: GE
    	    {
    	        /* 1:245: GE */
    	        mGE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 41:
    	    // BaseLexer.g:1:248: NOT
    	    {
    	        /* 1:248: NOT */
    	        mNOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 42:
    	    // BaseLexer.g:1:252: SLEFT
    	    {
    	        /* 1:252: SLEFT */
    	        mSLEFT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 43:
    	    // BaseLexer.g:1:258: SRIGHT
    	    {
    	        /* 1:258: SRIGHT */
    	        mSRIGHT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 44:
    	    // BaseLexer.g:1:265: PLUS
    	    {
    	        /* 1:265: PLUS */
    	        mPLUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 45:
    	    // BaseLexer.g:1:270: MINUS
    	    {
    	        /* 1:270: MINUS */
    	        mMINUS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 46:
    	    // BaseLexer.g:1:276: TIMES
    	    {
    	        /* 1:276: TIMES */
    	        mTIMES(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 47:
    	    // BaseLexer.g:1:282: DIVIDE
    	    {
    	        /* 1:282: DIVIDE */
    	        mDIVIDE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 48:
    	    // BaseLexer.g:1:289: MOD
    	    {
    	        /* 1:289: MOD */
    	        mMOD(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
