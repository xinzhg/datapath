//
//  Copyright 2012 Alin Dobra and Christopher Jermaine
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : Piggy.g
 *     -                            On : 2012-06-14 15:15:16
 *     -                 for the lexer : PiggyLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "PiggyLexer.h"
/* ----------------------------------------- */


/** String literals used by PiggyLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x6C, 0x6F, 0x61, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x4C, 0x6F, 0x61, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x4C, 0x4F, 0x41, 0x44,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x72, 0x65, 0x61, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x52, 0x65, 0x61, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x52, 0x45, 0x41, 0x44,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x75, 0x73, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x55, 0x73, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x55, 0x53, 0x49, 0x4E, 0x47,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x66, 0x72, 0x6F, 0x6D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x46, 0x72, 0x6F, 0x6D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x46, 0x52, 0x4F, 0x4D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x62, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x42, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x42, 0x59,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x73, 0x74, 0x6F, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x53, 0x74, 0x6F, 0x72, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x53, 0x54, 0x4F, 0x52, 0x45,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x61, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x41, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x41, 0x53,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x74, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x54, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x54, 0x4F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x69, 0x6E, 0x74, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x49, 0x6E, 0x74, 0x6F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x49, 0x4E, 0x54, 0x4F,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pPiggyLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pPiggyLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pPiggyLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pPiggyLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mLOAD    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mREAD    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mUSING    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mFROM    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mBY    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mSTORE    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mAS    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mTO    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mINTO    (pPiggyLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pPiggyLexer ctx);
static void	PiggyLexerFree(pPiggyLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
PiggyLexerFree  (pPiggyLexer ctx)
{
	// Free the lexers that we delegated to
	// functions to. NULL the state so we only free it once.
	//
	ctx->gBaseLexer->pLexer->rec->state = NULL;
	         ctx->gBaseLexer->free(ctx->gBaseLexer);    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

static void
PiggyLexerReset (pPiggyLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "Piggy.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called PiggyLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pPiggyLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pPiggyLexer PiggyLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return PiggyLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called PiggyLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pPiggyLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pPiggyLexer PiggyLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pPiggyLexer ctx; // Context structure we will build and return

    ctx = (pPiggyLexer) ANTLR3_CALLOC(1, sizeof(PiggyLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in PiggyLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our PiggyLexer interface
     */
    ctx->mLOAD	= mLOAD;
    ctx->mREAD	= mREAD;
    ctx->mUSING	= mUSING;
    ctx->mFROM	= mFROM;
    ctx->mBY	= mBY;
    ctx->mSTORE	= mSTORE;
    ctx->mAS	= mAS;
    ctx->mTO	= mTO;
    ctx->mINTO	= mINTO;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= PiggyLexerFree;
    ctx->reset          = PiggyLexerReset;

	// Initialize the lexers that we are going to delegate some
	// functions to.
	//
	ctx->gBaseLexer = Piggy_BaseLexerNewSSD(instream, ctx->pLexer->rec->state, ctx);    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 13:6: ( 'load' | 'Load' | 'LOAD' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOAD
 *
 * Looks to match the characters the constitute the token LOAD
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mLOAD(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = LOAD;
       
    
    {
        //  Piggy.g:13:6: ( 'load' | 'Load' | 'LOAD' )
        
        ANTLR3_UINT32 alt1;

        alt1=3;

        switch ( LA(1) ) 
        {
        case 'l':
        	{
        		alt1=1;
        	}
            break;
        case 'L':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				alt1=2;
        			}
        		    break;
        		case 'O':
        			{
        				alt1=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 1;
        		    EXCEPTION->state        = 2;


        		    goto ruleLOADEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 1;
            EXCEPTION->state        = 0;


            goto ruleLOADEx;
        }

        switch (alt1) 
        {
    	case 1:
    	    // Piggy.g:13:8: 'load'
    	    {
    	        MATCHS(lit_1); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleLOADEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:13:17: 'Load'
    	    {
    	        MATCHS(lit_2); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleLOADEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:13:26: 'LOAD'
    	    {
    	        MATCHS(lit_3); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleLOADEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleLOADEx; /* Prevent compiler warnings */
    ruleLOADEx: ;

}
// $ANTLR end LOAD

//   Comes from: 14:6: ( 'read' | 'Read' | 'READ' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start READ
 *
 * Looks to match the characters the constitute the token READ
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mREAD(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = READ;
       
    
    {
        //  Piggy.g:14:6: ( 'read' | 'Read' | 'READ' )
        
        ANTLR3_UINT32 alt2;

        alt2=3;

        switch ( LA(1) ) 
        {
        case 'r':
        	{
        		alt2=1;
        	}
            break;
        case 'R':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				alt2=2;
        			}
        		    break;
        		case 'E':
        			{
        				alt2=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 2;
        		    EXCEPTION->state        = 2;


        		    goto ruleREADEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 2;
            EXCEPTION->state        = 0;


            goto ruleREADEx;
        }

        switch (alt2) 
        {
    	case 1:
    	    // Piggy.g:14:8: 'read'
    	    {
    	        MATCHS(lit_4); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleREADEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:14:17: 'Read'
    	    {
    	        MATCHS(lit_5); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleREADEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:14:26: 'READ'
    	    {
    	        MATCHS(lit_6); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleREADEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleREADEx; /* Prevent compiler warnings */
    ruleREADEx: ;

}
// $ANTLR end READ

//   Comes from: 15:7: ( 'using' | 'Using' | 'USING' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start USING
 *
 * Looks to match the characters the constitute the token USING
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mUSING(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = USING;
       
    
    {
        //  Piggy.g:15:7: ( 'using' | 'Using' | 'USING' )
        
        ANTLR3_UINT32 alt3;

        alt3=3;

        switch ( LA(1) ) 
        {
        case 'u':
        	{
        		alt3=1;
        	}
            break;
        case 'U':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				alt3=2;
        			}
        		    break;
        		case 'S':
        			{
        				alt3=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 3;
        		    EXCEPTION->state        = 2;


        		    goto ruleUSINGEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 3;
            EXCEPTION->state        = 0;


            goto ruleUSINGEx;
        }

        switch (alt3) 
        {
    	case 1:
    	    // Piggy.g:15:9: 'using'
    	    {
    	        MATCHS(lit_7); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleUSINGEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:15:19: 'Using'
    	    {
    	        MATCHS(lit_8); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleUSINGEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:15:29: 'USING'
    	    {
    	        MATCHS(lit_9); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleUSINGEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleUSINGEx; /* Prevent compiler warnings */
    ruleUSINGEx: ;

}
// $ANTLR end USING

//   Comes from: 16:6: ( 'from' | 'From' | 'FROM' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FROM
 *
 * Looks to match the characters the constitute the token FROM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mFROM(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = FROM;
       
    
    {
        //  Piggy.g:16:6: ( 'from' | 'From' | 'FROM' )
        
        ANTLR3_UINT32 alt4;

        alt4=3;

        switch ( LA(1) ) 
        {
        case 'f':
        	{
        		alt4=1;
        	}
            break;
        case 'F':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				alt4=2;
        			}
        		    break;
        		case 'R':
        			{
        				alt4=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 4;
        		    EXCEPTION->state        = 2;


        		    goto ruleFROMEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 4;
            EXCEPTION->state        = 0;


            goto ruleFROMEx;
        }

        switch (alt4) 
        {
    	case 1:
    	    // Piggy.g:16:8: 'from'
    	    {
    	        MATCHS(lit_10); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFROMEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:16:17: 'From'
    	    {
    	        MATCHS(lit_11); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFROMEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:16:26: 'FROM'
    	    {
    	        MATCHS(lit_12); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleFROMEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleFROMEx; /* Prevent compiler warnings */
    ruleFROMEx: ;

}
// $ANTLR end FROM

//   Comes from: 17:4: ( 'by' | 'By' | 'BY' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BY
 *
 * Looks to match the characters the constitute the token BY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBY(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BY;
       
    
    {
        //  Piggy.g:17:4: ( 'by' | 'By' | 'BY' )
        
        ANTLR3_UINT32 alt5;

        alt5=3;

        switch ( LA(1) ) 
        {
        case 'b':
        	{
        		alt5=1;
        	}
            break;
        case 'B':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'y':
        			{
        				alt5=2;
        			}
        		    break;
        		case 'Y':
        			{
        				alt5=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 5;
        		    EXCEPTION->state        = 2;


        		    goto ruleBYEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 5;
            EXCEPTION->state        = 0;


            goto ruleBYEx;
        }

        switch (alt5) 
        {
    	case 1:
    	    // Piggy.g:17:6: 'by'
    	    {
    	        MATCHS(lit_13); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBYEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:17:13: 'By'
    	    {
    	        MATCHS(lit_14); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBYEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:17:20: 'BY'
    	    {
    	        MATCHS(lit_15); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBYEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBYEx; /* Prevent compiler warnings */
    ruleBYEx: ;

}
// $ANTLR end BY

//   Comes from: 18:7: ( 'store' | 'Store' | 'STORE' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STORE
 *
 * Looks to match the characters the constitute the token STORE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTORE(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STORE;
       
    
    {
        //  Piggy.g:18:7: ( 'store' | 'Store' | 'STORE' )
        
        ANTLR3_UINT32 alt6;

        alt6=3;

        switch ( LA(1) ) 
        {
        case 's':
        	{
        		alt6=1;
        	}
            break;
        case 'S':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				alt6=2;
        			}
        		    break;
        		case 'T':
        			{
        				alt6=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 6;
        		    EXCEPTION->state        = 2;


        		    goto ruleSTOREEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 6;
            EXCEPTION->state        = 0;


            goto ruleSTOREEx;
        }

        switch (alt6) 
        {
    	case 1:
    	    // Piggy.g:18:9: 'store'
    	    {
    	        MATCHS(lit_16); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTOREEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:18:19: 'Store'
    	    {
    	        MATCHS(lit_17); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTOREEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:18:29: 'STORE'
    	    {
    	        MATCHS(lit_18); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleSTOREEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTOREEx; /* Prevent compiler warnings */
    ruleSTOREEx: ;

}
// $ANTLR end STORE

//   Comes from: 19:4: ( 'as' | 'As' | 'AS' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start AS
 *
 * Looks to match the characters the constitute the token AS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mAS(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = AS;
       
    
    {
        //  Piggy.g:19:4: ( 'as' | 'As' | 'AS' )
        
        ANTLR3_UINT32 alt7;

        alt7=3;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		alt7=1;
        	}
            break;
        case 'A':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				alt7=2;
        			}
        		    break;
        		case 'S':
        			{
        				alt7=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 7;
        		    EXCEPTION->state        = 2;


        		    goto ruleASEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 7;
            EXCEPTION->state        = 0;


            goto ruleASEx;
        }

        switch (alt7) 
        {
    	case 1:
    	    // Piggy.g:19:6: 'as'
    	    {
    	        MATCHS(lit_19); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleASEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:19:13: 'As'
    	    {
    	        MATCHS(lit_20); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleASEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:19:20: 'AS'
    	    {
    	        MATCHS(lit_21); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleASEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleASEx; /* Prevent compiler warnings */
    ruleASEx: ;

}
// $ANTLR end AS

//   Comes from: 20:4: ( 'to' | 'To' | 'TO' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TO
 *
 * Looks to match the characters the constitute the token TO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTO(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TO;
       
    
    {
        //  Piggy.g:20:4: ( 'to' | 'To' | 'TO' )
        
        ANTLR3_UINT32 alt8;

        alt8=3;

        switch ( LA(1) ) 
        {
        case 't':
        	{
        		alt8=1;
        	}
            break;
        case 'T':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				alt8=2;
        			}
        		    break;
        		case 'O':
        			{
        				alt8=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 8;
        		    EXCEPTION->state        = 2;


        		    goto ruleTOEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 8;
            EXCEPTION->state        = 0;


            goto ruleTOEx;
        }

        switch (alt8) 
        {
    	case 1:
    	    // Piggy.g:20:6: 'to'
    	    {
    	        MATCHS(lit_22); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTOEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:20:13: 'To'
    	    {
    	        MATCHS(lit_23); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTOEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:20:20: 'TO'
    	    {
    	        MATCHS(lit_24); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTOEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOEx; /* Prevent compiler warnings */
    ruleTOEx: ;

}
// $ANTLR end TO

//   Comes from: 21:6: ( 'into' | 'Into' | 'INTO' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTO
 *
 * Looks to match the characters the constitute the token INTO
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTO(pPiggyLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTO;
       
    
    {
        //  Piggy.g:21:6: ( 'into' | 'Into' | 'INTO' )
        
        ANTLR3_UINT32 alt9;

        alt9=3;

        switch ( LA(1) ) 
        {
        case 'i':
        	{
        		alt9=1;
        	}
            break;
        case 'I':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				alt9=2;
        			}
        		    break;
        		case 'N':
        			{
        				alt9=3;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 9;
        		    EXCEPTION->state        = 2;


        		    goto ruleINTOEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 9;
            EXCEPTION->state        = 0;


            goto ruleINTOEx;
        }

        switch (alt9) 
        {
    	case 1:
    	    // Piggy.g:21:8: 'into'
    	    {
    	        MATCHS(lit_25); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleINTOEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // Piggy.g:21:17: 'Into'
    	    {
    	        MATCHS(lit_26); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleINTOEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // Piggy.g:21:26: 'INTO'
    	    {
    	        MATCHS(lit_27); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleINTOEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTOEx; /* Prevent compiler warnings */
    ruleINTOEx: ;

}
// $ANTLR end INTO

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pPiggyLexer ctx)
{
    {
        //  Piggy.g:1:8: ( LOAD | READ | USING | FROM | BY | STORE | AS | TO | INTO | BaseLexer. Tokens )
        
        ANTLR3_UINT32 alt10;

        alt10=10;

        switch ( LA(1) ) 
        {
        case 'l':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=1;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'L':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=1;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'O':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'A':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'D':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=1;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'r':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=2;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'R':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=2;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'E':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'A':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'D':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=2;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'n':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'g':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=3;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'U':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'n':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'g':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=3;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'S':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'I':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'N':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'G':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=3;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'f':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'm':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=4;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'F':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'm':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=4;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'R':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'O':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'M':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=4;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'b':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'y':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=5;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'B':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'y':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=5;}

        			}
        		    break;
        		case 'Y':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=5;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 's':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=6;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'S':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=6;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'T':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'O':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'R':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'E':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt10=10;
        											}
        										    break;

        										default:
        										    alt10=6;}

        									}
        								    break;

        								default:
        								    alt10=10;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'a':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=7;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'A':
        	{
        		switch ( LA(2) ) 
        		{
        		case 's':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=7;}

        			}
        		    break;
        		case 'S':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=7;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 't':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=8;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'T':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=8;}

        			}
        		    break;
        		case 'O':
        			{
        				switch ( LA(3) ) 
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt10=10;
        					}
        				    break;

        				default:
        				    alt10=8;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'i':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=9;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case 'I':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=9;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;
        		case 'N':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'T':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'O':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt10=10;
        									}
        								    break;

        								default:
        								    alt10=9;}

        							}
        						    break;

        						default:
        						    alt10=10;}

        					}
        				    break;

        				default:
        				    alt10=10;}

        			}
        		    break;

        		default:
        		    alt10=10;}

        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        case '!':
        case '"':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case ',':
        case '-':
        case '.':
        case '/':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'C':
        case 'D':
        case 'E':
        case 'G':
        case 'H':
        case 'J':
        case 'K':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '[':
        case ']':
        case '^':
        case '_':
        case 'c':
        case 'd':
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'q':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        case '|':
        case '~':
        	{
        		alt10=10;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 10;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt10) 
        {
    	case 1:
    	    // Piggy.g:1:10: LOAD
    	    {
    	        /* 1:10: LOAD */
    	        mLOAD(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // Piggy.g:1:15: READ
    	    {
    	        /* 1:15: READ */
    	        mREAD(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // Piggy.g:1:20: USING
    	    {
    	        /* 1:20: USING */
    	        mUSING(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // Piggy.g:1:26: FROM
    	    {
    	        /* 1:26: FROM */
    	        mFROM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // Piggy.g:1:31: BY
    	    {
    	        /* 1:31: BY */
    	        mBY(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // Piggy.g:1:34: STORE
    	    {
    	        /* 1:34: STORE */
    	        mSTORE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // Piggy.g:1:40: AS
    	    {
    	        /* 1:40: AS */
    	        mAS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // Piggy.g:1:43: TO
    	    {
    	        /* 1:43: TO */
    	        mTO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // Piggy.g:1:46: INTO
    	    {
    	        /* 1:46: INTO */
    	        mINTO(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // Piggy.g:1:51: BaseLexer. Tokens
    	    {
    	        /* 1:51: BaseLexer. Tokens */
    	        ctx->gBaseLexer->mTokens(ctx->gBaseLexer ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
